// $Id$
// VSL functions for DDD graph display

// Copyright (C) 1995 Technische Universitaet Braunschweig, Germany.
// Written by Andreas Zeller (zeller@ips.cs.tu-bs.de).
// 
// This file is part of the DDD Library.
// 
// The DDD Library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
// 
// The DDD Library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Library General Public License for more details.
// 
// You should have received a copy of the GNU Library General Public
// License along with the DDD Library -- see the file COPYING.LIB.
// If not, write to the Free Software Foundation, Inc.,
// 675 Mass Ave, Cambridge, MA 02139, USA.
// 
// DDD is the data display debugger.
// For details, see the DDD World-Wide-Web page, 
// `http://www.cs.tu-bs.de/softech/ddd/',
// or send a mail to the DDD developers at `ddd@ips.cs.tu-bs.de'.

// Includes
#include <std.vsl>
#include <fonts.vsl>
#include <colors.vsl>

// Font settings
#replace stdfontfamily
stdfontfamily() = family_typewriter();

// Shadow effects
shadow(box, thickness) =
  box & (square(thickness) | vrule(thickness))
| square(thickness) & hrule(thickness);
shadow(box) = shadow(box, 1);

// Colors
display_color(box)   = color(box, "black", "grey95");
title_color(box)     = color(box, "black");
disabled_color(box)  = color(box, "white", "grey50");
simple_color(box)    = color(box, "black");
pointer_color(box)   = color(box, "blue4");
struct_color(box)    = color(box, "black");
array_color(box)     = color(box, "blue4");
reference_color(box) = color(box, "blue4");

// The title
title (disp_nr, name) -> 
  title_color(rm(disp_nr & ": ") & bf(name) & hfill());

// The "disabled" string
disabled () -> 
  disabled_color(vcenter(it("(Disabled)") & hfill()));

// Ordinary values
simple_value (value) -> 
  simple_color(vcenter(rm(value) & hfill()));

// Collapsed ordinary values
collapsed_simple_value () -> 
  simple_color(vcenter(rm("...") & hfill()));

// Ordinary pointers
pointer_value (value) -> 
  pointer_color(vcenter(rm(value) & hfill()));

// Collapsed pointers
collapsed_pointer_value () -> 
  pointer_color(vcenter(rm("...") & hfill()));

// Dereferenced pointers
dereferenced_pointer_value (value) -> 
  pointer_color(vcenter(bf(value)) & hfill());

// Collapsed array
collapsed_array () -> 
  array_color(vcenter(rm("[...]") & hfill()));

// Vertical array
vertical_array (...) -> 
  array_color(frame(indent(vlist(hwhite() | hrule() | hwhite(), ...))));

// Horizontal array
horizontal_array (...) -> 
  array_color(frame(indent(hlist((vwhite(3) & vrule() & vwhite(3)), ...))));

// Struct value
struct_value (...) -> 
  struct_color(frame(indent(valign(...)) & hfill()));

// Collapsed struct
collapsed_struct_value () -> 
  struct_color(vcenter(rm("{...}") & hfill()));

// Struct member name
struct_member_name (name) -> 
  struct_color(rm(name));

// Struct member
struct_member (name, value, name_width) -> 
  vcenter(rm(name) | hspace(name_width)) 
  & vcenter(rm(" = ")) & rm(value) & hfill();

// Reference
reference_value (ref, value) -> 
  reference_color(vcenter(rm(ref & ": ")) & value & hfill());

// Collapsed Reference
collapsed_reference_value () -> 
  reference_color(vcenter(rm("...") & hfill()));

// The entire box
display_box (title, value) -> 
  shadow(display_color(frame(title | hrule() | hwhite () | value)));
