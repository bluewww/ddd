# $Id$
# DDD Makefile.

# Copyright (C) 1995 Technische Universitaet Braunschweig, Germany.
# Written by Andreas Zeller (zeller@ips.cs.tu-bs.de).
# 
# This file is part of the DDD Library.
# 
# The DDD Library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
# 
# The DDD Library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Library General Public License for more details.
# 
# You should have received a copy of the GNU Library General Public
# License along with the DDD Library -- see the file COPYING.LIB.
# If not, write to the Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.
# 
# DDD is the data display debugger.
# For details, see the DDD World-Wide-Web page, 
# `http://www.cs.tu-bs.de/softech/ddd/',
# or send a mail to the DDD developers at `ddd@ips.cs.tu-bs.de'.


### CUSTOMIZATION SECTION --- Please check the settings below.

## Directories.

# Common prefix for installation directories.
# NOTE: This directory must exist when you start the install.
prefix = @prefix@
exec_prefix = @exec_prefix@

# Where to fetch the source from.
srcdir = @srcdir@
VPATH = @srcdir@

# Where to put the binary.
bindir = $(exec_prefix)/bin

# Where to put the info file.
infodir = $(prefix)/info

# Where to put the manual page.
mandir  = $(prefix)/man
man1dir = $(mandir)/man1
man1ext = .1


## Architecture (usually overridden by the top-level Makefile).

# The host we were compiled on.
host_canonical = @host@

# The target we were compiled for.
target_canonical = @host@


## Special commands.

# The sed command.
SED = @SED@

# The rm command.
RM = rm -f

# The ln -s command for making symbolic links (plain ln should work too).
LN_S = @LN_S@

# The m4 command (preferably GNU m4)
M4 = M4PATH=$(srcdir) @M4@

# The lex command, its flags, and its library.
LEX = @LEX@
LFLAGS = @LFLAGS@
LEXLIB = @LEXLIB@

# The yacc command and its flags.
YACC = @YACC@
YFLAGS = @YFLAGS@

# The shell for executing commands in the Makefile.
SHELL = @SH@

# The ar command.
AR = ar

# ar flags for creating a new archive.
AR_FLAGS = q

# ar flags for extracting files from an archive.
AR_X_FLAGS = x

# The ranlib command.
RANLIB = @RANLIB@



## The C++ compiler.

# What we use to compile C++ files.
CXX = @CXX@

# The flags we use to compile C++ files (lots!)
CXXOPT = @CXXOPT@
CXXDEBUG = @CXXDEBUG@
CXXWARNINGS = @CXXWARNINGS@
CXXFLAGS = $(CXXOPT) $(CXXDEBUG) $(CXXWARNINGS)
CXXSTUFF = @CXXSTUFF@

# Possible extra libraries required for all C++ programs.
CXXLIBS = @CXXLIBS@


## The C compiler (for demos only)

# What we use to compile C files.
# CC = @CC@
CC = cc

# The flags we use to compile C files.
# CFLAGS = @CFLAGS@
CFLAGS = -g


## The Pascal compiler (for demos only)

# What we use to compile Pascal files.
PC = pc

# The flags we use to compile Pascal files.
PFLAGS = -g


## The Modula-2 compiler (for demos only)

# What we use to compile Modula-2 files.
M2C = m2c

# The flags we use to compile Modula-2 files.
M2FLAGS = -g


## The C preprocessor.

# What we use for preprocessing.
CPP = @CPP_TRADITIONAL@

# Flags passed to the C preprocessor.
CPPFLAGS = @CPPFLAGS@

# Definitions to be passed to the C preprocessor.
DEFS = @DEFS@


## The Linker.

# Flags passed to the linker.
LDFLAGS = @LDFLAGS@


## Local libraries

# Note: on HP-UX (and other systems?), the Motif references the
# regcomp() function from libc, the standard C library.  A GNU version
# of regcomp() is provided by libg++, but it is incompatible with the
# HP-UX regcomp() that Motif expects.  To make sure we get the correct
# functions, we reference libc explicitly (-lc).  Also, our local
# librx library required by the regex classes redefines regcomp(),
# regexec(), ... to GNU_regcomp(), GNU_regexec() and so on.

# Bug reported and fixed by neal@ctd.comsat.com (Neal Becker).

LIBRX      = @LIBRX@
LIBTERMCAP = @LIBTERMCAP@
LIBIBERTY  = @LIBIBERTY@
LIBM       = @LIBM@
LIBC       = @LIBC@
LIBS = $(LIBC) $(LIBRX) $(LIBTERMCAP) $(LIBIBERTY) $(LIBM) $(LIBC)


## X Libraries

# Special flags for linking with X
LIBX = @X_PRE_LIBS@ @X_LIBS@

# Motif library (-lXm)
LIBXM = @XM_LIBS@

# Athena libraries (-lXaw -lXmu)
LIBXAW = @XAW_LIBS@

# X extension library (-lXext); needed for Athena and Motif 2.0
LIBXEXT = @XEXT_LIBS@

# X toolkit library (-lXt)
LIBXT = @XT_LIBS@

# X library (-lX11)
LIBX11 = @X11_LIBS@ @X_EXTRA_LIBS@

# All libraries shown above
ALL_X_LIBS = $(LIBX) $(LIBXM) $(LIBXAW) $(LIBXEXT) $(LIBXT) $(LIBX11)


## Installation commands.

# General install program.
INSTALL = @INSTALL@

# Command for installing programs.
INSTALL_PROGRAM = @INSTALL_PROGRAM@

# Command for installing data.
INSTALL_DATA = @INSTALL_DATA@

# Transformed name of installed programs.
transform=@program_transform_name@


## The following definitions are needed for development only.
## Usually, you don't need any of these.

# The autoconf program.
AUTOCONF = autoconf

# The autoheader program.
AUTOHEADER = autoheader

# The tar program.
TAR = @TAR@

# The gzip program.
GZIP = @GZIP@

# The groff program.
GROFF = groff

# The nroff program.
# NROFF = nroff
NROFF = $(GROFF) -Tascii

# The makeinfo program.
MAKEINFO = makeinfo

# The texindex program.
TEXINDEX = texindex

# The texi2html program.
TEXI2HTML = texi2html

# The TeX program.
TEX = tex

# The ad2c program.
AD2C = $(SED) -n -f $(srcdir)/ad2c.sed

# The vsl2c program.
VSL2C = $(SED) -f $(srcdir)/vsl2c.sed

# The dvips program.
DVIPS = @DVIPS@

# The co and ci programs.
CO = co
CI = ci

# The rcsdiff program.
RCSDIFF = rcsdiff

# The ls program.
LS = ls

# The head program.
HEAD = head

# The make program, if not predefined.
@SET_MAKE@

# The mv command.
MV = mv

# The echo command.
ECHO = echo

# The awk command.
AWK = @AWK@

# The cat command.
CAT = cat

# The cut command.
CUT = cut

# The cmp command.
CMP = cmp

# The grep command.
GREP = grep

# The sort command.
SORT = sort

# The diff command.
DIFF = @DIFF@

# The touch command.
TOUCH = touch

# The date command.
DATE = date

# The strip command.
STRIP = strip

# The mkdir and rmdir commands.
MKDIR = mkdir
RMDIR = rmdir

# The GNU Debugger.
GDB = gdb

### END OF CUSTOMIZATION SECTION ---
### You shouldn't need to change anything below this line.


## The names.
# Program and distribution base name.
ddd = @ddd@

# Product name.
DDD = @DDD@

# The version number.
VERSION = @VERSION@

# Index file fix
FIX_INDEX = $(SED) -f $(srcdir)/fixindex.sed

# Newhelp command
NEWHELP = sed="$(SED)" $(SHELL) $(srcdir)/newhelp

# Makeman command
MAKEMAN = srcdir="$(srcdir)" cpp="$(CPP)" $(SHELL) $(srcdir)/makeman \
-D__MAN_VERSION__="\"$(DDD) $(VERSION)\"" -D__MAN_TITLE__="\"$(DDD) Tools\""

# Get-node command
GET_NODE = $(SHELL) $(srcdir)/get-node

## More compilation settings.
# C++ binding flags. For binary distribution only.
CXXSTATIC_BINDING = @CXXSTATIC_BINDING@
CXXDYNAMIC_BINDING = @CXXDYNAMIC_BINDING@
CXXBINDING = 

## C++ compile commands.
COMPILE.cc = $(CXX) $(CPPFLAGS) $(DEFS) $(CXXFLAGS) $(CXXSTUFF) -c
LINK.cc = $(CXX) $(CXXBINDING) $(LDFLAGS)

## C compile commands.
COMPILE.c = $(CC) $(CPPFLAGS) $(DEFS) $(CFLAGS) -c
LINK.c = $(CC) $(LDFLAGS)

## Pascal compile commands.
COMPILE.p = $(PC) $(CPPFLAGS) $(DEFS) $(PFLAGS) -c
LINK.p = $(PC)

## Modula-2 compile commands.
COMPILE.m2 = $(M2C) $(M2FLAGS)
LINK.m2 = $(M2C)

## YACC commands.
YY = yy
YACCTOCPLUS = $(SHELL) $(srcdir)/yacctoC -prefix $(YY) \
	&& $(RM) y.tab.c y.tab.h
YACC.Y = $(YACC) $(YFLAGS)

## LEX commands.
LEXTOCPLUS = $(SHELL) $(srcdir)/lextoC -prefix $(YY) && $(RM) lex.yy.c
LEX.L = $(LEX) $(LFLAGS)

## Where to look for X include files.
X_INCLUDE = @X_CFLAGS@

## Where to look for include files.
INCLUDE = -I. -I$(srcdir) -I$(srcdir)/.. -I$(srcdir)/../include $(X_INCLUDE)

## Implicit rules.
.SUFFIXES: .C .cc .c .mod .p .Y .YY .L .ddd .txt
.C.o:
	$(COMPILE.cc) $(INCLUDE) -o $@ $<
.cc.o:
	$(COMPILE.cc) $(INCLUDE) -o $@ $<
.c.o:
	$(COMPILE.c) $(INCLUDE) -o $@ $<
.p.o:
	$(COMPILE.p) -o $@ $<
.Y:
	$(YACC.Y) $<
	$(YACCTOCPLUS)
	$(LINK.cc) -o $@ y.tab.C $(LDLIBS)
	$(RM) y.tab.C y.tab.H
.Y.C:
	$(YACC) $(YFLAGS) $<
	$(YACCTOCPLUS)
	$(MV) y.tab.C $@
	$(RM) y.tab.H
.Y.h:
	$(YACC) -d $(YFLAGS) $<
	$(YACCTOCPLUS)
	$(MV) y.tab.H $@
	$(RM) y.tab.C
.Y.o:
	$(YACC) $(YFLAGS) $<
	$(YACCTOCPLUS)
	$(COMPILE.cc) y.tab.C
	$(RM) y.tab.C y.tab.H
.Y.YY:
	$(YACC) -v $(YFLAGS) $<
	$(MV) y.output $@
	$(RM) y.tab.c
.L:
	$(LEX.L) $<
	$(LEXTOCPLUS)
	$(LINK.cc) -o $@ lex.yy.C $(LDLIBS)
	$(RM) lex.yy.C
.L.C:
	$(LEX.L) $<
	$(LEXTOCPLUS)
	$(MV) lex.yy.C $@
.L.o:
	$(LEX.L) $<
	$(LEXTOCPLUS)
	$(COMPILE.cc) -o $@ lex.yy.C
	$(RM) lex.yy.C

## Script rules
.txt.C:
	( \
	$(ECHO) '// $@ -- generated automatically from `$<'"'."; \
	$(SED) '/^ *#/d' $< | \
	$(SED) 's/^ *include \([^"][^.]*\)\..*$$/#include "\1.C"/' | \
	$(SED) 's/^ *include "\([^"][^.]*\)[^"]*"/#include "\1.C"/' | \
	$(SED) '/^[^#]/s/\(["'"'"'\\]\)/\\\1/g' | \
	$(SED) '/^[^#]/s/.*/"&\\n"/' | \
	$(SED) 's//\\b/' | \
	$(SED) 's/^$$/"\\n"/' \
	) > tmp.C; \
	$(CPP) -C -P -undef $(CPPFLAGS) $(DEFS) $(INCLUDE) tmp.C > $@; \
	$(RM) tmp.C



## Libraries and object files
# General-purpose utilities: strings, regexps, run-type type info...
BASE_OBJECTS = \
	compare.o    \
	cook.o       \
	glob.o       \
	hash.o       \
	regex.o      \
	sigName.o    \
	strclass.o   \
	SignalB.o    \
	TypeInfo.o   \
	UniqueId.o   \
	MemCheck.o   \
	Range.o

# Instantiated `DynArray' and `VarArray' templates
ARRAY_OBJECTS = \
	StringA.o    \
	IntArray.o   \
	VoidArray.o

# Interprocess communication
# Top-level class is `Agent', declared in `Agent.h'
AGENT_OBJECTS = \
	Agent.o      \
	AgentM.o     \
	AsyncAgent.o \
	ChunkQueue.o \
	DataLength.o \
	HandlerL.o   \
	LiterateA.o  \
	TTYAgent.o

# Miscellaneous utilities for X programs: Motif strings, hourglasses,
# context-sensitive help...
XSTUFF_OBJECTS = \
	converters.o \
	database.o   \
	events.o     \
	findParent.o \
	fileSBF.o    \
	longName.o   \
	verify.o     \
	Delay.o      \
	DestroyCB.o  \
	ExitCB.o     \
	HelpCB.o     \
	MString.o    \
	MakeMenu.o

# Box library - rectangular composible graphical items
# Top-level class is `Box', declared in `Box.h'
BOX_OBJECTS = \
	printBox.o   \
	AlignBox.o   \
	ArcBox.o     \
	BinBox.o     \
	Box.o        \
	BoxD.o       \
	BoxExtend.o  \
	BoxPoint.o   \
	BoxRegion.o  \
	BoxSize.o    \
	CompositeB.o \
	DiagBox.o    \
	DummyBox.o   \
	FixBox.o     \
	FontFixBox.o \
	FontTable.o  \
	HatBox.o     \
	LineBox.o    \
	ListBox.o    \
	MarkBox.o    \
	MatchBox.o   \
	PrimitiveB.o \
	SlopeBox.o   \
	StringBox.o  \
	THatBox.o    \
	TagBox.o     \
	TrueBox.o

# VSL library - building boxes from structured data
# Top-level class is `VSLLib', declared in `VSLLib.h'
VSL_OBJECTS = \
	ArgNode.o    \
	BuiltinCN.o  \
	CallNode.o   \
	ConstNode.o  \
	DefCallN.o   \
	DummyNode.o  \
	LetNode.o    \
	NameNode.o   \
	ListNode.o   \
	TestNode.o   \
	TrueNode.o   \
	VSEFlags.o   \
	VSLBuiltin.o \
	VSLDef.o     \
	VSLDefList.o \
        VSLErr.o     \
	VSLLib.o     \
	VSLNode.o    \
        VSLRead.o

# Graph structure, graph layout and graph editor widget
# Top-level classes are `Graph', declared in `Graph.h'
# and the `GraphEdit' widget, deckared in `GraphEdit.h'.
GRAPH_OBJECTS = \
	layout.o     \
	BoxGraphN.o  \
	Graph.o      \
	GraphEdge.o  \
	GraphEdit.o  \
	GraphGC.o    \
	GraphNode.o  \
	HintGraphN.o \
	LineGraphE.o \
	PannedGE.o   \
	PosGraphN.o  \
	RegionGN.o   \
	ScrolledGE.o

# All these objects were originally part of the NORA library and are now
# maintained as part of DDD.
NORA_OBJECTS = \
	$(BASE_OBJECTS)   \
	$(ARRAY_OBJECTS)  \
	$(AGENT_OBJECTS)  \
	$(XSTUFF_OBJECTS) \
	$(BOX_OBJECTS)    \
	$(VSL_OBJECTS)    \
	$(GRAPH_OBJECTS)

# The DDD application itself.  `ddd.C' is the main program, `SourceView.C'
# is the source window, `DataDisp.C' is the data window.
DDD_OBJECTS = \
	configinfo.o \
	comm-manag.o \
	disp-read.o  \
	filetype.o   \
	hostname.o   \
	mydialogs.o  \
	string-fun.o \
	strings.o    \
	value-read.o \
	xconfig.o    \
	ArgField.o   \
	BreakPoint.o \
	DataDisp.o   \
	DispBox.o    \
	DispBuffer.o \
	DispGraph.o  \
	DispNode.o   \
	DispValue.o  \
	GDBAgent.o   \
	PosBuffer.o  \
	SourceView.o

## All objects.
OBJECTS = $(NORA_OBJECTS) $(DDD_OBJECTS)

## The program files.
PROGS = ddd

## Extra demonstration files.
DEMOS = cxxtest ctest test-graph ttytest bug ptest m2test

## Where to find texinfo files and so
MAKEINFO_FLAGS = \
	-I. -I$(srcdir) -I$(srcdir)/../readline/doc -I$(srcdir)/../texinfo

## The index files
IDXS = *.cp *.fn *.ky *.pg *.tp *.vr

## The dvi files.
# DVIS = $(srcdir)/ddd.dvi $(srcdir)/dddint.dvi
DVIS =

## The postscript files.
# PSS = $(srcdir)/ddd.ps $(srcdir)/dddint.ps
PSS =

## The HTML files.
# HTML_BASES = ddd_toc.html dddint_toc.html
# HTML_PATTERNS = $(srcdir)/ddd_*.html $(srcdir)/dddint_*.html
# HTMLS = $(HTML_BASES) $(HTML_PATTERNS)
HRTMLS = 

## The manual page.
MANS = $(srcdir)/ddd.man

## Readme files built from ddd.texinfo
README_FILES = 


## Intermediate files

# Files required for building DDD
PROG_STUFF       = config.h vsl-lex.C vsl-gramma.h vsl-gramma.C \
	 	   config.h.in acconfig.h acspecial.h stamp-h.in \
		   ddd.vsl.h version.h host.h configinfo.C \
		   Ddd.ad.h ddd.man.C xlibdir.C eps-code.h

# Extra files to be built for the distribution
DIST_STUFF	 = $(PROG_STUFF) $(MANS) depend TAGS \
		   $(srcdir)/../doc/ddd.man.ps

# Temporary Files to be cleaned, keeping configuration intact
CLEAN_STUFF	 = $(PROGS) $(DEMOS) core *.o *.a *.s *.i \
		   tmp* *.tmp .*hist* *.syms \
		   *.aux *.cp *.cps *.fn *.fns *.flc \
		   *.ky *.kys *.log *.pg *.pgs *.toc *.tp *.tps *.vr *.vrs \
		   *.tar *.tar.gz *~ lex.* y.tab.* site.* *.sum \
		   *.diff rcssync *.private

# Files to be deleted from distribution
DISTCLEAN_STUFF	 = $(CLEAN_STUFF) ddd.man.ps \
		   config.status config.h host.h paths.h \
		   Makefile MakeOut LOG OOBR OOBR-FTR \
		   config.log config.cache configinfo.C stamp-h \
		   Ddd Ddd.ad.h ddd.man vr.h

# Any files that can be reconstructed, except configure script
REALCLEAN_STUFF	 = $(DISTCLEAN_STUFF) $(DIST_STUFF)

# All files that can be reconstructed (but may require special programs)
ULTRACLEAN_STUFF = $(REALCLEAN_STUFF) \
		   config.h.in stamp-h.in configure Makedeps \
		   $(MANS) $(README_FILES) $(HTMLS)


## Targets as specified in GNU standards.
.PHONY: all
all:	$(PROG_STUFF) $(PROGS)

.PHONY: install
install: install-prog install-man

.PHONY: uninstall
uninstall: uninstall-prog uninstall-man

# install-prog does not depend on $(PROGS) 
# since we may have precompiled packages
.PHONY: install-prog
install-prog:
	for p in $(PROGS); do \
	    $(INSTALL_PROGRAM) \
		$$p $(bindir)/`$(ECHO) $$p | $(SED) '$(transform)'`; \
	done

.PHONY: uninstall-prog
uninstall-prog:
	for p in $(PROGS); do \
	    $(RM) $(bindir)/`$(ECHO) $$p | $(SED) '$(transform)'`; \
	done

.PHONY: install-info
install-info: $(INFO_BASES)
	-parent=`$(ECHO) $(infodir) | $(SED) -e 's@/[^/]*$$@@'`; \
	test -d $$parent || $(MKDIR) $$parent
	-test -d $(infodir) || $(MKDIR) $(infodir)
	for i in $(INFOS); do \
	    test -f $$i && $(INSTALL_DATA) $$i $(infodir); \
	done

.PHONY: uninstall-info
uninstall-info:
	cd $(infodir); $(RM) $(INFOS)

.PHONY: install-man
install-man: ddd.man
	-parent=`$(ECHO) $(man1dir) | $(SED) -e 's@/[^/]*$$@@'`; \
	test -d $$parent || $(MKDIR) $$parent
	-test -d $(man1dir) || $(MKDIR) $(man1dir)
	$(INSTALL_DATA) $? \
		$(man1dir)/`$(ECHO) ddd$(man1ext) | $(SED) '$(transform)'`

.PHONY: uninstall-man
uninstall-man:
	$(RM) $(man1dir)/`$(ECHO) ddd$(man1ext) | $(SED) '$(transform)'`

.PHONY: clean
clean:
	$(RM) $(CLEAN_STUFF) ./#*#

.PHONY: distclean
distclean:
	$(RM) $(DISTCLEAN_STUFF) ./#*#

.PHONY: mostlyclean
mostlyclean: clean

.PHONY: realclean
realclean:
	$(RM) $(REALCLEAN_STUFF) ./#*#

.PHONY: ultraclean
ultraclean:
	$(RM) $(ULTRACLEAN_STUFF) ./#*#

.PHONY: TAGS
TAGS:

.PHONY: info
info:	$(INFO_BASES)

.PHONY: dvi
dvi:	$(DVIS)

.PHONY: ps
ps:	$(PSS)

.PHONY: man
man:	$(MANS)

.PHONY: postscript
postscript: $(PSS)

.PHONY: html
html:	$(HTML_BASES)

.PHONY: lib
lib:	$(LIB)

.PHONY: readme
readme:	$(README_FILES)

.PHONY: diststuff
diststuff: $(DIST_STUFF)

.PHONY: dist
dist:	
	@$(ECHO) see the top-level directory for making dist files.
	@false

.PHONY: strip
strip:	$(PROGS)
	$(STRIP) $(PROGS)

.PHONY: progs programs
progs:	$(PROGS)
programs: $(PROGS)

.PHONY: demos
demos:	$(DEMOS)

## A TECO-ism

.PHONY: love
love:
	@$(ECHO) 'not war?'

## The resource header files.

Ddd.ad.h: Ddd
	$(AD2C) $? > Ddd.ad.h

# `make depend' fails to find this dependency :-(
strings.o: Ddd.ad.h


## The VSL header files.

VSL_CPP = $(CPP) -P -I$(srcdir)/../vsllib -I$(prefix)/lib/vsl-include
ddd.vsl.h: ddd.vsl
	$(CAT) $(srcdir)/ddd.vsl > tmp.c
	$(VSL_CPP) tmp.c | $(VSL2C) > ddd.vsl.h
	$(RM) tmp.c

# `make depend' fails to find this dependency :-(
DataDisp.o: ddd.vsl.h

## The programs.

ddd:	ddd.o $(OBJECTS)
	$(LINK.cc) -o $@ ddd.o $(OBJECTS) $(ALL_X_LIBS) $(LIBS)


## The demonstration programs.

test-graph: test-graph.o $(NORA_OBJECTS) 
	$(LINK.cc) -o $@ test-graph.o $(NORA_OBJECTS) $(ALL_X_LIBS) $(LIBS)

ttytest: ttytest.o $(BASE_OBJECTS) $(AGENT_OBJECTS)
	$(LINK.cc) -o $@ ttytest.o $(BASE_OBJECTS) $(AGENT_OBJECTS) \
	$(ALL_X_LIBS) $(LIBS)

bug:	bug.o
	$(LINK.cc) -o $@ bug.o $(NORA_OBJECTS) $(ALL_X_LIBS) $(LIBS)

cxxtest: cxxtest.o
	$(LINK.cc) -o $@ cxxtest.o

ctest:  ctest.o
	$(LINK.c) -o $@ ctest.o

ptest:  ptest.o
	$(LINK.p) -o $@ ptest.o

m2test: m2test.mod
	$(COMPILE.m2) -o $@ -e $@ m2test.mod

# We don't want no optimizing in our test files
bug.o:	$(srcdir)/bug.C
	@if test -n "$(CXXOPT)"; then \
	$(MAKE) CXXOPT= $@; \
	else \
	set -x; $(COMPILE.cc) $(INCLUDE) -o $@ $(srcdir)/bug.C; \
	fi

cxxtest.o: $(srcdir)/cxxtest.C
	@if test -n "$(CXXOPT)"; then \
	$(MAKE) CXXOPT= $@; \
	else \
	set -x; $(COMPILE.cc) $(INCLUDE) -o $@ $(srcdir)/cxxtest.C; \
	fi

ctest.o: $(srcdir)/ctest.c


## For demonstration and debugging purposes
check:	Ddd ddd cxxtest
	XAPPLRESDIR=. ./ddd cxxtest
	


## Lex and Yacc stuff.

# VSL parsers
vsl-lex.C: vsl-lex.L
vsl-gramma.h: vsl-lex.L
vsl-gramma.C: vsl-gramma.Y

# `make depend' fails to find this dependency :-(
VSLRead.o: vsl-lex.C vsl-gramma.h vsl-gramma.C


## The manual page
$(srcdir)/../doc/ddd.man.ps: $(srcdir)/ddd.man
	$(GROFF) -man $(srcdir)/ddd.man > $@


## Configuration stuff.

Makefile: Makefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

Ddd: Ddd.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

$(srcdir)/configure: $(srcdir)/configure.in $(srcdir)/aclocal.m4
	cd $(srcdir) && $(AUTOCONF)
config.status: ./configure
	-$(SHELL) ./config.status --recheck || $(SHELL) ./configure -v

.PRECIOUS: Makefile configure config.status config.h Ddd

# autoheader might not change config.h.in
$(srcdir)/config.h.in: stamp-h.in
$(srcdir)/stamp-h.in: \
	$(srcdir)/configure.in \
	$(srcdir)/aclocal.m4 \
	$(srcdir)/acconfig.h
	cd $(srcdir) && $(AUTOHEADER)
	$(DATE) > $@

$(srcdir)/acconfig.h: $(srcdir)/acconfig.h.in $(srcdir)/acspecial.h
	$(M4) $(srcdir)/acconfig.h.in > $@

$(srcdir)/acspecial.h: $(srcdir)/configure.in
	$(GREP) '^ICE_[a-zA-Z0-9_]* *(' $(srcdir)/configure.in > $@
	

# config.status might not change config.h
config.h: stamp-h
stamp-h: config.h.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h ./config.status
	$(DATE) > $@


# We use configure to create `version.h'.
# To make sure these are not touched upon every invocation,
# we create temporary vr.* files instead and touch the version.* files
# only if the vr.* files changed.
version.h: vr.h
	@$(CMP) vr.h version.h || $(CAT) vr.h > version.h
vr.h: vr.h.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

## The manual page
ddd.man: ddd.man.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

# ddd.man.txt does NOT depend on ddd.man since we don't want it to get
# re-created after each configuration.
ddd.man.txt: ddd.man.in configure.in
	$(MAKE) ddd.man
	$(NROFF) -man ddd.man > $@

ddd.man.C: ddd.man.txt

# `make depend' fails to find this dependency :-(
strings.o: ddd.man.C


## The xlibdir script
xlibdir.C: xlibdir.txt

# `make depend' fails to find this dependency :-(
xconfig.o: xlibdir.C


## The host type
host.h: $(srcdir)/host.h.in config.status
	$(CAT) $(srcdir)/host.h.in | \
	$(SED) "s%@HOST_CANONICAL@%$(host_canonical)%" | \
	$(SED) "s%@TARGET_CANONICAL@%$(target_canonical)%" > $@

## Statistics.
# Count lines of C++/lex/yacc source code.
# Lines containing only comments or documentation and empty lines are ignored.

.PHONY: loc stats
loc stats:
	cd $(srcdir); \
	for list in '$(NORA_OBJECTS)' '$(DDD_OBJECTS)' '$(OBJECTS)'; do \
	pattern=`$(ECHO) $$list | $(SED) 's/\([a-zA-Z0-9_]*\)\.o/\1\\.*/g'`; \
	$(ECHO) "Lines of code for $$pattern"; \
	$(CAT) `$(LS) $$pattern | grep '\.[ChLY]'` | \
		$(GREP) -v '^[ 	]*//' | \
		$(GREP) -v '^"' | \
		$(GREP) -v '^[ 	]*$$' | wc -l; \
	done


## EPS code stuff.

header.str:     header.ps
		sed 's/^.*$$/"&\\n"/' header.ps > header.str

trailer.str:    trailer.ps
		sed 's/^.*$$/"&\\n"/' trailer.ps > trailer.str

eps-code.h:     header.str trailer.str eps-code.x
		sed -e '/prolog/r header.str' \
		    -e '/trailer/r trailer.str' \
		    eps-code.x > eps-code.h

## Configuration info stuff
configinfo.C:   config-info Makefile config.h
		$(SHELL) $(srcdir)/config-info > $@

configinfo.o:	configinfo.C configinfo.h


## Make dependency stuff.

.PHONY: depend
depend: $(PROG_STUFF)

.PRECIOUS: Makedeps
Makedeps depend:
	cd $(srcdir); \
	( \
	$(ECHO) \#' DO NOT EDIT -- generated automagically by make depend'; \
	$(ECHO) \#' Source: $$Id$$'; \
	$(ECHO) ; \
	$(CXX) -M $(CPPFLAGS) $(DEFS) $(INCLUDE) *.C | \
	$(SED) 's% /[^ ]*%%g' | $(SED) 's% \./% %g' | $(GREP) -v '^ *\\$$' | \
	$(SED) 's%^ *$$%& config.h%g' ) > Makedeps~
	$(MV) Makedeps~ Makedeps

## If your `make' cannot handle the following line,
## just replace it by the contents of `@srcdir@/Makedeps'.
include @srcdir@/Makedeps
