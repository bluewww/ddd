! $Id$
! DDD Resource File
! @configure_input@
Ddd*appDefaultsVersion:  @VERSION@

! Copyright (C) 1995 Technische Universitaet Braunschweig, Germany.
! Written by Andreas Zeller (zeller@ips.cs.tu-bs.de).
! 
! This file is part of DDD.
! 
! DDD is free software; you can redistribute it and/or
! modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! DDD is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
! See the GNU General Public License for more details.
! 
! You should have received a copy of the GNU General Public
! License along with DDD -- see the file COPYING.
! If not, write to the Free Software Foundation, Inc.,
! 675 Mass Ave, Cambridge, MA 02139, USA.
! 
! DDD is the GDB-based data display debugger.
! Contact ddd@ips.cs.tu-bs.de for details.

! =================================================================
! NOTE: If you're looking here for things to customize, look
! under the DDD `Options' menu first.  Many things are customizable
! from there.  Things which are settable via the Options dialog
! are stored in the ~/.dddinit file.
! =================================================================
!
! This file lists the default resources built into DDD.  You can use the
! stuff in this file for examples of how to customize DDD for your
! environment; normally you will do this by copying the few lines you
! want to alter to your private resource database, which usually lives
! in a file called `.Xdefaults' in your home directory.  You may also 
! place such lines in the DDD-specific `.dddinit' file in your home
! directory.
! 
! Site administrators **may** want to make changes here and install this
! file as the global app-defaults file for the site.  To do this, one
! would copy this file to `/usr/lib/X11/app-defaults/Ddd', or on SunOS,
! `/usr/openwin/lib/app-defaults/Ddd'.  (Actually this directory could
! be anywhere; only the person who installed X knows for sure.)
! 
! It is **STRONGLY RECOMMENDED** that you not install this file in the
! `app-defaults' directory unless you are really sure you know what you
! are doing.  There are a whole slew of version-skew problems associated
! with app-defaults files, which are best avoided by simply not using
! them.  In particular, if the app-defaults file for a program is
! installed, and you get a new version of that program, you can't
! properly test out the new version without actually installing it,
! since it will pick up the resources for the previous version, and will
! quite likely malfunction.
! 
! In short, app-defaults files are bad.  Don't use them.  Use this file
! for informational purposes as suggested above.

!-----------------------------------------------------------------------------
! User-settable resources
!-----------------------------------------------------------------------------

! The debugger type (dbx or gdb, defaults to gdb)
Ddd*debugger:


! The name under which gdb is to be invoked (default: debugger type)
Ddd*debuggerCommand:


! True if data is to be displayed in a separate top-level window.
! If this is false, the window is attached to the DDD command window.
Ddd*separateDataWindow: true


! True if source is to be displayed in a separate top-level window.
! If this is false, the window is attached to the DDD command window.
Ddd*separateSourceWindow: true


! True if programs are to be run in a separate top-level window.
! If this is false, input/output is sent to the DDD command window.
Ddd*separateExecWindow: false


! True if DDD windows are to be iconified/deiconified as a whole.
! If this is false, every DDD window can be iconified on its own.
Ddd*groupIconify: false


! True if the TAB key is to complete text in all DDD windows.
! If this is false, the TAB key completes in the DDD command window only.
Ddd*globalTabCompletion: true


! True if options are to be saved in ~/.dddinit across DDD invocations.
Ddd*saveOptionsOnExit: false


! The command to invoke a separate tty for showing I/O of the debugged
! program.  Bourne shell commands to run in the separate tty are appended
! to this string.
Ddd*termCommand: xterm \
-bg 'grey90' \
-fn '-*-lucidatypewriter-medium-r-*-*-12-*' \
-title '@DDD@: Execution Window' -e /bin/sh -c


! The terminal type provided by `termCommand' (that is, the value of
! the TERM environment variable to be passed to the debugged program)
Ddd*termType: xterm


! The `useTTYCommand' resource sets the redirection mode for separate TTYs.
! Basically, there are two ways to redirect process I/O.  Both have
! advantages and disadvantages.
!
! * GDB provides a `tty' command to redirect I/O to a separate tty TTY.
!   This is portable, but on some systems, there is the nasty side-effect
!   that redirection can not be undone.
!   Set `useTTYCommand' to `true' to enable this behaviour.
! 
! * As an alternative, DDD can redirect the process I/O explicitly,
!   without using the `tty' command.  This may fail if you use a
!   non-standard shell.
!   Set `useTTYCommand' to `false' to enable this behaviour.
!   
! The default setting is `true', since tampering around with user commands
! is too risky.  Maybe one day GDB will provide a way to undo redirection.
Ddd*useTTYCommand: true


! The `rsh' command to invoke tty-based commands on other hosts.
! On some systems, this is called `remsh'; on others, `on'.
! You may want to consult your system documentation for details.
Ddd*rshCommand: @RSH@


! The `print' command to print a postscript file.
! On some systems, this is called `lp'; on others, `lpr'.
! You may want to consult your system documentation for details.
Ddd*printCommand: @PRINT_COMMAND@


! The `edit' command to invoke an editor on the specific file.
! `@LINE@' is replaced by the current line number,
! `@FILE@' by the file name.  Default is to invoke $XEDITOR first,
! then EMACS variations, then $EDITOR, then VI.
Ddd*editCommand: \
${XEDITOR-false} +@LINE@ @FILE@ \
|| gnuclient +@LINE@ @FILE@ \
|| emacsclient +@LINE@ @FILE@ \
|| xterm -e ${EDITOR-vi} +@LINE@ @FILE@


! Commands to list all executable/source/core/directory
! files matching @MASK@.
! These commands are executed on remote hosts only.
Ddd*listExecCommand:   \
	file @MASK@ | grep '.*:.*exec.*' | grep -v  '.*:.*script.*' \
	| cut -d: -f1 | grep -v '.*\\.o$'
Ddd*listSourceCommand: \
	file @MASK@ | grep '.*:.*text.*' | cut -d: -f1
Ddd*listCoreCommand:   \
	file @MASK@ | grep '.*:.*core.*' | cut -d: -f1
Ddd*listDirCommand:   \
	file @MASK@ | grep '.*:.*directory.*' | cut -d: -f1


! The time (in seconds) to wait for synchonous GDB questions to complete
Ddd*questionTimeout: 5


! Colon-separated lists of GDB commands for which buttons are to be created.
!
! All buttons send the named command to GDB.
! Commands ending with '...' insert their name, followed by a space.
! Commands ending with a control character insert the given
! control character.
!
! The following button names have special meanings:
! - `Clear'    : Clear current command
! - `Prev'     : Show previous command
! - `Next'     : Show next command
! - `Apply'    : Send the given command to GDB
! - `Back'     : Lookup previously selected source position
! - `Forward'  : Lookup next selected source position
! - `Edit'     : Edit current source file
! - `Reload'   : Reload source file
! - `Complete' : Complete current command
! - `Yes'      : Answer current GDB prompt
! - `No'       : Answer current GDB prompt

! The buttons under the GDB command window.
! *commandButtons: \
! 	Yes:No:run:Clear:Prev:Next:Apply:interrupt^C
Ddd*commandButtons: \
	Yes:No:interrupt^C

! The buttons under the source window.
Ddd*sourceButtons:   	    \
run:step:next:cont:finish:kill:up:down:Back:Forward:Edit:Reload:interrupt^C

! Some special labels
Ddd*run.labelString:       Run
Ddd*step.labelString:      Step
Ddd*next.labelString:      Next
Ddd*cont.labelString:      Continue
Ddd*interrupt.labelString: Interrupt
Ddd*kill.labelString:      Kill
Ddd*until.labelString:     Until
Ddd*finish.labelString:    Finish
Ddd*up.labelString:        Up
Ddd*down.labelString:      Down

! The maximum number of characters allowed in a data display.
! Components of longer names are replaced by `..', for instance
! `foo->bar->blue' becomes `foo->..->blue'
Ddd*maxNameLength: 	20


! Number of colons used for the code line number display.
! Should be a multiple of 8, to avoid confusion with TAB characters.
Ddd*indentAmount: 	8


! The GDB initialization commands.  DDD depends on these settings,
! so don't change them unless required by your GDB version.
! Use a personal `~/.gdbinit' file instead to customize GDB.
Ddd*gdbInitCommands:	\
set height 0\n\
set width 0\n\
set print pretty\n\
set print repeats 0\n\
set verbose off\n\
set prompt (gdb) \n


! The DBX initialization commands.  Nothing special yet.
! Use a personal `~/.dbxinit' file instead to customize DBX.
Ddd*dbxInitCommands:


! The VSL library for displaying graph nodes.  `builtin' means the VSL
! library compiled into DDD, named `ddd.vsl'.  If you wish to use
! another VSL library, put its name here and set `vslPath' to a
! colon-separated list of directories where the VSL file and its
! includes can be found.
Ddd*vslLibrary: 		builtin
Ddd*vslPath:	 		.


! Graph Editor Defaults
! What shall we use if the graph gets too large to be displayed?
! If true, an Athena panner is used (a kind of two-directional scrollbar).
! If false, two Motif scrollbars are used.
!
! Although a panned graph editor is much more comfortable, we set-up Motif
! scrollbars as a default: Many OSF/Motif installations choke
! on intermixed Motif/Athena applications and we don't want to get bug
! reports that should be directed to OSF.
Ddd*pannedGraphEditor: 		false

! Nodes are moved when dragged more than 4 pixels.
Ddd*graph_edit.moveDelta:	4

! The selection tile pixmap.  Usual choices are Motif built-in pixmaps.
! If this resource is left unspecified, nodes are simply inverted.
! *graph_edit.selectTile: 	25_foreground

! Do we wish opaque movement? (doesn't work yet)
Ddd*graph_edit.opaqueMove: 	false

! Do we wish a grid?
Ddd*graph_edit.showGrid: 	true

! Do we wish to snap the position to the grid?
Ddd*graph_edit.snapToGrid: 	false

! Do we wish to show edge hints?
Ddd*graph_edit.showEdgeHints: 	true

! What kind of layout do we wish? (regular, compact)
Ddd*graph_edit.layoutMode: 	regular

! Do we wish to re-layout the graph after each change?
Ddd*graph_edit.autoLayout: 	false

! Width and height of the grid
Ddd*graph_edit.gridWidth: 	16
Ddd*graph_edit.gridHeight: 	16


! Source defaults
! Do we wish to find complete words only?
Ddd*findWordsOnly: 		true

! Do we wish to cache source files in memory?
Ddd*cacheSourceFiles:		true


! Focus policy
! POINTER means point-and-type, EXPLICIT means click-and-type.
! Rather than accepting the user's default, we use POINTER here because:
! 1. Using EXPLICIT focus policy works bad with a panned graph editor,
!    since Motif has trouble with assigning focus to Athena Widgets.
! 2. Several users use DDD in a non-Motif environment, where the click-to-type
!    methaphor is inappropriate.
! 3. DDD users usually are wither novices or experienced programmers,
!    who are often confused and/or embarrassed by explicit focus.
! Users unsatisfied with this setting can change it at run-time.
Ddd*keyboardFocusPolicy:	POINTER

! X Warnings
! Do we wish to suppress X warnings?
Ddd*suppressWarnings:		false


!-----------------------------------------------------------------------------
! Fonts
!-----------------------------------------------------------------------------

! Font definitions.  @<font> is used to switch between fonts.
! @charset is the default font.
! @tt is the fixed-width font used in texts
! @key is the font used for keys
! @rm, @sl, @bf, @bs are some fonts for usual highlighting.
! @Logo and @logo are used in the DDD logo.
Ddd*fontList: \
-*-helvetica-bold-r-*-*-12-*=charset,\
-*-lucidatypewriter-medium-r-*-*-12-*=tt,\
-*-helvetica-bold-r-*-*-12-*=key,\
-*-helvetica-medium-r-*-*-12-*=rm,\
-*-helvetica-medium-o-*-*-12-*=sl,\
-*-helvetica-bold-r-*-*-12-*=bf,\
-*-helvetica-bold-o-*-*-12-*=bs,\
-*-helvetica-bold-r-*-*-18-*=Logo,\
-*-helvetica-bold-r-*-*-12-*=logo,\
-*-symbol-*-*-*-12-*=symbol

! Fixed-width fonts.  `lucidatypewriter' is the font the DDD developers
! prefer; another popular choice is `courier'.  Note that the fonts used in
! displays are specified in the VSL file.
Ddd*XmTextField.FontList: -*-lucidatypewriter-medium-r-*-*-12-*
Ddd*XmText.FontList:      -*-lucidatypewriter-medium-r-*-*-12-*


!-----------------------------------------------------------------------------
! Colors
!-----------------------------------------------------------------------------

Ddd*foreground:                    black
Ddd*background:                    grey
Ddd*XmText.background:             grey90
Ddd*XmTextField.background:        grey90
Ddd*GraphEdit.background:          grey90
Ddd*XmList.background:             grey90
Ddd*graph_edit_panner.background:  grey
Ddd*graph_edit_panner.foreground:  grey
Ddd*graph_edit_panner.shadowColor: black

! The famous red and green buttons.
Ddd*interrupt.foreground:          red4
Ddd*run.foreground:                dark green

! Highlight special dialogs
Ddd*internal_error*foreground: 	   red4
Ddd*terminated_dialog*foreground:  red4
Ddd*debugging_poem*foreground: 	   dark green

! Here are the resources to set data display colors.
Ddd*graph_edit.nodeColor:          black
Ddd*graph_edit.edgeColor:          grey50
Ddd*graph_edit.selectColor:        black
Ddd*graph_edit.gridColor:          black
Ddd*graph_edit.frameColor:         grey50



!-----------------------------------------------------------------------------
! Translations
!-----------------------------------------------------------------------------


! The GDB window uses an EMACS-like editing style.
! `R7' and `R13' are generated by the developer's SUNs for `Home' and `End'
Ddd*gdb_w*translations: #override \
Ctrl<Key>A:		gdb-beginning-of-line()     \n\
Ctrl<Key>B:     	gdb-backward-character()    \n\
Ctrl<Key>C:		gdb-control(^C)             \n\
Ctrl<Key>D:		gdb-delete-or-control(^D)   \n\
Ctrl<Key>E:		gdb-end-of-line()           \n\
Ctrl<Key>F:     	gdb-forward-character()     \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-command()      \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>N:		gdb-next-history()          \n\
Ctrl<Key>P:		gdb-previous-history()      \n\
Ctrl<Key>U:     	gdb-set-line("")            \n\
Ctrl<Key>V:     	next-page()                 \n\
Meta<Key>V:     	previous-page()             \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>osfUp:		gdb-previous-history()      \n\
None<Key>osfDown:	gdb-next-history()          \n\
None<Key>osfLeft:	gdb-backward-character()    \n\
None<Key>osfRight:	gdb-forward-character()     \n\
None<Key>osfBeginLine:	gdb-beginning-of-line()     \n\
None<Key>osfEndLine:	gdb-end-of-line()           \n\
None<Key>osfBeginData:	gdb-beginning-of-line()     \n\
None<Key>osfEndData:	gdb-end-of-line()           \n\
None<Key>Home:		gdb-beginning-of-line()     \n\
None<Key>End:		gdb-end-of-line()           \n\
None<Key>R7:		gdb-beginning-of-line()     \n\
None<Key>R13:		gdb-end-of-line()           \n\
None<Key>Tab:		gdb-complete-command()      \n\
None<Key>Escape:	gdb-complete-command()      \n


! Have some of these in argument fields as well
Ddd*XmTextField*translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(print)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(print)     \n\
None<Key>Escape:	gdb-complete-arg(print)     \n


! Have some of these in breakpoint and display dialogs
! (with different completion)
Ddd*new_breakpoint_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(break)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(break)     \n\
None<Key>Escape:	gdb-complete-arg(break)     \n

Ddd*edit_breakpoint_condition_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(print)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(print)     \n\
None<Key>Escape:	gdb-complete-arg(print)     \n

Ddd*edit_breakpoint_ignore_count_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	beep()                      \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n

Ddd*new_breakpoint_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(break)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(break)     \n\
None<Key>Escape:	gdb-complete-arg(break)     \n

Ddd*new_display_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(print)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(print)     \n\
None<Key>Escape:	gdb-complete-arg(print)     \n

Ddd*dependent_display_dialog*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(print)     \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(print)     \n\
None<Key>Escape:	gdb-complete-arg(print)     \n


! Have some of these in file dialogs (with different completion)
Ddd*exec_files_popup*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(file)      \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(file)      \n\
None<Key>Escape:	gdb-complete-arg(file)      \n

Ddd*core_files_popup*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(core-file) \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(core-file) \n\
None<Key>Escape:	gdb-complete-arg(core-file) \n

Ddd*source_files_popup*XmText.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(file)      \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
Ctrl<Key>Y:     	unkill()                    \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(file)      \n\
None<Key>Escape:	gdb-complete-arg(file)      \n

Ddd*print_popup*XmTextField.translations: #override \
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>D:     	delete-next-character()     \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>H:     	delete-previous-character() \n\
Ctrl<Key>I:     	gdb-complete-arg(file)      \n\
Ctrl<Key>K:     	delete-to-end-of-line()     \n\
Ctrl<Key>U:     	beginning-of-line() 	    \
			delete-to-end-of-line()     \n\
Ctrl<Key>W:     	delete-previous-word()      \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		gdb-complete-tab(file)      \n\
None<Key>Escape:	gdb-complete-arg(file)      \n

! The source window is especially tuned for word selection.
Ddd*source_text_w.translations: #override \
None<Btn3Down>:		source-popup-menu()         \n\
None<Btn1Down>:		source-start-select-word()  \n\
None<Btn1Up>:		source-end-select-word()    \n\
Ctrl<Key>A:		beginning-of-line()         \n\
Ctrl<Key>B:     	backward-character()        \n\
Ctrl<Key>E:     	end-of-line()               \n\
Ctrl<Key>F:     	forward-character()         \n\
Ctrl<Key>V:     	next-page()                 \n\
Meta<Key>V:     	previous-page()             \n\
None<Key>R7:		beginning-of-line()         \n\
None<Key>R13:		end-of-line()               \n\
None<Key>Tab:		PrimitiveNextTabGroup()     \n


! This defines the popup menus in the graph window.
Ddd*graph_edit.translations: #override \
None<Btn1Down>:		graph-select-or-move()\n\
None<Btn3Down>:		graph-select() graph-popup-menu()\n


!-----------------------------------------------------------------------------
! Titles
!-----------------------------------------------------------------------------

Ddd*title: @DDD@ Window

Ddd*command_shell.title: 		@DDD@: Command Window
Ddd*command_shell.iconName: 		@DDD@: Command Window

Ddd*source_view_shell.title: 		@DDD@: Source Window
Ddd*source_view_shell.iconName: 	@DDD@: Source Window

Ddd*data_disp_shell.title: 		@DDD@: Data Window
Ddd*data_disp_shell.iconName: 		@DDD@: Data Window



!-----------------------------------------------------------------------------
! MWM Decorations
!-----------------------------------------------------------------------------

! Don't place resize handles on dialogs
Ddd*XmDialogShell.mwmDecorations: 26

! Exception: the help index.
Ddd*manual_help_popup.mwmDecorations: 1


!-----------------------------------------------------------------------------
! Help
!-----------------------------------------------------------------------------

! Set this to true to view widget names in help texts.
Ddd*contextHelpShowTitle: false

! Help is never acknowledged, always closed.
Ddd*help_popup*okLabelString: Close
Ddd*text_help_popup*okLabelString: Close
Ddd*manual_help_popup*okLabelString: Close

! Titles
Ddd*help_popup.title: @DDD@: Help
Ddd*manual_help_popup.title: @DDD@: Manual

! Help on help.
Ddd*help_popup.help*contextHelpString: \
@rm This is the @sl Help @rm window.\n\
\n\
By pressing @key F1 @rm and clicking on an item,\n\
the item's functions are explained here.\n\
\n\
Click on @bf Close @rm to close the help window.

! DDD manual.
Ddd*manual_help.area.orientation:                 XmHORIZONTAL
Ddd*manual_help*index.selectionPolicy:            XmSINGLE_SELECT

Ddd*manual_help*text.columns:           72
Ddd*manual_help*text.rows:              25
Ddd*manual_help*scrollBarDisplayPolicy: XmAS_NEEDED

Ddd*manual_help*contextHelpString: \
@rm This is the @sl @DDD@ Manual@rm.\n\
\n\
Select titles from the index on the left to get help on a specific item.

! The official announcement.
Ddd.contextHelpString:	\
@Logo @DDD@@logo, \
the @Logo D@logo ata @Logo D@logo isplay @Logo D@logo ebugger\n\
@rm by Dorothea L\374tkehaus and Andreas Zeller.\n\
\n\
@DDD@ @VERSION@ (@host@),\n\
Copyright \251 1995 Technische Universit\344t Braunschweig, Germany.\n\
@DDD@ is free software and you are welcome to distribute copies of it\n\
under certain conditions; type `show copying' to see the conditions.\n\
There is absolutely no warranty for @DDD@; type `show warranty' for details.\n\
\n\
If you appreciate this software, please send a picture postcard to:\n\
\n\
    Technische Universit\344t Braunschweig\n\
    Abteilung Softwaretechnologie\n\
    Gau\337stra\337e 17\n\
    D-38092 Braunschweig\n\
    @sl GERMANY @rm\n\
\n\
Send bug reports to `@tt ddd-bugs@ ips.cs.tu-bs.de@rm'\n\
Send comments and suggestions to `@tt ddd@ ips.cs.tu-bs.de@rm'

! The default Help Text.
Ddd*contextHelpString:	\
@rm This item has no function.

! Some trival help
Ddd*XmScrollBar.contextHelpString: \
@rm This is a @sl Scroll Bar @rm.\n\
\n\
Click or hold the @bf left mouse button @rm on an arrow button\n\
to scroll the window in the arrow direction.\n\
\n\
Drag the slider with the @bf left mouse button @rm to select the\n\
visible part of the window.

Ddd*XmSash.contextHelpString: \
@rm This is a @sl Paned Window Sash @rm.\n\
\n\
Drag the sash with the @bf left mouse button @rm to resize window parts.



!-----------------------------------------------------------------------------
! Menu Bar
!-----------------------------------------------------------------------------

Ddd*menubar.contextHelpString:		\
@rm This is the @sl Menu bar@rm.\n\
\n\
@tt \267 @bf File @rm - select files and exit @DDD@.\n\
@tt \267 @bf Edit @rm - cut, copy, and paste text.\n\
@tt \267 @bf Options @rm - change @DDD@ settings.\n\
@tt \267 @bf Windows @rm - raise @DDD@ windows.\n\
@tt \267 @bf Program @rm - run the debugged program.\n\
@tt \267 @bf Commands @rm - view command history.\n\
@tt \267 @bf Stack @rm - view backtrace and select the current stack frame.\n\
@tt \267 @bf Source @rm - edit breakpoints and go to previous positions.\n\
@tt \267 @bf Data @rm - edit displays.\n\
@tt \267 @bf Help @rm - on-line help and version information.


Ddd*menubar.file.labelString:		File
Ddd*menubar.file.mnemonic:			F
Ddd*menubar.file*contextHelpString:	\
\
@rm This is the @sl File menu@rm.\n\
\n\
@tt \267 @bf Open Program... @rm - open the program to be debugged.\n\
@tt \267 @bf Open Core... @rm - open a core dump.\n\
@tt \267 @bf Open Source... @rm - open a source file.\n\
\n\
@tt \267 @bf Print Graph... @rm - print the data display graph.\n\
@tt \267 @bf Quick Print @rm - print using the previous settings.\n\
\n\
@tt \267 @bf Close @rm - close this window.\n\
@tt \267 @bf Exit @rm - exit DDD.

Ddd*menubar*fileMenu.open_file.labelString: Open Program...
Ddd*menubar*fileMenu.open_file.mnemonic:    O

Ddd*menubar*fileMenu.open_core.labelString: Open Core...
Ddd*menubar*fileMenu.open_core.mnemonic:    o

Ddd*menubar*fileMenu.open_source.labelString: Open Source...
Ddd*menubar*fileMenu.open_source.mnemonic:    S

Ddd*menubar*fileMenu.print.labelString:  Print Graph...
Ddd*menubar*fileMenu.print.mnemonic:	 P

Ddd*menubar*fileMenu.quickPrint.labelString: Quick Print
Ddd*menubar*fileMenu.quickPrint.mnemonic: Q

Ddd*menubar*fileMenu.close.labelString:	 Close
Ddd*menubar*fileMenu.close.mnemonic:	 C

Ddd*menubar*fileMenu.quit.labelString:	 Exit
Ddd*menubar*fileMenu.quit.mnemonic:	 E
Ddd*menubar*fileMenu.quit.accelerator:      Ctrl<Key>Q
Ddd*menubar*fileMenu.quit.acceleratorText:  Ctrl+Q


Ddd*menubar.edit.labelString:		Edit
Ddd*menubar.edit.mnemonic:		E
Ddd*menubar.edit*contextHelpString:	\
\
@rm This is the @sl Edit menu@rm.\n\
\n\
@tt \267 @bf Cut @rm - remove the selected text to the clipboard.\n\
@tt \267 @bf Copy @rm - copy the selected text to the clipboard\n\
   without removing the original.\n\
@tt \267 @bf Paste @rm - paste the clipboard contents into the text.\n\
\n\
@tt \267 @bf Clear @rm - delete the current input.\n\
@tt \267 @bf Delete @rm - delete the selected text.

Ddd*editMenu.cut.labelString:		Cut
Ddd*editMenu.cut.mnemonic:		t
Ddd*editMenu.cut.accelerator:		Shift<Key>osfDelete
! *editMenu.cut.accelerator:		<Key>osfCut
Ddd*editMenu.cut.acceleratorText:	Shift+Del

Ddd*editMenu.copy.labelString:		Copy
Ddd*editMenu.copy.mnemonic:		C
Ddd*editMenu.copy.accelerator:		Ctrl<Key>osfInsert
! *editMenu.copy.accelerator:		<Key>osfPrimaryCopy
Ddd*editMenu.copy.acceleratorText:	Ctrl+Ins

Ddd*editMenu.paste.labelString:		Paste
Ddd*editMenu.paste.mnemonic:		P
Ddd*editMenu.paste.accelerator:		Shift<Key>osfInsert
! *editMenu.paste.accelerator:		<Key>osfPaste
Ddd*editMenu.paste.acceleratorText: 	Shift+Ins

Ddd*editMenu.clear.labelString:		Clear
Ddd*editMenu.clear.mnemonic:		e
Ddd*editMenu.clear.accelerator:		Ctrl<Key>U
Ddd*editMenu.clear.acceleratorText:	Ctrl+U

Ddd*editMenu.delete.labelString:	Delete
Ddd*editMenu.delete.mnemonic:		D

Ddd*menubar.options.labelString:	Options
Ddd*menubar.options.mnemonic:		O

Ddd*menubar.options*contextHelpString:	\
@rm This is the @sl Options @rm menu.\n\
\n\
@sl General Options:@rm\n\
@tt \267 @rm If @bf Group Iconify @rm is set, all @DDD@ windows\n\
  are iconified as a group.  Otherwise, windows are iconified separately.\n\
@tt \267 @rm If @bf Global Tab Completion @rm is set, \
the @key TAB @rm key completes\n\
  arguments in all @DDD@ windows.  Otherwise, the  @key TAB @rm completes\n\
  in the @DDD@ command window only.\n\
@tt \267 @rm If @bf Execution Window @rm is set, \
  the program is run in a separate\n\
  terminal window; useful for programs using terminal I/O.  Otherwise,\n\
  the program is run in the @DDD@ command window.\n\
  This change takes effect the next time the program is run.\n\
@tt \267 @rm If @bf Suppress X Warnings @rm is set, \
X warnings are silently ignored.\n\
@tt \267 @rm If @bf Save Options on Exit @rm is set, the options are\n\
  automatically saved when @DDD@ exits.  Otherwise, options are discarded.\n\
@tt \267 @rm If @bf Save History on Exit @rm is set, the command history is\n\
  automatically saved when @DDD@ exits.  Otherwise, history is discarded.\n\
\n\
@sl Source Options:@rm\n\
@tt \267 @rm If @bf Find Words Only @rm is set, only complete words are found.\n\
  Otherwise, arbitrary occurrences are found.\n\
@tt \267 @rm If @bf Cache Sources @rm is set, \
source texts are cached in memory.\n\
  Otherwise, sources are re-read upon each source change.\n\
\n\
@sl Data Options:@rm\n\
@tt \267 @rm If @bf Show Grid @rm is set, the grid is displayed.\n\
@tt \267 @rm If @bf Show Edge Hints @rm is set, edge hints are displayed.\n\
@tt \267 @rm If @bf Snap to Grid @rm is set, display alignment is enforced.\n\
@tt \267 @rm If @bf Compact Layout @rm is set, the graph is layouted\n\
  in a more compact fashion; suitable for homogenous structures only.\n\
  Otherwise, the standard layout algorithm is used.\n\
@tt \267 @rm If @bf Automatic Layout @rm is set, the graph is layouted\n\
  after each change.  Otherwise, layout can be invoked manually.\n\
\n\
@sl Startup Options:@rm\n\
(Note: these options take effect only after saving options\n\
and restarting @DDD@)\n\
@tt \267 @bf Windows @rm sets the window layout.\n\
@tt \267 @bf Keyboard focus @rm sets the keyboard focus policy.\n\
@tt \267 @bf Data Scrolling @rm sets the data window scrolling mode.\n\
@tt \267 @bf Debugger Type @rm sets the default debugger to use.\n\
\n\
@bf Save Options @rm saves the options for the next use of @DDD@.

Ddd*optionsMenu.generalOptions.labelString:  General Options
Ddd*optionsMenu.generalOptions.mnemonic:     G

Ddd*optionsMenu.sourceOptions.labelString:   Source Options
Ddd*optionsMenu.sourceOptions.mnemonic:      S

Ddd*optionsMenu.dataOptions.labelString:     Data Options
Ddd*optionsMenu.dataOptions.mnemonic:        D

Ddd*optionsMenu.startupOptions.labelString:  Startup Options
Ddd*optionsMenu.startupOptions.mnemonic:     u

Ddd*optionsMenu.saveOptions.labelString:     Save Options
Ddd*optionsMenu.saveOptions.mnemonic:        O

Ddd*generalOptionsMenu.groupIconify.labelString:       Group Iconify
Ddd*generalOptionsMenu.groupIconify.mnemonic:	       G

Ddd*generalOptionsMenu.globalTabCompletion.labelString: Global Tab Completion
Ddd*generalOptionsMenu.globalTabCompletion.mnemonic:           T

Ddd*generalOptionsMenu.separateExecWindow.labelString: Run in Execution Window
Ddd*generalOptionsMenu.separateExecWindow.mnemonic:           E

Ddd*generalOptionsMenu.suppressWarnings.labelString:   Suppress X Warnings
Ddd*generalOptionsMenu.suppressWarnings.mnemonic:	          W

Ddd*generalOptionsMenu.saveOptionsOnExit.labelString:  Save Options on Exit
Ddd*generalOptionsMenu.saveOptionsOnExit.mnemonic:          O

Ddd*generalOptionsMenu.saveHistoryOnExit.labelString:  Save History on Exit
Ddd*generalOptionsMenu.saveHistoryOnExit.mnemonic:          H

Ddd*sourceOptionsMenu.findWordsOnly.labelString:       Find Words Only
Ddd*sourceOptionsMenu.findWordsOnly.mnemonic:	             W

Ddd*sourceOptionsMenu.cacheSourceFiles.labelString:    Cache Sources
Ddd*sourceOptionsMenu.cacheSourceFiles.mnemonic:       C

Ddd*dataOptionsMenu*showGrid.labelString:	       Show Grid
Ddd*dataOptionsMenu*showGrid.mnemonic:		            G

Ddd*dataOptionsMenu*showHints.labelString:	       Show Edge Hints
Ddd*dataOptionsMenu*showHints.mnemonic:		            E

Ddd*dataOptionsMenu*snapToGrid.labelString:	       Snap to Grid
Ddd*dataOptionsMenu*snapToGrid.mnemonic:	       S
Ddd*dataOptionsMenu*snapToGrid.accelerator:	       Meta<Key>S
Ddd*dataOptionsMenu*snapToGrid.acceleratorText:        Alt+S

Ddd*dataOptionsMenu*compactLayout.labelString:	       Compact Layout
Ddd*dataOptionsMenu*compactLayout.mnemonic:	       C

Ddd*dataOptionsMenu*autoLayout.labelString:	       Automatic Layout
Ddd*dataOptionsMenu*autoLayout.mnemonic:	       A

Ddd*startupOptionsMenu*windows.labelString:            Windows
Ddd*startupOptionsMenu*windows.mnemonic:               W

Ddd*startupOptionsMenu*keyboardFocus.labelString:      Keyboard Focus
Ddd*startupOptionsMenu*keyboardFocus.mnemonic:         K

Ddd*startupOptionsMenu*dataScrolling.labelString:      Data Scrolling
Ddd*startupOptionsMenu*dataScrolling.mnemonic:              S

Ddd*startupOptionsMenu*debugger.labelString:           Debugger Type
Ddd*startupOptionsMenu*debugger.mnemonic:              D

Ddd*windowsMenu*separate.labelString:          	       Separate Windows
Ddd*windowsMenu*separate.mnemonic:                     S

Ddd*windowsMenu*attached.labelString:          	       One Single Window
Ddd*windowsMenu*attached.mnemonic:                     O

Ddd*keyboardFocusMenu*explicit.labelString:            Click To Type
Ddd*keyboardFocusMenu*explicit.mnemonic:               C

Ddd*keyboardFocusMenu*pointer.labelString:             Pointer Driven
Ddd*keyboardFocusMenu*pointer.mnemonic:                P

Ddd*dataScrollingMenu*panner.labelString:              Panner
Ddd*dataScrollingMenu*panner.mnemonic:                 P

Ddd*dataScrollingMenu*scrollbars.labelString:          Scrollbars
Ddd*dataScrollingMenu*scrollbars.mnemonic:             S

Ddd*debuggerMenu*gdb.labelString:       	       GDB
Ddd*debuggerMenu*gdb.mnemonic:			       G

Ddd*debuggerMenu*dbx.labelString:       	       DBX
Ddd*debuggerMenu*dbx.mnemonic:			       D


Ddd*menubar.view.labelString:		Windows
Ddd*menubar.view.mnemonic:		W
Ddd*menubar.view.contextHelpString:	\
\
@rm This is the @sl Windows menu@rm.\n\
\n\
@tt \267 @bf Command... @rm - show the debugger command window.\n\
@tt \267 @bf Source... @rm - show the source window.\n\
@tt \267 @bf Data... @rm - show the data window.\n\
@tt \267 @bf Execution... @rm - show the execution window.

Ddd*viewMenu.command.labelString:		Command...
Ddd*viewMenu.command.mnemonic:		C
Ddd*viewMenu.source.labelString:		Source...
Ddd*viewMenu.source.mnemonic:		S
Ddd*viewMenu.data.labelString:		Data...
Ddd*viewMenu.data.mnemonic:		D
Ddd*viewMenu.exec.labelString:		Execution...
Ddd*viewMenu.exec.mnemonic:		E


Ddd*menubar.program.labelString:		Program
Ddd*menubar.program.mnemonic:		P
Ddd*menubar.program*contextHelpString:	\
\
@rm This is the @sl Program menu@rm.\n\
\n\
@tt \267 @bf Run @rm - start the debugged program.\n\
@tt \267 @bf Step @rm - step program until it reaches a different source line.\n\
@tt \267 @bf Next @rm - step program, proceeding through subroutine calls.\n\
@tt \267 @bf Continue @rm - continue program after signal or breakpoint.\n\
@tt \267 @bf Kill @rm - Kill execution of program being debugged.\n\
@tt \267 @bf Interrupt @rm - interrupt program (or current debugger command).

Ddd*menubar*programMenu.run.labelString: 	   Run
Ddd*menubar*programMenu.run.mnemonic:	           R
Ddd*menubar*programMenu.run.accelerator:           Ctrl<Key>R
Ddd*menubar*programMenu.run.acceleratorText:       Ctrl+R

Ddd*menubar*programMenu.step.labelString: 	   Step
Ddd*menubar*programMenu.step.mnemonic:	           S
Ddd*menubar*programMenu.step.accelerator:          Ctrl<Key>S
Ddd*menubar*programMenu.step.acceleratorText:      Ctrl+S

Ddd*menubar*programMenu.next.labelString: 	   Next
Ddd*menubar*programMenu.next.mnemonic:	           N
Ddd*menubar*programMenu.next.accelerator:          Ctrl<Key>X
Ddd*menubar*programMenu.next.acceleratorText:      Ctrl+X

Ddd*menubar*programMenu.cont.labelString:	   Continue
Ddd*menubar*programMenu.cont.mnemonic:	           C
Ddd*menubar*programMenu.cont.accelerator:          Ctrl<Key>O
Ddd*menubar*programMenu.cont.acceleratorText:      Ctrl+O

Ddd*menubar*programMenu.kill.labelString:	   Kill
Ddd*menubar*programMenu.kill.mnemonic:	           K

Ddd*menubar*programMenu.interrupt.labelString:     Interrupt
Ddd*menubar*programMenu.interrupt.mnemonic:        I
Ddd*menubar*programMenu.interrupt.accelerator:     Ctrl<Key>C	 I
Ddd*menubar*programMenu.interrupt.acceleratorText: Ctrl+C


Ddd*menubar.commands.labelString:	Commands
Ddd*menubar.commands.mnemonic:		C
Ddd*menubar.commands*contextHelpString:	\
\
@rm This is the @sl Commands menu@rm.\n\
\n\
@tt \267 @bf Command History... @rm shows the previous commands.\n\
\n\
@tt \267 @bf Previous @rm - show the previous command.\n\
@tt \267 @bf Next @rm - show the next command.\n\
@tt \267 @bf Complete @rm - complete the current command.

Ddd*commandsMenu.history.labelString:	Command History...
Ddd*commandsMenu.prev.mnemonic:		H

Ddd*commandsMenu.prev.labelString:	Previous
Ddd*commandsMenu.prev.mnemonic:		P
! *commandsMenu.prev.accelerator:	Ctrl<Key>P
Ddd*commandsMenu.prev.acceleratorText:	Ctrl+P

Ddd*commandsMenu.next.labelString:	Next
Ddd*commandsMenu.next.mnemonic:		N
! *commandsMenu.next.accelerator:	Ctrl<Key>N
Ddd*commandsMenu.next.acceleratorText:	Ctrl+N

Ddd*commandsMenu.complete.labelString:	Complete
Ddd*commandsMenu.complete.mnemonic:	C
! *commandsMenu.complete.accelerator:	None<Key>Tab
! *commandsMenu.complete.accelerator:	Ctrl<Key>I
Ddd*commandsMenu.complete.acceleratorText:	Tab


Ddd*menubar.stack.labelString:		Stack
Ddd*menubar.stack.mnemonic:		t
Ddd*menubar.stack.contextHelpString:	\
\
@rm This is the @sl Stack menu@rm.\n\
\n\
@tt \267 @bf Show Backtrace... @rm - give a summary of how your program got \
where it is.\n\
\n\
@tt \267 @bf Up @rm - show the function that called the current one.\n\
@tt \267 @bf Down @rm - show the function that was called by the current one.

Ddd*stackMenu.stack.labelString:	Show Backtrace...
Ddd*stackMenu.stack.mnemonic:		S

Ddd*stackMenu.up.labelString:		Up
Ddd*stackMenu.up.mnemonic:		U
Ddd*stackMenu.up.accelerator:		Ctrl<Key>Up
Ddd*stackMenu.up.acceleratorText:	Ctrl+Up

Ddd*stackMenu.down.labelString:		Down
Ddd*stackMenu.down.mnemonic:		D
Ddd*stackMenu.down.accelerator:		Ctrl<Key>Down
Ddd*stackMenu.down.acceleratorText:	Ctrl+Down



Ddd*menubar.source.labelString:		Source
Ddd*menubar.source.mnemonic:		S
Ddd*menubar.source.contextHelpString:	\
\
@rm This is the @sl Source menu@rm.\n\
@tt \267 @bf Edit Breakpoints... @rm - set, view, and edit breakpoints.\n\
\n\
@tt \267 @bf Edit Source... @rm - invoke text editor for current source.\n\
@tt \267 @bf Reload Source  @rm - reload current source file.\n\
\n\
@tt \267 @bf Back @rm - show the previous source position.\n\
@tt \267 @bf Forward @rm - show the next source position.

Ddd*sourceMenu.breakpoints.labelString:	Edit Breakpoints...
Ddd*sourceMenu.breakpoints.mnemonic:	E

Ddd*sourceMenu.edit.labelString:	Edit Source...
Ddd*sourceMenu.edit.mnemonic:	        S
Ddd*sourceMenu.edit.accelerator:	Ctrl<Key>G
Ddd*sourceMenu.edit.acceleratorText:	Ctrl+G

Ddd*sourceMenu.reload.labelString:	Reload Source
Ddd*sourceMenu.reload.mnemonic:	        R
Ddd*sourceMenu.reload.accelerator:	Ctrl<Key>L
Ddd*sourceMenu.reload.acceleratorText:	Ctrl+L

Ddd*sourceMenu.back.labelString:	Back
Ddd*sourceMenu.back.mnemonic:		B
Ddd*sourceMenu.back.accelerator:	Ctrl<Key>Left
Ddd*sourceMenu.back.acceleratorText:	Ctrl+Left

Ddd*sourceMenu.forward.labelString:	Forward
Ddd*sourceMenu.forward.mnemonic:	F
Ddd*sourceMenu.forward.accelerator:	Ctrl<Key>Right
Ddd*sourceMenu.forward.acceleratorText:	Ctrl+Right


Ddd*menubar.data.labelString:		Data
Ddd*menubar.data.mnemonic:		D
Ddd*menubar.data*contextHelpString:	\
\
@rm This is the @sl Data menu@rm.\n\
\n\
@tt \267 @bf Edit Displays... @rm - select, enable and delete displays.\n\
\n\
@tt \267 @bf Align Displays @rm - align all displays on the next grid point.\n\
@tt \267 @bf Rotate Graph @rm - rotate the graph clockwise by 90 degrees.\n\
@tt \267 @bf Layout Graph @rm - layout the graph.\n\
\n\
@tt \267 @bf Select All @rm - select all displays.\n\
@tt \267 @bf Refresh @rm - update all displays.

Ddd*dataMenu.displays.labelString:	Edit Displays...
Ddd*dataMenu.displays.mnemonic:		E

Ddd*dataMenu.align.labelString:		Align Displays
Ddd*dataMenu.align.mnemonic:		A
Ddd*dataMenu.align.accelerator:		Meta<Key>A
Ddd*dataMenu.align.acceleratorText:	Alt+A

Ddd*dataMenu.rotate.labelString:	Rotate Graph
Ddd*dataMenu.rotate.mnemonic:		R
Ddd*dataMenu.rotate.accelerator:	Meta<Key>R
Ddd*dataMenu.rotate.acceleratorText:	Alt+R

Ddd*dataMenu.layout.labelString:	Layout Graph
Ddd*dataMenu.layout.mnemonic:		L
Ddd*dataMenu.layout.accelerator:	Meta<Key>L
Ddd*dataMenu.layout.acceleratorText:	Alt+L

Ddd*dataMenu.selectAll.labelString:	Select All
Ddd*dataMenu.selectAll.mnemonic:	S
Ddd*dataMenu.selectAll.accelerator:	Meta<Key>S
Ddd*dataMenu.selectAll.acceleratorText:	Alt+S

Ddd*dataMenu.refresh.labelString:	Refresh
Ddd*dataMenu.refresh.mnemonic:		R
Ddd*dataMenu.refresh.accelerator:	Ctrl<Key>L
Ddd*dataMenu.refresh.acceleratorText:	Ctrl+L



Ddd*menubar.help.labelString:		Help
Ddd*menubar.help.mnemonic:		H
Ddd*menubar.help*contextHelpString: \
\
@rm This is the @sl Help menu@rm.\n\
\n\
@tt \267 @bf On Context... @rm - click on an item and get help on it.\n\
@tt \267 @bf On Window... @rm - help on the application itself.\n\
@tt \267 @bf On Help... @rm - help on how to use the help facility.\n\
@tt \267 @bf On Version... @rm - some general information about @DDD@.\n\
@tt \267 @bf On Debugging... @rm - some general information about debugging.\n\
\n\
@tt \267 @bf @DDD@ Manual... @rm - the @DDD@ on-line manual.

Ddd*helpMenu.onContext.labelString:	On Context...
Ddd*helpMenu.onContext.mnemonic:	C
Ddd*helpMenu.onContext.accelerator:	None<Key>F1
! *helpMenu.onContext.accelerator:	<Key>osfHelp
Ddd*helpMenu.onContext.acceleratorText:	F1

Ddd*helpMenu.onWindow.labelString:	On Window...
Ddd*helpMenu.onWindow.mnemonic:		W

Ddd*helpMenu.onHelp.labelString:	On Help...
Ddd*helpMenu.onHelp.mnemonic:		H

Ddd*helpMenu.onVersion.labelString:	On Version...
Ddd*helpMenu.onVersion.mnemonic:	V

Ddd*helpMenu.onDebugging.labelString:	On Debugging...
Ddd*helpMenu.onDebugging.mnemonic:	D

Ddd*helpMenu.index.labelString:		@DDD@ Manual...
Ddd*helpMenu.index.mnemonic:		M


!-----------------------------------------------------------------------------
! Graph Editor
!-----------------------------------------------------------------------------

! Width and height for several Motif & Athena variants

! Motif 1.x, using ScrolledWindow
Ddd*graph_edit_swindow.width:		620
Ddd*graph_edit_swindow.height:		200

! Motif 2.0, using ScrolledWindow
Ddd*graph_editSW.width:			620
Ddd*graph_editSW.height:		200

! Motif 1.x, using Porthole
Ddd*graph_edit_porthole.width:          620
Ddd*graph_edit_porthole.height:         200

! Motif 2.0, using Porthole
Ddd*graph_edit_form.width:              620
Ddd*graph_edit_form.height:             200

Ddd*graph_edit_panner.backgroundPixmap:	25_foreground
Ddd*graph_edit_panner.defaultScale:	10
Ddd*graph_edit_panner.translations: \
#override \
<Btn1Down>:        ddd-get-focus() start()\n\
<Btn2Down>:        ddd-get-focus() abort()\n\
<Key>osfLeft:      page(-.5p, +0)\n\
<Key>osfRight:     page(+.5p, +0)\n\
<Key>osfUp:        page(+0, -.5p)\n\
<Key>osfDown:      page(+0, +.5p)\n\
<Key>osfBeginLine: page(0,0)\n\
<Key>osfBackSpace: page(-1p, -1p)\n\
<Key>osfDelete:    page(-1p, -1p)\n\
Shift<Key>Tab:     ddd-prev-tab-group()\n\
<Key>Tab:     	   ddd-next-tab-group()\n

Ddd*graph_edit.highlightOnEnter:	True
Ddd*graph_edit.navigationType:		TAB_GROUP

Ddd*graph_edit.contextHelpString:	\
@rm This is the @sl Data Window @rm \n\
showing the data displays of the debugged program.\n\
\n\
@bf Left mouse button:@rm\n\
@tt \267 @sl Click @rm on a display @sl DISPLAY  @rm to select @sl DISPLAY @rm.\n\
@tt \267 @sl Double-click @rm on a display to select all connected displays.\n\
@tt \267 @sl Double-click @rm on the background to select all displays.\n\
@tt \267 @sl Drag @rm on a display to move selected displays.\n\
@tt \267 @sl Drag @rm on the background to select framed displays.\n\
\n\
@bf Shift + Left mouse button:@rm\n\
@tt \267 @sl Click @rm on a display @sl DISPLAY  @rm to add @sl DISPLAY  @rm \
to the selection.\n\
@tt \267 @sl Drag @rm on a display to move selected displays.\n\
@tt \267 @sl Drag @rm on the background to add framed displays\n\
  to the selection.\n\
\n\
@bf Right mouse button:@rm\n\
@tt \267 @sl Click @rm on some display @sl DISPLAY @rm \
  to modify @sl DISPLAY @rm via a menu.\n\
@tt \267 @sl Click @rm on the background to create new displays via a menu.

Ddd*data_disp_shell.contextHelpString:	\
@rm This is the @sl Data Display @rm \n\
showing the data displays of the debugged program.\n\
\n\
@bf Left mouse button:@rm\n\
@tt \267 @sl Click @rm on a display @sl DISPLAY @rm to select @sl DISPLAY @rm.\n\
@tt \267 @sl Double-click @rm on a display to select all connected displays.\n\
@tt \267 @sl Double-click @rm on the background to select all displays.\n\
@tt \267 @sl Drag @rm on a display to move selected displays.\n\
@tt \267 @sl Drag @rm on the background to select framed displays.\n\
\n\
@bf Middle mouse button:@rm\n\
@tt \267 @sl Click @rm on a display @sl DISPLAY @rm to add @sl DISPLAY @rm \
to the selection.\n\
@tt \267 @sl Drag @rm on a display to move selected displays.\n\
@tt \267 @sl Drag @rm on the background to add framed displays\n\
  to the selection.\n\
\n\
@bf Right mouse button:@rm\n\
@tt \267 @sl Click @rm on some display @sl DISPLAY @rm to modify @sl DISPLAY @rm \
via a menu.\n\
@tt \267 @sl Click @rm on the background to create new displays via a menu.

Ddd*graph_edit_panner.contextHelpString:	\
@rm The data window is too small to hold all displays.\n\
Drag the slider with the @bf left mouse button @rm to select\n\
the visible part of the data window.


!-----------------------------------------------------------------------------
! Graph Popup Menus
!-----------------------------------------------------------------------------

Ddd*graph_popup.selectAll.labelString:	Select All
Ddd*graph_popup.refresh.labelString:	Refresh
Ddd*graph_popup.new_arg.labelString:	New ()
Ddd*graph_popup.new.labelString:	New Display...

Ddd*node_popup.dereference.labelString:	Dereference
Ddd*node_popup.dependent.labelString:	Dependent Display...
Ddd*node_popup.detail.labelString:	Show Detail
Ddd*node_popup.rotate.labelString: 	Rotate
Ddd*node_popup.delete.labelString:	Delete Display
Ddd*node_popup.disable.labelString:	Disable Display


!-----------------------------------------------------------------------------
! Graph Buttons
!-----------------------------------------------------------------------------

Ddd*graph_cmd_w*contextHelpString: \
@rm Commands related to the data window.


Ddd*graph_cmd_w.graph_arg_label.labelString:	():
Ddd*graph_cmd_w.graph_arg.columns:              20
Ddd*graph_cmd_w*graph_arg.editable:		false
Ddd*graph_cmd_w*graph_arg.contextHelpString:	\
@rm This is the argument @bf () @rm for the command buttons on the right.\n\
This is an output-only window which displays the selection\n\
in the data window above.



Ddd*graph_cmd_w.orientation:			XmHORIZONTAL
Ddd*graph_cmd_w.graph_cmd_area*orientation:	XmHORIZONTAL

Ddd*graph_cmd_w.graph_cmd_area*dependent.labelString:	Dependent ()
Ddd*graph_cmd_w.graph_cmd_area*dereference.labelString: Dereference ()
Ddd*graph_cmd_w.graph_cmd_area*detail.labelString:	Show ()
Ddd*graph_cmd_w.graph_cmd_area*rotate.labelString:	Rotate ()
Ddd*graph_cmd_w.graph_cmd_area*delete.labelString:	Delete ()
Ddd*graph_cmd_w.graph_cmd_area*disable.labelString:	Disable ()

Ddd*graph_cmd_w.graph_cmd_area*dependent.contextHelpString:\
@bf Dependent ()@rm\n\
Create a new display dependent on the selected display part.

Ddd*graph_cmd_w.graph_cmd_area*dereference.contextHelpString:\
@bf Dereference ()@rm\n\
Dereference the selected display.

Ddd*graph_cmd_w.graph_cmd_area*detail.contextHelpString:	\
@bf Show () @rm / @bf Hide () @rm\n\
Show/Hide details of the selected displays.

Ddd*graph_cmd_w.graph_cmd_area*rotate.contextHelpString:	\
@bf Rotate ()@rm\n\
Rotate the selected displays.

Ddd*graph_cmd_w.graph_cmd_area*disable.contextHelpString:	\
@bf Disable () @rm / @bf Enable () @rm\n\
Disable/Enable the selected displays.

Ddd*graph_cmd_w.graph_cmd_area*delete.contextHelpString:	\
@bf Delete ()@rm\n\
Delete the selected displays.


!-----------------------------------------------------------------------------
! Source text
!-----------------------------------------------------------------------------
Ddd*status_w.alignment:			XmALIGNMENT_BEGINNING
Ddd*status_w.labelString:		Ready.
Ddd*status_w.contextHelpString:		\
@rm This @sl status line @rm shows the last debugger message.

Ddd*source_text_w.columns:		88
Ddd*source_text_w.rows:			12
Ddd*source_view_shell*source_text_w.rows:	20

Ddd*source_text_wSW.width:		660
Ddd*source_text_wSW.height:		140
Ddd*source_view_shell*source_text_wSW.height: 280

Ddd*source_text_w.editable:		false
Ddd*source_text_w.allowResize:		true
Ddd*source_text_w.editMode:		XmMULTI_LINE_EDIT
Ddd*source_text_w.autoShowCursorPosition:	true
Ddd*source_text_w.cursorPositionVisible:	true
Ddd*source_text_w.scrollHorizontal:	false
Ddd*source_text_w.wordWrap:		true

Ddd*source_text_w.contextHelpString:	\
\
@rm This is the @sl source text window @rm in which the source code\n\
of the debugged program is displayed.\n\
\n\
On the @sl left side@rm, line numbers and breakpoints are shown:\n\
`@tt #@sl n@tt #@rm' is an enabled breakpoint (with number @sl n@rm);\n\
`@tt _@sl n@tt _@rm' is a disabled breakpoint (with number @sl n@rm).\n\
The currently executed line is indicated by `@tt>@rm'.\n\
The @sl right side @rm contains the source code.\n\
\n\
Click the @bf left mouse button @rm to select words.\n\
Drag with the @bf left mouse button @rm to modify your selection.\n\
\n\
Click the @bf right mouse button @rm to get a popup menu:\n\
@tt \267 @rm On the left side: set and modify breakpoints;\n\
@tt \267 @rm On the right side: show values and lookup functions.


Ddd*source_view_shell.contextHelpString:	\
\
@rm This is the @sl source text window @rm in which the source code\n\
of the debugged program is displayed.\n\
\n\
On the @sl left side@rm, line numbers and breakpoints are shown:\n\
`@tt #@sl n@tt #@rm' is an enabled breakpoint (with number @sl n@rm);\n\
`@tt _@sl n@tt _@rm' is a disabled breakpoint (with number @sl n@rm).\n\
The currently executed line is indicated by `@tt>@rm'.\n\
The @sl right side @rm contains the source code.\n\
\n\
Click the @bf left mouse button @rm to select words.\n\
Drag with the @bf left mouse button @rm to modify your selection.\n\
\n\
Click the @bf right mouse button @rm to get a popup menu:\n\
@tt \267 @rm On the left side: set and modify breakpoints;\n\
@tt \267 @rm On the right side: show values and lookup functions.


!-----------------------------------------------------------------------------
! Source Text Popup-Menus
!-----------------------------------------------------------------------------

Ddd*line_popup.set.labelString:		Set Breakpoint
Ddd*line_popup.set_temp.labelString:	Set temporary Breakpoint

Ddd*bp_popup.disable.labelString:	Disable Breakpoint
Ddd*bp_popup.condition.labelString:	Set Condition
Ddd*bp_popup.ignore_count.labelString:	Set Ignore Count
Ddd*bp_popup.delete.labelString:	Delete Breakpoint

Ddd*text_popup.print.labelString:	Print
Ddd*text_popup.disp.labelString:	Display
Ddd*text_popup.lookup.labelString:	Lookup
Ddd*text_popup.break.labelString:	Break
Ddd*text_popup.clear.labelString:	Clear


!-----------------------------------------------------------------------------
! Source Text Commands
!-----------------------------------------------------------------------------

Ddd*arg_cmd_w*contextHelpString: \
@rm Commands related to the source text.\n\
Enter arguments for @sl name @rm() commands\n\
in the @bf() @rm field.

Ddd*arg_cmd_w.arg_label.labelString:		():
Ddd*arg_cmd_w.source_arg.contextHelpString:	\
@rm This is the argument @bf () @rm for the command buttons on the right.\n\
You can edit this field, or easily change its value\n\
by selecting something in the source text above.
Ddd*arg_cmd_w.source_arg.value:                  main
Ddd*arg_cmd_w.source_arg.columns:                20

Ddd*arg_cmd_w.orientation:				XmHORIZONTAL
Ddd*arg_cmd_w.arg_cmd_area*orientation:			XmHORIZONTAL

Ddd*arg_cmd_w.arg_cmd_area*lookup.labelString:		Lookup ()
Ddd*arg_cmd_w.arg_cmd_area*break.labelString:		Break ()
Ddd*arg_cmd_w.arg_cmd_area*clear.labelString:		Clear ()
Ddd*arg_cmd_w.arg_cmd_area*print.labelString:		Print ()
Ddd*arg_cmd_w.arg_cmd_area*display.labelString:		Display ()
Ddd*arg_cmd_w.arg_cmd_area*find_backward.labelString:	Find<< ()
Ddd*arg_cmd_w.arg_cmd_area*find_forward.labelString:	Find>> ()

Ddd*arg_cmd_w.arg_cmd_area*lookup.contextHelpString:	\
@bf Lookup ()@rm\n\
Lookup a line, file, function, variable, or breakpoint.\n\
@tt \267 @rm If the argument @bf () @rm is empty, \
show the current execution position.\n\
@tt \267 @rm If @bf () @rm contains a number, \
lookup that line in the current source.\n\
@tt \267 @rm If @bf () @rm contains @sl FILENAME@tt:@sl LINE@rm, lookup\n\
  line number @sl LINE@rm in the source file @sl FILENAME@rm.\n\
@tt \267 @rm If @bf () @rm contains @tt #@sl NUMBER@rm, lookup\n\
  breakpoint number @sl NUMBER@rm.\n\
@tt \267 @rm If @bf () @rm contains a function or variable name, lookup\n\
  the definition of that function or variable.

Ddd*arg_cmd_w.arg_cmd_area*break.contextHelpString:	\
@bf Break ()@rm\n\
Set a breakpoint at the argument @bf ()@rm.

Ddd*arg_cmd_w.arg_cmd_area*clear.contextHelpString:	\
@bf Clear ()@rm\n\
Clear the breakpoint at the argument @bf ()@rm.

Ddd*arg_cmd_w.arg_cmd_area*print.contextHelpString:	\
@bf Print ()@rm\n\
Print the argument @bf () @rm in the command window.

Ddd*arg_cmd_w.arg_cmd_area*display.contextHelpString:	\
@bf Display ()@rm\n\
Display the argument @bf () @rm in the data display window.

Ddd*arg_cmd_w.arg_cmd_area*find_backward.contextHelpString:	\
@bf Find<< () @rm\n\
Search the previous occurrence of @bf () @rm in the current source text.\n\
If the option @bf Find Words Only @rm is set, only complete words are found.

Ddd*arg_cmd_w.arg_cmd_area*find_forward.contextHelpString:	\
@bf Find>> () @rm\n\
Search the next occurrence of @bf () @rm in the current source text.\n\
If the option @bf Find Words Only @rm is set, only complete words are found.


!-----------------------------------------------------------------------------
! Command Window
!-----------------------------------------------------------------------------

Ddd*gdb_w.value: \
@DDD@ @VERSION@ (@host@), by Dorothea L\374tkehaus and Andreas Zeller.\n\
Copyright \251 1995 Technische Universit\344t Braunschweig, Germany.\n

Ddd*gdb_w.rows:			10
Ddd*gdb_w.columns:		88

Ddd*gdb_wSW.width:		660
Ddd*gdb_wSW.height:		120

Ddd*gdb_w.editable:		true
Ddd*gdb_w.allowResize:		true
Ddd*gdb_w.editMode:		XmMULTI_LINE_EDIT
Ddd*gdb_w.scrollHorizontal:	false
Ddd*gdb_w.wordWrap:		true
Ddd*gdb_w.autoShowCursorPosition:	true
Ddd*gdb_w.cursorPositionVisible:	true

Ddd*gdb_w.contextHelpString:		\
\
@rm This is the @sl Command window.@rm\n\
\n\
You can enter debugging commands here.\n\
Enter ``@tt help@rm'' at the `@tt (gdb)@rm' or `@tt (dbx)@rm' prompt\n\
to get help on debugging commands.

Ddd*command_shell.contextHelpString:		\
\
@rm This is the @sl Command window.@rm\n\
\n\
You can enter debugging commands here.\n\
Enter ``@tt help@rm'' at the `@tt (gdb)@rm' or `@tt (dbx)@rm' prompt\n\
to get help on debugging commands.



!-----------------------------------------------------------------------------
! Debugger Buttons
!-----------------------------------------------------------------------------

Ddd*source_buttons.orientation:	XmHORIZONTAL
Ddd*source_buttons.contextHelpString:\
@rm This is a @sl command area @rm.\n\
\n\
By clicking on one of the buttons,\n\
the corresponding command is sent to the debugger.\n\
The context sensitive help for the buttons\n\
gives a short command description.\n

Ddd*command_buttons.orientation:	XmHORIZONTAL
Ddd*command_buttons.contextHelpString:\
@rm This is a @sl command area @rm.\n\
\n\
By clicking on one of the buttons,\n\
the corresponding command is sent to the debugger.\n\
The context sensitive help for the buttons\n\
gives a short command description.\n

! An empty help string means that the help text for this button
! is to be requested from GDB (via the GDB `help' command).
Ddd*source_buttons*contextHelpString:
Ddd*command_buttons*contextHelpString:

! Some buttons have a special meaning; 
! so we must provide help on ourselves.
Ddd*?*interrupt.contextHelpString: \
@bf Interrupt\n\
@rm Interrupt the debugged process or current debugger command.\n\
(Equivalent to @key Ctrl+C@rm).

Ddd*?*Yes.contextHelpString:    \
@bf Yes\n\
@rm Confirm the debugger question.

Ddd*?*No.contextHelpString:     \
@bf No\n\
@rm Do @sl not @rm confirm the debugger question.

Ddd*?*Complete.contextHelpString:	\
@bf Complete@rm\n\
Complete the current debugging command.  (Equivalent to @key Tab@rm).

Ddd*?*Clear.contextHelpString:	\
@bf Clear@rm\n\
Clear the current debugging command.  (Equivalent to @key Ctrl+U@rm).

Ddd*?*Prev.contextHelpString:	\
@bf Prev@rm\n\
Show the previous debugging command \
(Equivalent to @key Ctrl+P @rm or @key Up@rm).

Ddd*?*Next.contextHelpString:	\
@bf Prev@rm\n\
Show the next debugging command \
(Equivalent to @key Ctrl+N @rm or @key Down@rm).

Ddd*?*Apply.contextHelpString:	\
@bf Apply@rm\n\
Execute the current debugging command.  (Equivalent to @symbol \277@rm).

Ddd*?*Back.contextHelpString:	\
@bf Back@rm\n\
Go to the previous source position.

Ddd*?*Forward.contextHelpString:	\
@bf Forward@rm\n\
Go to the next source position.

Ddd*?*Edit.contextHelpString:	\
@bf Edit@rm\n\
Invoke an editor for the current source file.

Ddd*?*Reload.contextHelpString:	\
@bf Reload@rm\n\
Reload the source from file.




!-----------------------------------------------------------------------------
! Print Dialog
!-----------------------------------------------------------------------------

Ddd*print*options.orientation:                XmVERTICAL
Ddd*print*options.marginWidth:                0
Ddd*print*options.marginHeight:               0
Ddd*print*options.spacing:                    0
Ddd*print*options.?.orientation:              XmHORIZONTAL
Ddd*print*options.?.marginWidth:              0
Ddd*print*options.?.marginHeight:             0
Ddd*print*options.?.?.orientation:            XmHORIZONTAL
Ddd*print*options*isAligned:		      false
Ddd*print*options*alignment:		      XmALIGNMENT_BEGINNING

Ddd*print*print_to.labelString:               Print To:
Ddd*print*print_to.alignment:                 XmALIGNMENT_END
Ddd*print*print_to.width:                     100
Ddd*print*print_to.recomputeSize:             false
Ddd*print*print_to_field*printer.labelString: Printer
Ddd*print*print_to_field*file.labelString:    File

Ddd*print*print_command.labelString:          Print Command:
Ddd*print*print_command.alignment:            XmALIGNMENT_END
Ddd*print*print_command.width:                100
Ddd*print*print_command.recomputeSize:        false
Ddd*print*print_command_field.columns:        48

Ddd*print*file_name.labelString:              File Name:
Ddd*print*file_name.alignment:                XmALIGNMENT_END
Ddd*print*file_name.width:                    100
Ddd*print*file_name.recomputeSize:            false
Ddd*print*file_name_field.columns:            32
Ddd*print*postscript.labelString:             PostScript
Ddd*print*xfig.labelString:	   	      XFIG

Ddd*print*print_what.labelString:             Print:
Ddd*print*print_what.alignment:               XmALIGNMENT_END
Ddd*print*print_what.width:                   100
Ddd*print*print_what.recomputeSize:           false
Ddd*print*all.labelString:	              All Displays
Ddd*print*selected.labelString:	              Selected Displays

Ddd*print*print_orientation.labelString:      Orientation:
Ddd*print*print_orientation.alignment:        XmALIGNMENT_END
Ddd*print*print_orientation.width:            100
Ddd*print*print_orientation.recomputeSize:    false
Ddd*print*portrait.labelString:               Portrait
Ddd*print*landscape.labelString:              Landscape

Ddd*print*paper_size.labelString:             Paper Size:
Ddd*print*paper_size.alignment:               XmALIGNMENT_END
Ddd*print*paper_size.width:                   100
Ddd*print*paper_size.recomputeSize:           false
Ddd*print*paper_size_field.orientation:       XmVERTICAL
Ddd*print*paper_size_field.numColumns:        2
Ddd*print*a4.labelString:                     A4 (210mm \327 297mm)
Ddd*print*letter.labelString:		      Letter (8\275" \327 11")
Ddd*print*legal.labelString:		      Legal (8\275" \327 14")
Ddd*print*executive.labelString:	      Executive (7\275" \327 10")

Ddd*print.autoUnmanage:  false
Ddd*print*okLabelString: Print

Ddd*print*contextHelpString: \
@rm You can print the graph on a PostScript@symbol \344 @rm printer \
or print the graph in a file.\n\
Enter the print command or the file name in the appropriate fields.\n\
\n\
Files can be created in the following formats:\n\
@tt \267 @bf PostScript @rm - PostScript@symbol \344 @rm format\n\
@tt \267 @bf XFIG @rm - XFIG format (from the @tt xfig(1) @rm program)\n\
\n\
If you wish to print all displays, select @bf All Displays@rm.\n\
If you wish to print selected displays only, select\
 @bf Selected Displays@rm.\n\
For PostScript@symbol \344 @rm format only, you can also specify \
orientation and paper size.\n\
\n\
To print, click on @bf Print@rm.



!-----------------------------------------------------------------------------
! File Selection Dialog
!-----------------------------------------------------------------------------

Ddd*exec_files_popup*okLabelString:        Open
Ddd*exec_files_popup*selectionLabelString: Program
Ddd*exec_files_popup*contextHelpString:    \
@rm Enter the name of the program to be debugged in the argument field.\n\
The program is read for its symbols, for getting the contents\
 of pure memory,\n\
and it is the program executed when you use the ``@tt run@rm'' command.\n\
If the program file cannot be found as specified,\
 your execution directory path\n\
(@tt $PATH@rm) is searched for a command of that name.\n\
No argument means to have no executable file and no symbols.\n\
\n\
Click on @bf Open @rm to open the selected file.


Ddd*core_files_popup*okLabelString:        Open
Ddd*core_files_popup*selectionLabelString: Core Dump
Ddd*core_files_popup*contextHelpString:    \
@rm  Enter the name of a core dump in the argument field.\n\
The core dump is used for examining memory and registers.\n\
No argument means to have no core file.\n\
\n\
Click on @bf Open @rm to open the selected core dump.


Ddd*source_files_popup*okLabelString:      Open
Ddd*source_files_popup*selectionLabelString: Source File
Ddd*source_files_popup*contextHelpString:    \
@rm  Enter the name of a source file in the argument field.\n\
The source file is shown in the source window and may be used\n\
for setting or clearing breakpoints.\n\
\n\
Click on @bf Open @rm to open the selected source file.



!-----------------------------------------------------------------------------
! Breakpoint Editor
!-----------------------------------------------------------------------------

Ddd*edit_breakpoints_dialog_popup.title: @DDD@: Breakpoint Editor
Ddd*edit_breakpoints_dialog*breakpoints.labelString: Breakpoints
Ddd*edit_breakpoints_dialog*form1.orientation:   XmVERTICAL
Ddd*edit_breakpoints_dialog*form1.marginWidth:   0
Ddd*edit_breakpoints_dialog*form1.marginHeight:  0
Ddd*edit_breakpoints_dialog*form2.orientation:   XmHORIZONTAL
Ddd*edit_breakpoints_dialog*form2.marginWidth:   0
Ddd*edit_breakpoints_dialog*form2.marginHeight:  0
Ddd*edit_breakpoints_dialog*buttons.orientation: XmVERTICAL
Ddd*edit_breakpoints_dialog*buttons.marginWidth:   0
Ddd*edit_breakpoints_dialog*buttons.marginHeight:  0
Ddd*edit_breakpoints_dialog.okLabelString:       Close

Ddd*edit_breakpoints_dialog*contextHelpString:       \
@rm This is the @sl Breakpoint editor@rm.\n\
\n\
Select breakpoints on the left; operations on the right.\n\
\n\
@tt \267 @bf New... @rm - create a new breakpoint.\n\
@tt \267 @bf Lookup @rm - look up the selected breakpoint.\n\
@tt \267 @bf Enable @rm - enable all selected breakpoints.\n\
@tt \267 @bf Disable @rm - disable all selected breakpoints.\n\
@tt \267 @bf Condition... @rm - set or modify a breakpoint condition.\n\
@tt \267 @bf Ignore Count... @rm - set or modify a breakpoint ignore count.\n\
@tt \267 @bf Delete @rm - delete all selected breakpoints.

Ddd*new_breakpoint_dialog_popup.title: @DDD@: New Breakpoint
Ddd*new_breakpoint_dialog.selectionLabelString:	\
@rm Enter new breakpoint:

Ddd*new_breakpoint_dialog*contextHelpString:	\
\
@rm Please enter a breakpoint you want to set.\n\
Enter its name in the argument field.\n\
\n\
The argument may be a @sl line number@rm, a @sl function name@rm,\
 or `@tt*@rm' and an address.\n\
If a @sl line number @rm is specified, break at start of code for that line.\n\
If a @sl function name @rm is specified, break at start of code\
 for that function.\n\
If an @sl address @rm is specified, break at that exact address.\n\
Without argument, use current execution address of selected stack frame.\n\
This is useful for breaking on return to a stack frame.\n\
\n\
Multiple breakpoints at one place are permitted, and useful if conditional.


Ddd*edit_breakpoint_condition_dialog_popup.title: @DDD@: Breakpoint Condition
Ddd*edit_breakpoint_condition_dialog.selectionLabelString:        \
@rm Enter breakpoint condition:

Ddd*edit_breakpoint_condition_dialog*contextHelpString:        \
@rm Specify a condition @sl COND @rm for the selected breakpoint(s).\n\
The selected breakpoint(s) break only if @sl COND @rm\n\
evaluates to a non-zero value.


Ddd*edit_breakpoint_ignore_count_dialog_popup.title: @DDD@: Ignore Count
Ddd*edit_breakpoint_ignore_count_dialog.selectionLabelString:        \
@rm Enter breakpoint ignore count:

Ddd*edit_breakpoint_ignore_count_dialog*contextHelpString:        \
@rm Set the ignore count @sl COUNT @rm for the selected breakpoint(s).\n\
Next @sl COUNT @rm hits of the selected breakpoint(s) will be ignored.


Ddd*edit_breakpoints_dialog*buttons*new.labelString:           New...
Ddd*edit_breakpoints_dialog*buttons*new.contextHelpString:     \
@rm Set breakpoint at specified line or function.

Ddd*edit_breakpoints_dialog*buttons*lookup.labelString:        Lookup
Ddd*edit_breakpoints_dialog*buttons*lookup.contextHelpString:  \
@rm Lookup the selected breakpoint.

Ddd*edit_breakpoints_dialog*buttons*enable.labelString:        Enable
Ddd*edit_breakpoints_dialog*buttons*enable.contextHelpString:  \
@rm Enable the selected breakpoint(s).

Ddd*edit_breakpoints_dialog*buttons*disable.labelString:       Disable
Ddd*edit_breakpoints_dialog*buttons*disable.contextHelpString:  \
@rm Disable the selected breakpoint(s).

Ddd*edit_breakpoints_dialog*buttons*condition.labelString:     Condition...
Ddd*edit_breakpoints_dialog*buttons*condition*contextHelpString:  \
@rm Specify a condition @sl COND @rm for the selected breakpoint(s).\n\
Breakpoints break only if @sl COND @rm evaluates to a non-zero value.

Ddd*edit_breakpoints_dialog*buttons*ignore_count.labelString:  Ignore Count...
Ddd*edit_breakpoints_dialog*buttons*ignore_count*contextHelpString:  \
@rm Set the ignore count @sl COUNT @rm for the selected breakpoint(s).\n\
Next @sl COUNT @rm hits of the selected breakpoints will be ignored.

Ddd*edit_breakpoints_dialog*buttons*delete.labelString:        Delete
Ddd*edit_breakpoints_dialog*buttons*delete.contextHelpString:  \
@rm Delete the selected breakpoint(s).


!-----------------------------------------------------------------------------
! Show Backtrace
!-----------------------------------------------------------------------------

Ddd*stack_dialog_popup.title:             @DDD@: Backtrace
Ddd*stack_dialog.okLabelString:           Close
Ddd*stack_dialog.applyLabelString:        Up
Ddd*stack_dialog.cancelLabelString:       Down
Ddd*stack_dialog.listLabelString:         Backtrace
Ddd*stack_dialog*visibleItemCount:        10

Ddd*stack_dialog*contextHelpString:       \
@rm This window shows the current @sl backtrace@rm.\n\
\n\
The backtrace is a summary of how your program got where it is.\n\
It shows one line per stack frame, for many frames, starting with\n\
the initial calling function (usually @tt main()@rm), the function\n\
called by @tt main()@rm, the function called by this function and\n\
so on down the stack, down to the currently executing frame.\n\
\n\
You can make a specific frame the current one by selecting it\n\
in this window.  You can also move around by pressing \
@bf Up @rm or @bf Down@rm.


!-----------------------------------------------------------------------------
! Command History
!-----------------------------------------------------------------------------

Ddd*history_dialog_popup.title:             @DDD@: Command History
Ddd*history_dialog.okLabelString:           Close
Ddd*history_dialog.applyLabelString:        Apply
Ddd*history_dialog.listLabelString:         Command History
Ddd*history_dialog*visibleItemCount:        10

Ddd*history_dialog*contextHelpString:       \
@rm This window shows the @sl command history@rm.\n\
\n\
@DDD@ keeps track of the commands you type during your debugging\n\
sessions, so that you can be certain of precisely what happened.  Use\n\
this window to manage the @DDD@ command history facility.\n\
\n\
Select a specific command to have it copied at the debugger prompt.\n\
Click on @bf Apply @rm to execute the current command.


!-----------------------------------------------------------------------------
! Display Editor
!-----------------------------------------------------------------------------

Ddd*edit_displays_dialog_popup.title: @DDD@: Display Editor
Ddd*edit_displays_dialog*displays.labelString: Displays
Ddd*edit_displays_dialog*form1.orientation:   XmVERTICAL
Ddd*edit_displays_dialog*form1.marginWidth:   0
Ddd*edit_displays_dialog*form1.marginHeight:  0
Ddd*edit_displays_dialog*form2.orientation:   XmHORIZONTAL
Ddd*edit_displays_dialog*form2.marginWidth:   0
Ddd*edit_displays_dialog*form2.marginHeight:  0
Ddd*edit_displays_dialog*buttons.orientation: XmVERTICAL
Ddd*edit_displays_dialog*buttons.marginWidth:   0
Ddd*edit_displays_dialog*buttons.marginHeight:  0
Ddd*edit_displays_dialog.okLabelString:       Close

Ddd*edit_displays_dialog*contextHelpString:       \
@rm This is the @sl Display editor@rm.\n\
\n\
Select displays on the left; operations on the right.\n\
\n\
@tt \267 @bf New... @rm - create a new display.\n\
@tt \267 @bf Dependent... @rm - create a display \
dependent on the selected display.\n\
@tt \267 @bf Dereference @rm - dereference the selected display.\n\
@tt \267 @bf Show Detail @rm - show the details of all selected displays.\n\
@tt \267 @bf Hide Detail @rm - hide the details of all selected displays.\n\
@tt \267 @bf Enable @rm - enable all selected displays.\n\
@tt \267 @bf Disable @rm - disable all selected displays.\n\
@tt \267 @bf Delete @rm - delete all selected displays.


Ddd*new_display_dialog_popup.title: @DDD@: New Display
Ddd*new_display_dialog.selectionLabelString:	\
@rm Enter new display expression:

Ddd*new_display_dialog*contextHelpString:	\
\
@rm Please enter a display expression in the argument field.\n\
The current value of the expression is shown each time the program stops.\n\
\n\
Variables accessible are those of the lexical environment of the selected\n\
stack frame, plus all those whose scope is global or an entire file.\n\
\n\
@tt $@sl NUM @rm gets previous value number @sl NUM@rm.\
  @tt $ @rm and @tt$$ @rm are the last two values.\n\
@tt $$@sl NUM @rm refers to @sl NUM@rm'th value back from the last one.\n\
Names starting with @tt$ @rm refer to registers\
 (with the values they would have\n\
if the program were to return to the stack frame now selected, restoring\n\
all registers saved by frames farther in) or else to debugger\n\
``convenience'' variables (any such name not a known register).\n\
Use assignment expressions to give values to convenience variables.\n\
\n\
@tt{@sl TYPE@tt}@sl ADREXP @rm refers to a datum of data type\
 @sl TYPE@rm, located at address @sl ADREXP@rm.\n\
\n\
@tt @ \
 @rm is a binary operator for treating consecutive data objects\n\
anywhere in memory as an array. @sl FOO@tt@ @sl NUM @rm\
 gives an array whose first\n\
element is @sl FOO@rm, whose second element is stored in the space following\n\
where @sl FOO @rm is stored, etc. @sl FOO @rm must be an expression \
whose value\n\
resides in memory.\n\
\n\
As a special extension, you can display ranges of array elements\n\
by using the notation @tt[@sl FROM@tt ..@sl TO@tt]@rm,\n\
where @sl FROM @rm and @sl TO @rm are the positions of the first\n\
and last array element to display.\n\
Thus, @tt argv[0..9] @rm will create 10 new displays\
  @tt argv[0]@rm, @tt argv[1]@rm ... @tt argv[9]@rm.


Ddd*dependent_display_dialog_popup.title: @DDD@: Dependent Display
Ddd*dependent_display_dialog.selectionLabelString:	\
@rm Modify dependent display expression:

Ddd*dependent_display_dialog*contextHelpString:	\
\
@rm Please modify the display expression displayed in the argument field.\n\
The current value of the expression is shown each time the program stops.

Ddd*edit_displays_dialog*buttons*new.labelString:           New...
Ddd*edit_displays_dialog*buttons*new.contextHelpString:     \
@rm Create a new data display.

Ddd*edit_displays_dialog*buttons*dependent.labelString:     Dependent...
Ddd*edit_displays_dialog*buttons*dereference.contextHelpString:  \
@rm Create a data display dependent on the selected data display.

Ddd*edit_displays_dialog*buttons*dereference.labelString:   Dereference
Ddd*edit_displays_dialog*buttons*dereference.contextHelpString:  \
@rm Dereference the selected data display.

Ddd*edit_displays_dialog*buttons*show_detail.labelString:   Show Detail
Ddd*edit_displays_dialog*buttons*show_detail.contextHelpString:  \
@rm Show detail on the selected data display(s).

Ddd*edit_displays_dialog*buttons*hide_detail.labelString:   Hide Detail
Ddd*edit_displays_dialog*buttons*hide_detail.contextHelpString:  \
@rm Hide detail on the selected data display(s).

Ddd*edit_displays_dialog*buttons*disable.labelString:       Disable
Ddd*edit_displays_dialog*buttons*disable.contextHelpString:  \
@rm Disable the selected data display(s).

Ddd*edit_displays_dialog*buttons*enable.labelString:        Enable
Ddd*edit_displays_dialog*buttons*enable.contextHelpString:  \
@rm Enable the selected data display(s).

Ddd*edit_displays_dialog*buttons*disable.labelString:       Disable
Ddd*edit_displays_dialog*buttons*disable.contextHelpString:  \
@rm Disable the selected data display(s).

Ddd*edit_displays_dialog*buttons*delete.labelString:        Delete
Ddd*edit_displays_dialog*buttons*delete.contextHelpString:  \
@rm Delete the selected data display(s).



!-----------------------------------------------------------------------------
! Other Dialogs
!-----------------------------------------------------------------------------

Ddd*busy_display_dialog_popup.title: @DDD@: Debugger Busy
Ddd*busy_dialog.messageString:		\
@rm The debugger is busy!
Ddd*busy_dialog*contextHelpString:	\
@rm The debugger is busy on some commands.\n\
Please try again when the `@tt (gdb)@rm' or `@tt (dbx)@rm' \
prompt appears.\n\
You may also interrupt the current debugging command by selecting\n\
@bf Interrupt @rm from the @bf Program @rm menu.

Ddd*quit_dialog_popup.title: @DDD@: Debugger Still Busy
Ddd*quit_dialog.messageString:   \
@rm The debugger is still busy.  Exit anyway (and kill it)?
Ddd*quit_dialog*okLabelString:       Yes
Ddd*quit_dialog*cancelLabelString:   No
Ddd*quit_dialog*defaultButtonType:   XmDIALOG_OK_BUTTON
Ddd*quit_dialog*contextHelpString:	\
@rm The debugger is busy and does not react to the ``quit'' command.\n\
Maybe the debugged process is still running.\n\
\n\
Before killing a running debugger, you should try to interrupt it\n\
(by selecting @bf Interrupt @rm from the @bf Program @rm menu).

Ddd*exited_dialog_popup.title: @DDD@: Debugger Exited
Ddd*exited_dialog.messageString:   \
@rm The debugger exited normally.
Ddd*exited_dialog*okLabelString:   Exit
Ddd*exited_dialog*contextHelpString:	\
@rm The debugger exited normally.\n\
You may wish to examine its final output before exiting @DDD@.

Ddd*terminated_dialog_popup.title: @DDD@: Hasta la Vista
Ddd*terminated_dialog.messageString:   \
@rm The debugger terminated abnormally.
Ddd*terminated_dialog*okLabelString:   Exit
Ddd*terminated_dialog*contextHelpString:	\
@rm The debugger terminated abnormally.\n\
You may wish to examine its final output before exiting @DDD@.

Ddd*yn_dialog_popup.title: @DDD@: Debugger Question
Ddd*yn_dialog*okLabelString:       Yes
Ddd*yn_dialog*cancelLabelString:   No
Ddd*yn_dialog*defaultButtonType:   XmDIALOG_OK_BUTTON
Ddd*yn_dialog*contextHelpString:	\
@rm This is a debugger question.\n\
For more details, consult the debugger documentation.

Ddd*gdb_message_dialog_popup.title: @DDD@: Debugger Message
Ddd*gdb_message_dialog*contextHelpString:	\
@rm This is a debugger message.\n\
For more details, consult the debugger documentation.

Ddd*confirm_overwrite_dialog_popup.title: @DDD@: File Exists
Ddd*confirm_overwrite_dialog*messageString:       \
@rm Overwrite existing file?
Ddd*confirm_overwrite_dialog*okLabelString:       Yes
Ddd*confirm_overwrite_dialog*cancelLabelString:   No
Ddd*confirm_overwrite_dialog*defaultButtonType:   XmDIALOG_CANCEL_BUTTON
Ddd*confirm_overwrite_dialog*contextHelpString:	\
@rm The file already exists.\n\
Click on @bf Yes @rm to overwrite the existing file.

Ddd*save_options_dialog_popup.title: @DDD@: Save Options
Ddd*save_options_dialog.messageString:   \
@rm Startup @DDD@ options were modified.\n\
Save them for the next @DDD@ invocation?
Ddd*save_options_dialog*okLabelString:       Yes
Ddd*save_options_dialog*cancelLabelString:   No
Ddd*save_options_dialog*defaultButtonType:   XmDIALOG_OK_BUTTON
Ddd*save_options_dialog*contextHelpString:	\
@rm You have changed some @DDD@ startup options\n\
(using the @bf Options @rm menu).\n\
To save them for the next @DDD@ invocation, click on @bf Yes@rm.\n\
To discard the changes, click on @bf No@rm.


!-----------------------------------------------------------------------------
! Messages
!-----------------------------------------------------------------------------

Ddd*source_file_error_popup.title: @DDD@: No Source
Ddd*source_file_error*contextHelpString:	\
@rm The given source file could not be loaded.

Ddd*remote_file_error_popup.title: @DDD@: No Remote Source
Ddd*remote_file_error*contextHelpString:	\
@rm The given source file could not be loaded from the remote host.\n\
This message is also caused by attempting to load an empty source file.

Ddd*source_file_from_gdb_warning_popup.title: @DDD@: Source From Debugger
Ddd*source_file_from_gdb_warning*contextHelpString:	\
@rm The given source file could not be loaded directly.\n\
Instead, the source was obtained from the debugger, via the ``list'' command.

Ddd*source_trunc_error_popup.title: @DDD@: Source Truncated
Ddd*source_trunc_error*contextHelpString:	\
@rm The current source file was not be loaded entirely.

Ddd*source_position_error_popup.title: @DDD@: No Current Position
Ddd*source_position_error*contextHelpString:	\
@rm The current execution position is not in the displayed source file.\n\
This may be true for two reasons:\n\
- The debugged process is not running, or\n\
- The debugged process has stopped in a location without source file.\n\
In the latter case, try the `directory' command to specify\n\
a directory where source files can be found.

Ddd*source_find_error_popup.title: @DDD@: Not Found
Ddd*source_find_error*contextHelpString:	\
@rm The given argument @bf () @rm can not be found in the source text.

Ddd*no_source_error_popup.title: @DDD@: No Source
Ddd*no_source_error*contextHelpString:	\
@rm There is no current source text in which to search.

Ddd*no_such_line_error_popup.title: @DDD@: No Such Line
Ddd*no_such_line_error*contextHelpString:	\
@rm There is no such line in the current source text.

Ddd*no_such_breakpoint_error_popup.title: @DDD@: No Such Breakpoint
Ddd*no_such_breakpoint_error*contextHelpString:	\
@rm There is no such breakpoint in the current program.

Ddd*no_completion_error_popup.title: @DDD@: No Completion
Ddd*no_completion_error*contextHelpString:	\
@rm Command and argument completion is not supported by your debugger.\n\
\n\
Command completion relies on the GDB `@tt complete@rm' command,\n\
which is present in GDB 4.13 and later.

Ddd*print_empty_graph_error.title: @DDD@: Nothing to Print
Ddd*print_empty_graph_error*contextHelpString:	\
@rm There is nothing to print.\n\
The printing has been cancelled.

Ddd*print_failed_error.title: @DDD@: Printing Failed
Ddd*print_failed_error*contextHelpString:	\
@rm The file holding the graph picture could not be written.\n\
The printing has been cancelled.

Ddd*tty_exec_error_popup.title: @DDD@: No Execution TTY
Ddd*tty_exec_error*contextHelpString:	\
@rm The terminal emulator for the execution window\n\
could not be invoked.  The debugged process will execute in the\n\
Command Window instead.\n\
\n\
Please verify the contents of the @bf .termCommand @rm resource\n\
in the @DDD@ application defaults file.

Ddd*tty_command_error_popup.title: @DDD@: TTY Failed
Ddd*tty_command_error*contextHelpString:	\
@rm @DDD@ sent a `tty' command to the debugger in order to redirect the I/O\n\
of the debugged process to the execution window.  This command failed.\n\
\n\
@DDD@ will now redirect the process I/O explicitly.  This means that\n\
the command window remains the controlling terminal.

Ddd*history_save_error_popup.title: @DDD@: Save History Failed
Ddd*history_save_error*contextHelpString:	\
@rm The command history could not be saved.

Ddd*options_save_error_popup.title: @DDD@: Save Options Failed
Ddd*options_save_error*contextHelpString:	\
@rm The @DDD@ options could not be saved.

Ddd*startup_warning.title: @DDD@: New Startup Required
Ddd*startup_warning*contextHelpString: \
@rm This setting cannot be changed while @DDD@ is running.\n\
Please save options and restart @DDD@ to see the effects.

Ddd*print_warning.title: @DDD@: Print Command Output
Ddd*print_warning*contextHelpString:	\
@rm This is the output of your printing command.\n\
For more details, consult your system documentation.

Ddd*internal_error.title: @DDD@: Internal Error
Ddd*internal_error*contextHelpString: \
@rm Congratulations!  You have found a bug in @DDD@.\n\
You should better save your work immediately; @DDD@ may fail again soon.\n\
\n\
Please send a bug report to `@tt ddd-bugs@ ips.cs.tu-bs.de@rm',\n\
giving a subject like\n\
\n\
    @DDD@ @VERSION@ (@host@) gets fatal signal\n\
\n\
To enable us to fix the bug, you should include the following information:\n\
@tt \267 @rm What you were doing to get this message.  Report all the facts.\n\
@tt \267 @rm The @DDD@ configuration.  \
Run `@tt ddd --configuration@rm' to get it.\n\
See also the section ``Reporting Bugs'' in the @DDD@ manual.\n\
\n\
We thank you for your support.

Ddd*debugging_poem.title: @DDD@: Fixing Some Bugs on a Sunday Evening
Ddd*debugging_poem.okLabelString: Close
Ddd*debugging_poem.helpLabelString: Info
Ddd*debugging_poem.messageString: \
@Logo F@logo ixing @Logo S@logo ome @Logo B@logo ugs \
on a @Logo S@logo unday @Logo E@logo vening\n\
\n\
@rm Whose bugs these are I think I know,\n\
But now he works at 3DO;\n\
He will not see me working here\n\
To fix his code and make it go.\n\
\n\
The saner folk must think it queer\n\
To trace without the source code near\n\
After a launch and frozen mouse\n\
The weirdest stack crawl of the year.\n\
\n\
I give my nodding head a shake\n\
To see if I can stay awake\n\
The only other thing to do\n\
Is find some more coffeine to take.\n\
\n\
This bug is pretty hard to nip,\n\
But I have other ones to fix,\n\
And tons to go before we ship,\n\
And tons to go before we ship.

Ddd*debugging_poem*contextHelpString: \
@rm Written by David A. Lyons (dlyons@ apple.com), January 1994\n\
(with apologies to Robert Frost)\n\
\n\
Hey, it's fiction.  Close to reality in spirit,\n\
but does not refer to a specific project, bug, Sunday,\n\
or brand of soft drink.

Ddd*dungeon_collapse_error_popup.title: @DDD@: Dungeon Kaputt
Ddd*dungeon_collapse_error*contextHelpString:	\
@rm The DDD display dungeon has collapsed.\n\
Please verify your display dungeon database installation.\n\
See the DDD dungeon documentation for details.
