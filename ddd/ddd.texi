\input texinfo @c -*- texinfo -*-
@c $Id$
@c DDD Manual

@c Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
@c Written by Andreas Zeller <zeller@ips.cs.tu-bs.de>.
@c 
@c This file is part of DDD.
@c 
@c DDD is free software; you can redistribute it and/or modify it under
@c the terms of the GNU General Public License as published by the Free
@c Software Foundation; either version 2 of the License, or (at your
@c option) any later version.
@c 
@c DDD is distributed in the hope that it will be useful, but WITHOUT ANY
@c WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details. 
@c 
@c You should have received a copy of the GNU General Public License
@c along with DDD -- see the file COPYING.  If not, write to the Free
@c Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
@c MA 02111-1307, USA.
@c 
@c DDD is the data display debugger.
@c For details, see the DDD World-Wide-Web page, 
@c `http://www.cs.tu-bs.de/softech/ddd/',
@c or send a mail to the DDD developers <ddd@ips.cs.tu-bs.de>.

@c %**start of header
@setfilename ddd.info
@include config.texi
@settitle Debugging with @value{DDD}
@setchapternewpage odd
@defindex lb
@defindex cm
@c %**end of header

@iftex
@c @smallbook
@c @cropmarks
@end iftex

@finalout

@c !!set DDD manual's edition---not the same as DDD version!
@set EDITION First

@c !!set DDD manual's revision date
@set DATE 1999-01-01

@ifinfo
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.  zoo@cygnus.com is developing this facility.
@format
START-INFO-DIR-ENTRY
* DDD: (ddd).                     The Data Display Debugger.
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@c
@c
@ifinfo
This file documents @value{DDD}, the Data Display Debugger.

This is the @value{EDITION} Edition, @value{DATE}, of @cite{Debugging
with @value{DDD}} for @value{DDD} Version @value{VERSION}.

@format
Copyright (C) 1999 Technische Universit@"at Braunschweig, Germany.
Institut f@"ur Software
Abteilung Softwaretechnologie
B@"ultenweg 88
D-38092 Braunschweig
@sc{germany}

Phone: +49 531 391-7580
Fax: +49 531 391-8940
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de}

@value{DDD} and this manual are available via @*
@uref{http://www.cs.tu-bs.de/softech/ddd/, the @value{DDD} @sc{www} page}.
@end format

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifinfo

@titlepage
@sp -7
@title Debugging with @value{DDD}
@subtitle User's Guide and Reference Manual
@subtitle @value{EDITION} Edition, for @value{DDD} Version @value{VERSION}
@subtitle Last updated @value{DATE}
@sp 2
@center @image{PICS/dddlogo, 15cm}
@author Andreas Zeller
@page
@tex
{\parskip=0pt
\hfill (Send bugs and comments on @value{DDD} to ddd\@ips.cs.tu-bs.de.)\par
\hfill {\it Debugging with @value{DDD}}\par
\hfill \TeX{}info \texinfoversion\par
}
@end tex

@vskip 0pt plus 1filll
Copyright @copyright{} 1999 Technische Universit@"at Braunschweig, Germany
@sp 2
Published by @*
Technische Universit@"at Braunschweig @*
Abteilung Softwaretechnologie @*
B@"ultenweg 88 @*
D-38092 Braunschweig @*
@sc{germany} @*

Phone: +49 531 391-7580 @*
Fax: +49 531 391-8940 @*
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de} @*

@value{DDD} and this manual are available via 
@uref{http://www.cs.tu-bs.de/softech/ddd/, the @value{DDD} @sc{www} page}.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@page


@ifinfo

@node Top
@top Debugging with @value{DDD}

@end ifinfo


@ifinfo
This is the @value{EDITION} Edition of @cite{Debugging with
@value{DDD}}, @value{DATE}, for @value{DDD} Version @value{VERSION}.

Copyright @copyright{} 1999 Technische Universit@"at Braunschweig @*
Institut f@"ur Software @*
Abteilung Softwaretechnologie @*
B@"ultenweg 88 @*
D-38092 Braunschweig @*
@sc{germany} @*

Phone: +49 531 391-7580 @*
Fax: +49 531 391-8940 @*
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de}

@value{DDD} and this manual are available via the
@uref{http://www.cs.tu-bs.de/softech/ddd/, @value{DDD} WWW page}.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.

@end ifinfo

@menu
* Summary::                     
* Invocation::                  
* Basics::                      
* Navigating::                  
* Breakpoints and Watchpoints::  
* Running the Program::         
* Examining Data::              
* Plotting Data::               
* Machine-Level Debugging::     
* Editing and Recompiling::     
* Entering Commands::           
* Customizing DDD::             
* Debugger Settings::           
* User-Defined Actions::        
* Quitting DDD::                
* Persistent Sessions::         
* Integrating DDD::             
* Using DDD with LessTif::      
* Remote Debugging::            
* Root Debugging::              
* Resources::                   
* Options::                     
* Actions::                     
* Images::                      
* Environment::                 
* Files::                       
* References::                  
* Limitations::                 
* Reporting Bugs::              
* History::                     
* Extending::                   
* Support::                     
* License::                     
* Printing this Manual::        
* Copyright::                   
* Label Index::                 
* Key Index::                   
* Command Index::               
* Concept Index::               
@end menu

@node Summary
@unnumbered Summary of @value{DDD}

The purpose of a debugger such as @value{DDD} is to allow you to see
what is going on ``inside'' another program while it executes---or what
another program was doing at the moment it crashed.

@value{DDD} can do four main kinds of things (plus other things in
support of these) to help you catch bugs in the act:
@itemize @bullet
@item
Start your program, specifying anything that might affect its behavior.
@item
Make your program stop on specified conditions.
@item
Examine what has happened, when your program has stopped.
@item
Change things in your program, so you can experiment with correcting the
effects of one bug and go on to learn about another.
@end itemize

``Classical'' @sc{unix} debuggers such as the @sc{gnu} debugger
(@sc{gdb}) provide a command-line interface and a multitude of commands
for these and other debugging purposes.  @value{DDD} is a comfortable
@emph{graphical user interface} around an inferior command-line
debugger, such as @sc{gdb}, @sc{dbx}, @sc{xdb}, @sc{jdb}, the Python
debugger, or the Perl debugger.
@cindex Inferior debugger
@cindex Command-line debugger


@menu
* Free Software::               
* Contributors::                
@end menu

@node Free Software
@unnumberedsec Free software

@value{DDD} is @dfn{free software}, protected by the @sc{gnu} General
Public License (GPL).  The GPL gives you the freedom to copy or adapt a
licensed program---but every person getting a copy also gets with it the
freedom to modify that copy (which means that they must get access to
the source code), and the freedom to distribute further copies.  Typical
software companies use copyrights to limit your freedoms; the Free
Software Foundation uses the GPL to preserve these freedoms.

Fundamentally, the General Public License is a license which says that
you have these freedoms and that you cannot take these freedoms away
from anyone else.


@node Contributors
@unnumberedsec Contributors to GDB

Dorothea L@"utkehaus and Andreas Zeller were the original authors of
@value{DDD}.  Many others have contributed to its development.  The
files @file{ChangeLog} and @file{THANKS} in the @value{DDD} distribution
approximates a blow-by-blow account.


@node Invocation
@chapter Getting In and Out of @value{DDD}

This chapter discusses how to start @value{DDD}, and how to get out of it.
The essentials are: 
@itemize @bullet
@item 
type @samp{@value{ddd}} to start DDD.
@item 
Use @samp{File @result{} Exit} or @kbd{Ctrl+Q} to exit.
@kindex Ctrl+Q
@end itemize

@menu
* Invoking DDD::                
@end menu

@node Invoking DDD
@section Invoking @value{DDD}

Normally, you can run @value{DDD} by invoking the program
@code{@value{ddd}}.

You can also run @code{@value{DDD}} with a variety of arguments and
options, to specify more of your debugging environment at the outset.

The most usual way to start @value{DDD} is with one argument, specifying
an executable program:

@example
@value{ddd} @var{program}
@end example

@noindent
If you use @sc{gdb}, @sc{dbx}, or @sc{xdb} as inferior debuggers, you
can also start with both an executable program and a core file
specified:

@example
@value{ddd} @var{program} @var{core}
@end example

You can, instead, specify a process ID as a second argument, if you want
to debug a running process:

@example
@value{ddd} @var{program} 1234
@end example

@noindent
would attach @value{DDD} to process @code{1234} (unless you also have a file
named @file{1234}; @value{DDD} does check for a core file first).


@menu
* Choosing an inferior debugger::  
* Debugger-Specific Options::   
* X Options::                   
@end menu

@node Choosing an inferior debugger
@subsection Choosing an inferior debugger

By default, @value{DDD} determines the inferior debugger automatically.
Use

@example
@value{ddd} --gdb @var{program}
@end example

@example
@value{ddd} --dbx @var{program}
@end example

@example
@value{ddd} --xdb @var{program}
@end example

@example
@value{ddd} --jdb @var{program}
@end example

@example
@value{ddd} --pydb @var{program}
@end example

@example
@value{ddd} --perl @var{program}
@end example

to run @sc{gdb}, @sc{dbx}, @sc{xdb}, @sc{jdb}, @sc{pydb} or Perl as
inferior debugger.


@node Debugger-Specific Options
@subsection Debugger-Specific Options

@menu
* GDB Options::                 
* DBX Options::                 
* XDB Options::                 
* JDB Options::                 
* PYDB Options::                
* Perl Options::                
@end menu

@node GDB Options
@subsubsection GDB Options

@node DBX Options
@subsubsection DBX Options

@node XDB Options
@subsubsection XDB Options

@node JDB Options
@subsubsection JDB Options

@node PYDB Options
@subsubsection PYDB Options

@node Perl Options
@subsubsection Perl Options


@node X Options
@subsection X Options



@node Basics
@chapter DDD Basics

@menu
* Windows::                     
* Command Tool::                
* Tool Bar::                    
* Tool Bar Buttons::            
* Getting Help::                
@end menu

@node Windows
@section The @value{DDD} Windows

@value{DDD} is composed of three main windows:

@itemize @bullet
@item
The @emph{Data Window} shows the current data of the debugged program.
@item
The @emph{Source Window} shows the current source code of the debugged
program.
@item
The @emph{Debugger Console} accepts debugger commands and shows debugger
messages.
@end itemize

@ifnotinfo
@sp 1
@center @image{PICS/ddd-all, 15cm}
@sp 1
@end ifnotinfo

By default, @value{DDD} places these main windows stacked into one
single top-level window, but @value{DDD} can also be configured to
treat each one separately.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-separate, 15cm}
@sp 1
@end ifnotinfo

Besides these main windows, there are some other optional windows:
@itemize @bullet
@item
The @emph{Command Tool} offers buttons for frequently used commands.
It is usually placed on the source window.
@item
The @emph{Machine Code Window} shows the current machine code.  It is
usually placed beneath the current source.
@item
The @emph{Execution Window} shows the input and output of the debugged
program.
@end itemize

@value{DDD} also has several temporary @emph{dialogs} for showing and
entering additional information.


@menu
* Command Tool::                
* Tool Bar::                    
@end menu

@node Command Tool
@section The Command Tool

The command tool is a small window containing frequently used
@value{DDD} commands.  It can be moved around on top of the @value{DDD}
windows, but it can also be placed besides them.  

By default, the command tool @emph{sticks} to the @value{DDD} source
window: Whenever you move the @value{DDD} source window, the command
tool follows such that the distance between source window and command
tool remains the same.  By default, the command tool is also
@emph{auto-raised}, such that it stays on top of other @value{DDD}
windows.

The command tool can be configured to appear as a command tool bar above
the source window; see @samp{Edit @result{} Preferences @result{} Source
@result{} Tool Buttons Location} for details.

Whenever you save @value{DDD} state, @value{DDD} also saves the distance
between command tool and source window, such that you can select your
own individual command tool placement.  To move the command tool to its
saved position, use @samp{View @result{} Command Tool}.


@menu
* Command Tool Buttons::        
@end menu

@node Command Tool Buttons
@subsection The Command Tool Buttons

@ifnotinfo
@sp 1
@center @image{PICS/ddd-tool, 15cm}
@sp 1
@end ifnotinfo

These are the buttons of the command tool.  Note that not all buttons
may be available, depending on the capabilities of the inferior
debugger.

@table @code
@item Run
@lbindex Run
Start program execution.  When you click this button, your program will
begin to execute immediately.  @xref{Starting Program Execution}, for
details.

@item Interrupt
@lbindex Interrupt
Interrupt program execution.  This is equivalent to sending an interrupt
signal to the process.  @xref{Stopping the Program}, for details.

@item Step
@lbindex Step
Continue running your program until control reaches a different source
line, then stop it and return control to @value{DDD}.  @xref{Resuming
Execution}, for details.

@item Stepi
@lbindex Stepi
Execute one machine instruction, then stop and return to @value{DDD}.
@xref{Machine Code Execution}, for details.

@item Next
@lbindex Next
Continue to the next source line in the current (innermost) stack
frame.  This is similar to @samp{Step}, but function calls that appear
within the line of code are executed without stopping.
@xref{Resuming Execution}, for details.

@item Nexti
@lbindex Nexti
Execute one machine instruction, but if it is a function call,
proceed until the function returns.
@xref{Machine Code Execution}, for details.

@item Until
@lbindex Until
Continue running until a source line past the current line, in the
current stack frame, is reached.  @xref{Resuming Execution}, for details.

@item Finish
@lbindex Finish
Continue running until just after function in the selected stack frame
returns.  Print the returned value (if any).  @xref{Resuming Execution},
for details.

@item Up
@lbindex Up
Select the stack frame (i.e. the function) that called this one.  This
advances toward the outermost frame, to higher frame numbers, to frames
that have existed longer.  @xref{Examining the Stack}, for details.

@item Down
@lbindex Down
Select the stack frame (i.e. the function) that was called by this one.
This advances toward the innermost frame, to lower frame numbers, to
frames that were created more recently.  @xref{Examining the Stack}, for 
details.

@item Undo
@lbindex Undo
Undo the most recent action.  Almost all commands can be undone this
way.  @xref{Undoing Commands}, for details.

@item Redo
@lbindex Redo
Redo the action most recently undone.  Every command undone can be
redone this way.  @xref{Undoing Commands}, for details.

@item Edit
@lbindex Edit
Invoke an editor for the current source file.  @xref{Editing Source
Code}, for details.

@item Make
@lbindex Make
Run the @code{make} program with the most recently given arguments.
@xref{Recompiling}, for details.
@end table


@node Tool Bar
@section The Tool Bar

Some @value{DDD} commands require an @emph{argument}.  This argument
is specified in the @emph{argument field}, labeled @samp{():}.
Basically, there are four ways to set arguments:
@itemize @bullet
@item
You can @emph{key in} the argument manually.
@item
You can @emph{paste} the current selection into the argument field
(typically using @kbd{mouse button 2}).  To clear old contents
beforehand, click on the @samp{():} label.
@item
You can @emph{select an item} from the source and data windows.  This
will automatically copy the item to the argument field.
@item
You can select a @emph{previously used argument} from the drop-down
menu at the right of the argument field.
@end itemize

Using @sc{gdb} and Perl, the argument field provides a completion
mechanism.  You can enter the first few characters of an item an press
the @key{TAB} key to complete it.  Pressing @key{TAB} again shows
alternative completions.
@kindex TAB

After having entered an argument, you can select one of the buttons on
the right.  Most of these buttons also have menus associated with them;
this is indicated by a small arrow in the upper right corner.  Pressing
and holding @emph{mouse button 1} on such a button will pop up a menu
with further operations.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-toolbar, 15cm}
@sp 1
@end ifnotinfo


@node Tool Bar Buttons
@section The Tool Bar Buttons

...

@node Getting Help
@section Getting Help

@value{DDD} has an extensive on-line help system.  Here's how to get
help while working with @value{DDD}.

@menu
* Button Tips::                 
* The Status Line::             
* Context-Sensitive Help::      
* Help on Debugger Commands::   
* Are You Stuck?::              
* Undoing Commands::            
@end menu

@node Button Tips
@subsection Button Tips

@cindex Button tip
@cindex Help on buttons

You can get a short help text on most @value{DDD} buttons by simply
moving the mouse pointer on it and leave it there.  After a second, a
small window (called @emph{button tip}) pops up, giving a hint on the
button's meaning.  The button tip disappears as soon as you move the
mouse pointer to another item.


@node The Status Line
@subsection The Status Line

The status line also displays information about the currently selected
item.  By clicking on the status line, you can redisplay the most
recent messages.


@cindex Status line

@node Context-Sensitive Help
@subsection Context-Sensitive Help

@cindex Help on items
@cindex Context-sensitive help

You can get detailed help on any visible @value{DDD} item.  Just
point on the item you want help and press the @samp{F1} key.  This
pops up a detailed help text.
@kindex F1

The @value{DDD} dialogs all contain @samp{Help} buttons that give
detailed information about the dialog.
@lbindex Help


@node Help on Debugger Commands
@subsection Help on Debugger Commands

@cindex Help on commands
@cmindex help

You can get help on debugger commands by entering @samp{help} at the
debugger prompt.

@xref{Entering Commands}, below, for details on entering commands.


@node Are You Stuck?
@subsection Are You Stuck?

@lbindex What Now?
@kindex Ctrl+F1

If you are stuck, try @samp{Help @result{} What Now?} (the @samp{What
Now} item in the @samp{Help} menu) or press @key{Ctrl+F1}.  Depending on
the current state, @value{DDD} will give you some hints on what you can
do next.


@node Undoing Commands
@subsection Undoing Commands

@lbindex Undo
@lbindex Redo
@kindex Ctrl+Z
@kindex Ctrl+Y
@cindex Undo
@cindex Redo

And if, after all, you made a mistake, don't worry.  Almost every
@value{DDD} command can be undone, using @samp{Edit @result{} Undo} or
the @samp{Undo} button on the command tool.  

Likewise, @samp{Edit @result{} Redo} repeats the command most recently
undone.



@node Navigating
@chapter Navigating through the Code

This chapter discusses how to access resources from within @value{DDD}.


@menu
* Opening Files::               
* Looking up Items::            
@end menu

@node Opening Files
@section Opening Files

@cindex Files, opening

If you did not invoke @value{DDD} specifying a program to be debugged,
you can use the @samp{File} menu to open programs, core dumps and
sources.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-open, 15cm}
@sp 1
@end ifnotinfo


@menu
* Opening Programs::            
* Opening Core Dumps::          
* Opening Source Files::        
@end menu

@node Opening Programs
@subsection Opening Programs

@cindex Program, opening
@cindex Class, opening

To open a program to be debugged, select @samp{File @result{} Open
Program}.@footnote{With @sc{xdb} and some @sc{dbx} versions, the
debugged program must be specified upon invocation and cannot be changed
at run time.}

In @sc{jdb}, select @samp{File @result{} Open Class} instead.  This gives
you a list of available classes to choose from.

To re-open a recently debugged program or class, select @samp{File
@result{} Open Recent} and choose a program or class from the list.


@node Opening Core Dumps
@subsection Opening Core Dumps

@cindex Core dump, opening

If a previous run of the program has crashed and you want to find out
why, you can have @value{DDD} examine its @dfn{core
dump}.@footnote{@sc{jdb}, @sc{pydb}, and @sc{perl} do not support core
dumps.}

To open a core dump for the program, select @samp{File @result{} Open
Core Dump}.  Before @samp{Open Core Dump}, you should first use
@samp{File @result{} Open Program} to specify the program that generated
the core dump and to load its symbol table.


@node Opening Source Files
@subsection Opening Source Files

@cindex Source file, opening

To open a source file of the debugged program, select @samp{File
@result{} Open Source}.

@itemize @bullet{}
@item
Using @sc{gdb}, this gives you a list of the sources used for
compiling your program.
@item
Using other inferior debuggers, this gives you a list of accessible
source files, which may or may not be related to your program.
@end itemize



@node Looking up Items
@section Looking up Items

As soon as the source of the debugged program is available, the
@emph{source window} displays its current source text.  (If a source
text cannot be found, use @samp{Edit @result{} GDB Settings} to specify
source text directories.)

In the source window, you can lookup and examine function and variable
definitions as well as search for arbitrary occurrences in the source
text.


@menu
* Looking up Definitions::      
* Textual Search::              
* Looking up Previous Locations::  
@end menu

@node Looking up Definitions
@subsection Looking up Definitions

If you wish to lookup a specific function or variable definition whose
name is visible in the source text, click with @emph{mouse button 1} on
the function or variable name.  The name is copied to the argument
field.  Alter the name if desired and click on the @samp{Lookup} button
to find its definition.
@lbindex Lookup

@ifnotinfo
@sp 1
@center @image{PICS/ddd-source-popup, 15cm}
@sp 1
@end ifnotinfo

As a faster alternative, you can simply press @emph{mouse button 3} on the
function name and select the @samp{Lookup} item from the source popup
menu.

As an even faster alternative, you can also double-click on a function 
call (an identifier followed by a @samp{(} character) to lookup the
function definition.


@node Textual Search
@subsection Textual Search

If the item you wish to search is visible in the source text, click with
@emph{mouse button 1} on it.  The identifier is copied to the argument
field.  Click on the @samp{Find} button to find following occurrences
and on @samp{Find @result{} Find << ()} to find previous occurrences.
@lbindex Find

By default, @value{DDD} finds only complete words.  To search for
arbitrary substrings, change the value of the @samp{Source @result{}
Find Words Only} option.
@lbindex Find Words Only


@node Looking up Previous Locations
@subsection Looking up Previous Locations

After looking up a location, use @samp{Edit @result{} Undo} (or the
@samp{Undo} button on the command tool) to go back to the original
locations.  @samp{Edit @result{} Redo} brings you back again to the
location you looked for.
@lbindex Undo
@lbindex Redo

@ifnotinfo
@sp 1
@center @image{PICS/ddd-source, 15cm}
@sp 1
@end ifnotinfo


@node Breakpoints and Watchpoints
@chapter Breakpoints and Watchpoints

The principal purposes of using a debugger are so that you can stop your
program before it terminates; or so that, if your program runs into
trouble, you can investigate and find out why.

Inside @value{DDD}, your program may stop for any of several reasons,
such as a signal, a breakpoint, or reaching a new line after a
@value{DDD} command such as @samp{Step}.  You may then examine and
change variables, set new breakpoints or remove old ones, and then
continue execution.

A @dfn{breakpoint} makes your program stop whenever a certain point in
the program is reached.  For each breakpoint, you can add conditions to
control in finer detail whether your program stops.
@cindex Breakpoint

A @dfn{watchpoint} is a special breakpoint that stops your program when
the value of an expression changes.

@menu
* Breakpoints::                 
* Watchpoints::                 
@end menu

@node Breakpoints
@section Breakpoints

@menu
* Setting Breakpoints by Location::  
* Setting Breakpoints by Name::  
* Setting Regexp Breakpoints::  
* Disabling Breakpoints::       
* Temporary Breakpoints::       
* Deleting Breakpoints::        
* Editing Breakpoint Properties::  
* Breakpoint Conditions::       
* Breakpoint Ignore Counts::    
* Breakpoint Commands::         
* Moving and Copying Breakpoints::  
* Looking up Breakpoints::      
* Editing all Breakpoints::     
* More Breakpoint Features::    
@end menu

@node Setting Breakpoints by Location
@subsection Setting Breakpoints by Location

Breakpoints are set at a specific location in the program.

If the source line is visible, click with @emph{mouse button 1} on the
left of the source line and then on the @samp{Break} button.
@lbindex Break

As a faster alternative, you can simply press @emph{mouse button 3} on
the left of the source line and select the @samp{Set Breakpoint} item
from the line popup menu.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-line-popup, 15cm}
@sp 1
@end ifnotinfo

As an even faster alternative, you can simply double-click on the left
of the source line to set a breakpoint.

As yet another alternative, you can select @samp{Source @result{} Edit
Breakpoints}.  Click on the @samp{Break} button and enter the location.
@lbindex Break

(If you find this number of alternatives confusing, be aware that
@value{DDD} users fall into three categories, which must all be
supported.  @emph{Novice users} explore @value{DDD} and may prefer to
use one single mouse button.  @emph{Advanced users} know how to use
shortcuts and prefer popup menus.  @emph{Experienced users} prefer the
command line interface.)

Breakpoints are indicated by a plain stop sign, or as @samp{#@var{n}},
where @emph{n} is the breakpoint number.  A greyed out stop sign (or
@samp{_@var{n}_}) indicates a disabled breakpoint.  A stop sign with a
question mark (or @samp{?@var{n}?}) indicates a conditional breakpoint
or a breakpoint with an ignore count set.

If you set a breakpoint by mistake, use @samp{Edit @result{} Undo} to delete
it again.


@node Setting Breakpoints by Name
@subsection Setting Breakpoints by Name

If the function name is visible, click with @emph{mouse button 1} on the
function name.  The function name is then copied to the argument field.
Click on the @samp{Break} button to set a breakpoint there.

As a shorter alternative, you can simply press @emph{mouse button 3} on
the function name and select the @samp{Break at} item from the popup
menu.

As yet another alternative, you can click on @samp{Break@dots{}} from
the Breakpoint editor (invoked through @samp{Source @result{} Edit
Breakpoints}) and enter the function name.


@node Setting Regexp Breakpoints
@subsection Setting Regexp Breakpoints

Using @sc{gdb}, you can also set a breakpoint on all functions that
match a given string.  @samp{Break @result{} Set Breakpoints at Regexp
()} sets a breakpoint on all functions whose name matches the
@emph{regular expression} given in @samp{()}.  Here are some examples:

@itemize @bullet
@item
To set a breakpoint on every function that starts with @samp{Xm}, set
@samp{()} to @samp{^Xm}.
@item
To set a breakpoint on every member of class @samp{Date}, set
@samp{()} to @samp{^Date::}.
@item
To set a breakpoint on every function whose name contains
@samp{_fun}, set @samp{()} to @samp{_fun}.
@item
To set a breakpoint on every function that ends in @samp{_test}, 
set @samp{()} to @samp{_test$}.
@end itemize


@node Disabling Breakpoints
@subsection Disabling Breakpoints

Rather than deleting a breakpoint or watchpoint, you might prefer to
@dfn{disable} it.  This makes the breakpoint inoperative as if it had
been deleted, but remembers the information on the breakpoint so that
you can @dfn{enable} it again later.@footnote{@sc{jdb} does not support
breakpoint disabling.}

To disable a breakpoint, press @emph{mouse button 3} on the breakpoint
symbol and select the @samp{Disable Breakpoint} item from the breakpoint
popup menu.  To enable it again, select @samp{Enable Breakpoint}.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-bp-popup, 15cm}
@sp 1
@end ifnotinfo

As an alternative, you can select the breakpoint and click on
@samp{Disable} or @samp{Enable} in the Breakpoint editor (invoked
through @samp{Source @result{} Edit Breakpoints}.
@lbindex Disable
@lbindex Enable

Disabled breakpoints are indicated by a grey stop sign, or
@samp{_@var{n}_}, where @var{n} is the breakpoint number.

The @samp{Disable Breakpoint} item is also accessible via the
@samp{Clear} button.  Just press and hold @emph{mouse button 1} on the
button to get a popup menu.
@lbindex Clear


@node Temporary Breakpoints
@subsection Temporary Breakpoints

A @emph{temporary breakpoint} is immediately deleted as soon as it is
reached.@footnote{@sc{jdb} does not support temporary breakpoints.}

To set a temporary breakpoint, press @emph{mouse button 3} on the left
of the source line and select the @samp{Set Temporary Breakpoint} item
from the popup menu.
@lbindex Set Temporary Breakpoint

As a faster alternative, you can simply double-click on the left of the
source line while holding @key{Ctrl}.

Temporary breakpoints are convenient to make the program continue up to
a specific location: just set the temporary breakpoint at this location
and continue execution.

The @samp{Continue Until Here} item from the popup menu sets a temporary
breakpoint on the left of the source line and immediately continues
execution.  Execution stops when the temporary breakpoint is reached.
@lbindex Continue Until Here

The @samp{Set Temporary Breakpoint} and @samp{Continue Until Here} items
are also accessible via the @samp{Break} button.  Just press and hold
@emph{mouse button 1} on the button to get a popup menu.



@node Deleting Breakpoints
@subsection Deleting Breakpoints

To delete a visible breakpoint, click with @emph{mouse button 1} on the
breakpoint.  The breakpoint location is copied to the argument field.
Click on the @samp{Clear} button to delete all breakpoints there.
@lbindex Clear

If the function name is visible, click with @emph{mouse button 1} on the
function name.  The function name is copied to the argument field.
Click on the @samp{Clear} button to clear all breakpoints there.

As a faster alternative, you can simply press @emph{mouse button 3} on
the breakpoint and select the @samp{Delete Breakpoint} item from the
popup menu.
@lbindex Delete Breakpoint

As yet another alternative, you can select the breakpoint and click on
@samp{Delete} in the Breakpoint editor (invoked through
@samp{Source @result{} Edit Breakpoints}).
@lbindex Delete

As an even faster alternative, you can simply double-click on the
breakpoint while holding @key{Ctrl}.


@node Editing Breakpoint Properties
@subsection Editing Breakpoint Properties


You can change all properties of a breakpoint by pressing @emph{mouse
button 3} on the breakpoint symbol and select @samp{Properties}
from the breakpoint popup menu.  This will pop up a dialog showing the 
current properties of the selected breakpoint.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-bp-properties, 15cm}
@sp 1
@end ifnotinfo

As an even faster alternative, you can simply double-click on the
breakpoint.

@itemize @bullet
@item
Click on @samp{Lookup} to move the cursor to the breakpoint's
location.
@item
Click on @samp{Enable} to enable the breakpoint.
@item
Click on @samp{Disable} to disable the breakpoint.
@item
Click on @samp{Temp} to make the breakpoint temporary.@footnote{@sc{gdb}
has no way to make a temporary breakpoint non-temporary again.}
@item
Click on @samp{Delete} to delete the breakpoint.
@end itemize


@node Breakpoint Conditions
@subsection Breakpoint Conditions

The simplest sort of breakpoint breaks every time your program reaches a
specified place.  You can also specify a @dfn{condition} for a
breakpoint.  A condition is just a Boolean expression in your
programming language.  A breakpoint with a condition evaluates the
expression each time your program reaches it, and your program stops
only if the condition is @emph{true}.

This is the converse of using assertions for program validation; in that
situation, you want to stop when the assertion is violated--that is,
when the condition is false.  In C, if you want to test an assertion
expressed by the condition @var{assertion}, you should set the condition
@samp{!@var{assertion}} on the appropriate breakpoint.

Break conditions can have side effects, and may even call functions in
your program.  This can be useful, for example, to activate functions
that log program progress, or to use your own print functions to format
special data structures. The effects are completely predictable unless
there is another enabled breakpoint at the same address.  (In that case,
@value{DDD} might see the other breakpoint first and stop your program
without checking the condition of this one.)

Note that breakpoint commands are usually more convenient and flexible
for the purpose of performing side effects when a breakpoint is reached.
@xref{Breakpoint Commands}, for details.


@node Breakpoint Ignore Counts
@subsection Breakpoint Ignore Counts

A special case of a breakpoint condition is to stop only when the
breakpoint has been reached a certain number of times.  This is so
useful that there is a special way to do it, using the @dfn{ignore
count} of the breakpoint.  Every breakpoint has an ignore count, which
is an integer.  Most of the time, the ignore count is zero, and
therefore has no effect.  But if your program reaches a breakpoint whose
ignore count is positive, then instead of stopping, it just decrements
the ignore count by one and continues.  As a result, if the ignore count
value is @var{n}, the breakpoint does not stop the next @var{n} times
your program reaches it.

In the field @samp{Ignore Count} of the @samp{Breakpoint Properties}
panel, you can specify the breakpoint ignore count.@footnote{@sc{jdb},
Perl and some @sc{dbx} variants do not support breakpoint ignore
counts.}

If a breakpoint has a positive ignore count and a condition, the
condition is not checked.  Once the ignore count reaches zero,
@value{DDD} resumes checking the condition.


@node Breakpoint Commands
@subsection Breakpoint Commands

You can give any breakpoint (or watchpoint) a series of @value{DDD}
commands to execute when your program stops due to that breakpoint.  For
example, you might want to print the values of certain expressions, or
enable other breakpoints.@footnote{@sc{jdb}, PYDB, and some @sc{dbx}
variants do not support breakpoint commands.}

Using the @samp{Commands} buttons of the @samp{Breakpoint Properties}
panel, you can edit commands to be executed when the breakpoint is hit.

To edit breakpoint commands, click on @samp{Edit >>} and enter the
commands in the commands editor.  When done with editing, click on
@samp{Edit <<} to close the commands editor.

Using @sc{gdb}, you can also @emph{record} a command sequence to be
executed.  To record a command sequence, follow these steps:
@itemize @bullet
@item
Click on @samp{Record} to begin the recording of the breakpoint commands.
@item
Now interact with @value{DDD}.  While recording, @value{DDD} does not
execute commands, but simply records them to be executed when the
breakpoint is hit.  The recorded debugger commands are shown in the
debugger console.
@item
To stop the recording, click on @samp{End} or enter @samp{end} at
the @sc{gdb} prompt.  To @emph{cancel} the recording, click on
@samp{Interrupt} or press @key{ESC}.
@item
You can edit the breakpoint commands just recorded using @samp{Edit >>}.
@end itemize


@node Moving and Copying Breakpoints
@subsection Moving and Copying Breakpoints

To move a breakpoint to a different location, press @emph{mouse button
1} on the stop sign and drag it to the desired location.  This is
equivalent to deleting the breakpoint at the old location and setting a
breakpoint at the new location.  The new breakpoint inherits all
properties of the old breakpoint, except the breakpoint number.

To copy a breakpoint to a new location, press @key{Shift} while
dragging.

Please note: Dragging breakpoints is not possible when glyphs are
disabled.  Delete and set breakpoints instead.


@node Looking up Breakpoints
@subsection Looking up Breakpoints

If you wish to lookup a specific breakpoint, select @samp{Source
@result{} Edit Breakpoints @result{} Lookup}.  After selecting a
breakpoint from the list and clicking the @samp{Lookup} button, the
breakpoint location is displayed.

As an alternative, you can enter @samp{#@var{n}} in the argument field,
where @var{n} is the breakpoint number, and click on the @samp{Lookup}
button to find its definition.


@node Editing all Breakpoints
@subsection Editing all Breakpoints

To view and edit all breakpoints at once, select @samp{Source @result{}
Edit Breakpoints}.  This will popup the @emph{Breakpoint Editor} which
displays the state of all breakpoints.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-edit-breakpoints, 15cm}
@sp 1
@end ifnotinfo

In the breakpoint editor, you can select individual breakpoints by
clicking on them.  Pressing @key{Ctrl} while clicking toggles the
selection.  To edit the properties of all selected breakpoints, click on
@samp{Props}.


@node More Breakpoint Features
@subsection More Breakpoint Features

Using @sc{gdb}, a few more commands related to breakpoints can be
invoked through the debugger console:

@table @samp
@item hbreak @emph{position}
@cmindex hbreak
Sets a hardware-assisted breakpoint at @emph{position}.  This command
requires hardware support and some target hardware may not have this
support.  The main purpose of this is EPROM/ROM code debugging, so you
can set a breakpoint at an instruction without changing the
instruction.

@item thbreak @emph{pos}
@cmindex thbreak
Set a temporary hardware-assisted breakpoint at @emph{pos}.
@end table

@xref{Setting breakpoints, Setting breakpoints, Setting Breakpoints,
gdb, Debugging with GDB}, for details.



@node Watchpoints
@section Watchpoints

You can make the program stop as soon as some variable value changes, or
when some variable is read or written.  This is called `setting a
@emph{watchpoint} on a variable'.  @footnote{Watchpoints are available
in @sc{gdb} and some @sc{dbx} variants only.  In @sc{xdb}, a similar
feature is available via @sc{xdb} @emph{assertions}; see the @sc{xdb}
documentation for details.}

Watchpoints have much in common with breakpoints: in particular, you can
enable and disable them.  You can also set conditions, ignore counts,
and commands to be executed when a watched variable changes its value.

Please note: on architectures without special watchpoint support,
watchpoints currently make the program execute two orders of magnitude
more slowly.  This is so because the inferior debugger must interrupt
the program after each machine instruction in order to examine whether
the watched value has changed.  However, this delay can be well worth it
to catch errors when you have no clue what part of your program is the
culprit.

@menu
* Setting Watchpoints::         
* Editing Watchpoint Properties::  
* Editing all Watchpoints::     
* Deleting Watchpoints::        
@end menu

@node Setting Watchpoints
@subsection Setting Watchpoints

If the variable name is visible, click with @emph{mouse button 1} on the
variable name.  The variable name is copied to the argument field.
Otherwise, enter the variable name in the argument field.  Click on the
@samp{Watch ()} button to set a watchpoint there.

Using @sc{gdb}, you can set different types of watchpoints.  Click and
hold @emph{mouse button 1} on the @samp{Watch ()} button to get a menu.


@node Editing Watchpoint Properties
@subsection Editing Watchpoint Properties

To change the properties of a watchpoint, enter the name of the watched
variable in the argument field.  Click and hold @emph{mouse button 1} on
the @samp{Watch ()} button and select @samp{Watchpoint Properties}.

The @strong{Watchpoint Properties} panel has the same functionality as
the @strong{Breakpoint Properties} panel; see @samp{Editing Breakpoint
Properties}, above, for details.  As an additional feature, you can
click on @samp{Print ()} to see the current value of a watched variable.


@node Editing all Watchpoints
@subsection Editing all Watchpoints

To view and edit all watchpoints at once, select @samp{Data @result{}
Edit Watchpoints}.  This will popup the @emph{Watchpoint Editor} which
displays the state of all watchpoints.

The @emph{Watchpoint Editor} has the same functionality as the
@emph{Breakpoint Editor}; see @samp{Editing All Breakpoints}, above, for
details.  As an additional feature, you can click on @samp{Print} to see
the current value of a watched variable.


@node Deleting Watchpoints
@subsection Deleting Watchpoints

To delete a watchpoint, enter the name of the watched variable in the
argument field and click the @samp{Unwatch ()} button.


@node Running the Program
@chapter Running the Program

...

@menu
* Starting Program Execution::  
* Using the Execution Window::  
* Attaching to a Running Process::  
* Stopping the Program::        
* Resuming Execution::          
* Altering the Execution Position::  
* Examining the Stack::         
* Undoing Program Execution::   
* Examining Threads::           
* Handling Signals::            
@end menu

@node Starting Program Execution
@section Starting Program Execution

@node Using the Execution Window
@section Using the Execution Window

@node Attaching to a Running Process
@section Attaching to a Running Process

@node Stopping the Program
@section Stopping the Program

@node Resuming Execution
@section Resuming Execution

@node Altering the Execution Position
@section Altering the Execution Position

@node Examining the Stack
@section Examining the Stack

@node Undoing Program Execution
@section ``Undoing'' Program Execution

@node Examining Threads
@section Examining Threads

@node Handling Signals
@section Handling Signals


@node Examining Data
@chapter Examining Data

@menu
* Showing Simple Values using Value Hints::  
* Printing Simple Values in the Debugger Console::  
* Displaying Complex Values in the Data Window::  
* Selecting Displays::          
* Selecting Multiple Displays::  
* Showing and Hiding Values::   
* Rotating Arrays::             
* Displaying Dependent Values::  
* Display Shortcuts::           
* Dereferencing Pointers::      
* Displaying Local Variables::  
* Displaying Program Status::   
* Displaying Multiple Array Values::  
* Repeated Array Values::       
* Altering Variable Values::    
* Refreshing the Data Window::  
* Deleting Displays::           
* Examining Shared Data Structures::  
* Clustering Displays::         
* Moving Displays Around::      
* Aligning Displays::           
* Layouting the Display Graph::  
* Rotating the Display Graph::  
* Printing the Display Graph::  
@end menu

@node Showing Simple Values using Value Hints
@section Showing Simple Values using Value Hints

@node Printing Simple Values in the Debugger Console
@section Printing Simple Values in the Debugger Console

@node Displaying Complex Values in the Data Window
@section Displaying Complex Values in the Data Window

@node Selecting Displays
@section Selecting Displays

@node Selecting Multiple Displays
@section Selecting Multiple Displays

@node Showing and Hiding Values
@section Showing and Hiding Values

@node Rotating Arrays
@section Rotating Arrays

@node Displaying Dependent Values
@section Displaying Dependent Values

@node Display Shortcuts
@section Display Shortcuts

@node Dereferencing Pointers
@section Dereferencing Pointers

@node Displaying Local Variables
@section Displaying Local Variables

@node Displaying Program Status
@section Displaying Program Status

@node Displaying Multiple Array Values
@section Displaying Multiple Array Values

@node Repeated Array Values
@section Repeated Array Values

@node Altering Variable Values
@section Altering Variable Values

@node Refreshing the Data Window
@section Refreshing the Data Window

@node Deleting Displays
@section Deleting Displays

@node Examining Shared Data Structures
@section Examining Shared Data Structures

@node Clustering Displays
@section Clustering Displays

@node Moving Displays Around
@section Moving Displays Around

@node Aligning Displays
@section Aligning Displays

@node Layouting the Display Graph
@section Layouting the Display Graph

@node Rotating the Display Graph
@section Rotating the Display Graph

@node Printing the Display Graph
@section Printing the Display Graph


@node Plotting Data
@chapter Plotting Data

@menu
* Plotting Arrays::             
* Changing the Plot Appearance::  
* Plotting Scalars and Composites::  
* Plotting Display Histories::  
* Printing Plots::              
* Entering Plotting Commands::  
* Exporting Plot Data::         
* Animating Plots::             
@end menu

@node Plotting Arrays
@section Plotting Arrays

@node Changing the Plot Appearance
@section Changing the Plot Appearance

@node Plotting Scalars and Composites
@section Plotting Scalars and Composites

@node Plotting Display Histories
@section Plotting Display Histories

@node Printing Plots
@section Printing Plots

@node Entering Plotting Commands
@section Entering Plotting Commands

@node Exporting Plot Data
@section Exporting Plot Data

@node Animating Plots
@section Animating Plots


@node Machine-Level Debugging
@chapter Machine-Level Debugging

@menu
* Examining Machine Code::      
* Machine Code Execution::      
* Examining Registers::         
* Examining Memory::            
@end menu

@node Examining Machine Code
@section Examining Machine Code

@node Machine Code Execution
@section Machine Code Execution

@node Examining Registers
@section Examining Registers

@node Examining Memory
@section Examining Memory


@node Editing and Recompiling
@chapter Editing and Recompiling

@menu
* Editing Source Code::         
* Recompiling::                 
@end menu

@node Editing Source Code
@section Editing Source Code

@node Recompiling
@section Recompiling



@node Entering Commands
@chapter Entering Commands


@node Customizing DDD
@chapter Customizing @value{DDD}

@menu
* Frequently Used Preferences::  
* General Preferences::         
* Source Preferences::          
* Data Preferences::            
* Startup Preferences::         
* Fonts::                       
* Helpers::                     
* Saving Options::              
* Other Customizations::        
@end menu

@node Frequently Used Preferences
@section Frequently Used Preferences

@node General Preferences
@section General Preferences

@node Source Preferences
@section Source Preferences

@node Data Preferences
@section Data Preferences

@node Startup Preferences
@section Startup Preferences

@node Fonts
@section Fonts

@node Helpers
@section Helpers

@node Saving Options
@section Saving Options

@node Other Customizations
@section Other Customizations


@node Debugger Settings
@chapter Debugger Settings


@node User-Defined Actions
@chapter User-Defined Actions

@menu
* Defining Buttons::            
* Defining Simple Commands using GDB::  
* Defining Argument Commands using GDB::  
* Defining Commands using Other Debuggers::  
@end menu

@node Defining Buttons
@section Defining Buttons

@node Defining Simple Commands using GDB
@section Defining Simple Commands using GDB

@node Defining Argument Commands using GDB
@section Defining Argument Commands using GDB

@node Defining Commands using Other Debuggers
@section Defining Commands using Other Debuggers


@node Quitting DDD
@chapter Quitting @value{DDD}


@node Persistent Sessions
@chapter Persistent Sessions

@menu
* Saving Sessions::             
* Opening Sessions::            
* Deleting Sessions::           
* Starting DDD with a Session::  
@end menu

@node Saving Sessions
@section Saving Sessions

@node Opening Sessions
@section Opening Sessions

@node Deleting Sessions
@section Deleting Sessions

@node Starting DDD with a Session
@section Starting @value{DDD} with a Session


@node Integrating DDD
@chapter Integrating @value{DDD}

@menu
* Using DDD with GNU Emacs::    
* Using DDD with XEmacs::       
* Using DDD with XXGDB::        
@end menu

@node Using DDD with GNU Emacs
@section Using @value{DDD} with GNU Emacs

@node Using DDD with XEmacs
@section Using @value{DDD} with XEmacs

@node Using DDD with XXGDB
@section Using @value{DDD} with XXGDB

@node Using DDD with LessTif
@chapter Using @value{DDD} with LessTif


@node Remote Debugging
@chapter Remote Debugging

@menu
* Using DDD with a Remote Debugger::  
* Using DDD with a Remote Program::  
@end menu

@node Using DDD with a Remote Debugger
@section Using @value{DDD} with a Remote Debugger

@node Using DDD with a Remote Program
@section Using @value{DDD} with a Remote Program


@node Root Debugging
@chapter Root Debugging


@node Resources
@chapter Resources

@menu
* Setting DDD Fonts::           
* Setting DDD Colors::          
* General Preferences Resources::  
* Source Window::               
* Window Creation and Layout::  
* Debugger Settings Resources::  
* User-defined Buttons::        
* User-Defined New Display Menu::  
* Data Display::                
* Plot Window::                 
* Debugger Console::            
* Value Histories::             
* Customizing Helpers::         
* Obtaining Diagnostics::       
* More Resources::              
@end menu

@node Setting DDD Fonts
@section Setting @value{DDD} Fonts

@node Setting DDD Colors
@section Setting @value{DDD} Colors

@node General Preferences Resources
@section General Preferences

@node Source Window
@section Source Window

@node Window Creation and Layout
@section Window Creation and Layout

@node Debugger Settings Resources
@section Debugger Settings

@node User-defined Buttons
@section User-defined Buttons

@node User-Defined New Display Menu
@section User-Defined New Display Menu

@node Data Display
@section Data Display

@node Plot Window
@section Plot Window

@node Debugger Console
@section Debugger Console

@node Value Histories
@section Value Histories

@node Customizing Helpers
@section Customizing Helpers

@node Obtaining Diagnostics
@section Obtaining Diagnostics

@node More Resources
@section More Resources


@node Options
@chapter Options


@node Actions
@chapter Actions

@menu
* General Actions::             
* Data Display Actions::        
* Debugger Console Actions::    
* Source Window Actions::       
@end menu

@node General Actions
@section General Actions

@node Data Display Actions
@section Data Display Actions

@node Debugger Console Actions
@section Debugger Console Actions

@node Source Window Actions
@section Source Window Actions


@node Images
@chapter Images


@node Environment
@chapter Environment


@node Files
@chapter Files


@node References
@chapter References


@node Limitations
@chapter Limitations

@menu
* General Limitations::         
* Limitations using GDB::       
* Limitations using DBX::       
* Limitations using XDB::       
* Limitations using JDB::       
* Limitations using Perl::      
@end menu

@node General Limitations
@section General Limitations

@node Limitations using GDB
@section Limitations using GDB

@node Limitations using DBX
@section Limitations using DBX

@node Limitations using XDB
@section Limitations using XDB

@node Limitations using JDB
@section Limitations using JDB

@node Limitations using Perl
@section Limitations using Perl


@node Reporting Bugs
@chapter Reporting Bugs

@menu
* Where to Send Bug Reports::   
* Is it a DDD Bug?::            
* How to Report Bugs::          
* What to Include in a Bug Report::  
@end menu

@node Where to Send Bug Reports
@section Where to Send Bug Reports

@node Is it a DDD Bug?
@section Is it a @value{DDD} Bug?

@node How to Report Bugs
@section How to Report Bugs

@node What to Include in a Bug Report
@section What to Include in a Bug Report


@node History
@chapter History


@node Extending
@chapter Extending DDD


@node Support
@chapter DDD Needs Your Support!


@node License
@appendix GNU GENERAL PUBLIC LICENSE


@cindex License
@include gpl.texinfo

@node Printing this Manual
@appendix Printing this Manual


@node Copyright
@appendix Copyright

@section @value{DDD}
@section @value{DDD} Manual


@node Label Index
@unnumbered Label Index
@printindex lb

@node Key Index
@unnumbered Key Index
@printindex ky

@node Command Index
@unnumbered Command Index
@printindex cm

@node Concept Index
@unnumbered Concept Index
@printindex cp

@shortcontents
@contents
@bye
