\def\postscript{}\input texinfo @c -*- texinfo -*-
@c $Id$
@c DDD Manual

@c Copyright (C) 1995-1998 Technische Universitaet Braunschweig, Germany.
@c Written by Andreas Zeller <zeller@ips.cs.tu-bs.de>.
@c 
@c This file is part of DDD.
@c 
@c DDD is free software; you can redistribute it and/or modify it under
@c the terms of the GNU General Public License as published by the Free
@c Software Foundation; either version 2 of the License, or (at your
@c option) any later version.
@c 
@c DDD is distributed in the hope that it will be useful, but WITHOUT ANY
@c WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details. 
@c 
@c You should have received a copy of the GNU General Public License
@c along with DDD -- see the file COPYING.  If not, write to the Free
@c Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
@c MA 02111-1307, USA.
@c 
@c DDD is the data display debugger.
@c For details, see the DDD World-Wide-Web page, 
@c `http://www.cs.tu-bs.de/softech/ddd/',
@c or send a mail to the DDD developers <ddd@ips.cs.tu-bs.de>.

@c %**start of header
@setfilename ddd.info
@include config.texi
@settitle Debugging with @value{DDD}
@setchapternewpage odd
@defindex lb
@defindex cm
@c %**end of header

@iftex
@c @smallbook
@c @cropmarks
@end iftex

@finalout

@c !!set DDD manual's edition---not the same as DDD version!
@set EDITION First

@c !!set DDD manual's revision date
@set DATE 1999-01-01

@ifinfo
@c This is a dir.info fragment to support semi-automated addition of
@c manuals to an info tree.  zoo@cygnus.com is developing this facility.
@format
START-INFO-DIR-ENTRY
* DDD: (ddd).                     The Data Display Debugger.
END-INFO-DIR-ENTRY
@end format
@end ifinfo
@c
@c
@ifinfo
This file documents @value{DDD}, the Data Display Debugger.

This is the @value{EDITION} Edition, @value{DATE}, of @cite{Debugging
with @value{DDD}} for @value{DDD} Version @value{VERSION}.

@format
Copyright (C) 1999 Technische Universit@"at Braunschweig, Germany.
Institut f@"ur Software
Abteilung Softwaretechnologie
B@"ultenweg 88
D-38092 Braunschweig
GERMANY

Phone: +49 531 391-7580
Fax: +49 531 391-8940
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de}

@value{DDD} and this manual are available via @*
@uref{http://www.cs.tu-bs.de/softech/ddd/, the @value{DDD} WWW page}.
@end format

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifinfo

@titlepage
@sp -7
@ifnottex
@title Debugging with @value{DDD}
@subtitle User's Guide and Reference Manual
@subtitle @value{EDITION} Edition, for @value{DDD} Version @value{VERSION}
@subtitle Last updated @value{DATE}
@author Andreas Zeller
@end ifnottex
@tex
\setfont\bigtitlesf\sfbshape{10}{\magstep4}
\title \bigtitlesf{Debugging with @value{DDD}}
\subtitle \textsf{User's Guide and Reference Manual}
\subtitle \textsf{\value{EDITION} Edition, for \value{DDD} Version \value{VERSION}}
\subtitle \textsf{Last updated \value{DATE}}
\sp 2
\center \image{PICS/dddlogo, 15cm}
\author \titlesf{Andreas Zeller}
@end tex
@page
@tex
{\parskip=0pt
\hfill (Send bugs and comments on @value{DDD} to ddd\@ips.cs.tu-bs.de.)\par
\hfill {\it Debugging with @value{DDD}}\par
\hfill \TeX{}info \texinfoversion\par
}
@end tex

@vskip 0pt plus 1filll
Copyright @copyright{} 1999 Technische Universit@"at Braunschweig, Germany
@sp 2
Published by @*
Technische Universit@"at Braunschweig @*
Abteilung Softwaretechnologie @*
B@"ultenweg 88 @*
D-38092 Braunschweig @*
GERMANY @*

Phone: +49 531 391-7580 @*
Fax: +49 531 391-8940 @*
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de} @*

@value{DDD} and this manual are available via @*
@uref{http://www.cs.tu-bs.de/softech/ddd/, the @value{DDD} WWW page}.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@page


@ifinfo

@node Top
@top Debugging with @value{DDD}

@end ifinfo


@ifinfo
This is the @value{EDITION} Edition of @cite{Debugging with
@value{DDD}}, @value{DATE}, for @value{DDD} Version @value{VERSION}.

Copyright @copyright{} 1999 Technische Universit@"at Braunschweig @*
Institut f@"ur Software @*
Abteilung Softwaretechnologie @*
B@"ultenweg 88 @*
D-38092 Braunschweig @*
GERMANY @*

Phone: +49 531 391-7580 @*
Fax: +49 531 391-8940 @*
E-mail: @email{@value{ddd}@@ips.cs.tu-bs.de}

@value{DDD} and this manual are available via
@uref{http://www.cs.tu-bs.de/softech/ddd/, the @value{DDD} WWW page}.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.

@end ifinfo

@menu
* Summary::                     
* Invocation::                  
* Basics::                      
* Navigating::                  
* Breakpoints and Watchpoints::  
* Running the Program::         
* Examining Data::              
* Machine-Level Debugging::     
* Changing the Program::        
* Entering Commands::           
* Persistent Sessions::         
* Customizing::                 
* Special Set-Ups::             
* License::                     
* Reporting Bugs::              
* Copyright::                   
* Extending::                   
* Environment Variables::       
* Files::                       
* Actions::                     
* Images::                      
* Limitations::                 
* Printing this Manual::        
* Label Index::                 
* Key Index::                   
* Command Index::               
* Concept Index::               
@end menu

@node Summary
@unnumbered Summary of @value{DDD}

The purpose of a debugger such as @value{DDD} is to allow you to see
what is going on ``inside'' another program while it executes---or what
another program was doing at the moment it crashed.

@value{DDD} can do four main kinds of things (plus other things in
support of these) to help you catch bugs in the act:

@itemize @bullet
@item
Start your program, specifying anything that might affect its behavior.
@item
Make your program stop on specified conditions.
@item
Examine what has happened, when your program has stopped.
@item
Change things in your program, so you can experiment with correcting the
effects of one bug and go on to learn about another.
@end itemize

``Classical'' UNIX debuggers such as the GNU debugger (GDB) provide a
command-line interface and a multitude of commands for these and other
debugging purposes.  @value{DDD} is a comfortable @emph{graphical user
interface} around an inferior command-line debugger, such as GDB, DBX,
XDB, JDB, the Python debugger, or the Perl debugger.
@cindex Inferior debugger
@cindex Command-line debugger


@menu
* Free Software::               
* Contributors::                
* History::                     
* Support::                     
@end menu

@node Free Software
@unnumberedsec Free software

@value{DDD} is @dfn{free software}, protected by the GNU General Public
License (GPL).  The GPL gives you the freedom to copy or adapt a
licensed program---but every person getting a copy also gets with it the
freedom to modify that copy (which means that they must get access to
the source code), and the freedom to distribute further copies.  Typical
software companies use copyrights to limit your freedoms; the Free
Software Foundation uses the GPL to preserve these freedoms.

Fundamentally, the General Public License is a license which says that
you have these freedoms and that you cannot take these freedoms away
from anyone else.


@node Contributors
@unnumberedsec Contributors to DDD

Dorothea L@"utkehaus and Andreas Zeller were the original authors of
@value{DDD}.  Many others have contributed to its development.  The
files @file{ChangeLog} and @file{THANKS} in the @value{DDD} distribution
approximates a blow-by-blow account.



@node History
@unnumberedsec History

...


@node Support
@unnumberedsec DDD Needs Your Support!

...


@node Invocation
@chapter Getting In and Out of @value{DDD}

This chapter discusses how to start @value{DDD}, and how to get out of it.
The essentials are:

@itemize @bullet
@item 
Type @samp{@value{ddd}} to start DDD.
@item 
Use @samp{File @result{} Exit} or @kbd{Ctrl+Q} to exit.
@kindex Ctrl+Q
@end itemize

@menu
* Invoking::                    
* Quitting::                    
@end menu

@node Invoking
@section Invoking @value{DDD}

Normally, you can run @value{DDD} by invoking the program
@code{@value{ddd}}.

You can also run @code{@value{DDD}} with a variety of arguments and
options, to specify more of your debugging environment at the outset.

The most usual way to start @value{DDD} is with one argument, specifying
an executable program:

@example
@value{ddd} @var{program}
@end example

@noindent
If you use GDB, DBX, or XDB as inferior debuggers, you can also start
with both an executable program and a core file specified:

@example
@value{ddd} @var{program} @var{core}
@end example

You can, instead, specify a process ID as a second argument, if you want
to debug a running process:

@example
@value{ddd} @var{program} 1234
@end example

@noindent
would attach @value{DDD} to process @code{1234} (unless you also have a file
named @file{1234}; @value{DDD} does check for a core file first).


@menu
* Choosing an inferior debugger::  
* DDD-Specific Options::        
* X Options::                   
* Debugger-Specific Options::   
@end menu

@node Choosing an inferior debugger
@subsection Choosing an inferior debugger

By default, @value{DDD} determines the inferior debugger automatically.
Use

@example
@value{ddd} --gdb @var{program}
@end example

@example
@value{ddd} --dbx @var{program}
@end example

@example
@value{ddd} --xdb @var{program}
@end example

@example
@value{ddd} --jdb @var{program}
@end example

@example
@value{ddd} --pydb @var{program}
@end example

@example
@value{ddd} --perl @var{program}
@end example

to run GDB, DBX, XDB, JDB, PYDB or Perl as inferior debugger.


@node DDD-Specific Options
@subsection @value{DDD}-Specific Options

...


@node X Options
@subsection X Options

...


@node Debugger-Specific Options
@subsection Debugger-Specific Options

@menu
* GDB Options::                 
* DBX Options::                 
* XDB Options::                 
* JDB Options::                 
* PYDB Options::                
* Perl Options::                
@end menu

@node GDB Options
@subsubsection GDB Options

...

@node DBX Options
@subsubsection DBX Options

...

@node XDB Options
@subsubsection XDB Options

...

@node JDB Options
@subsubsection JDB Options

...

@node PYDB Options
@subsubsection PYDB Options

...

@node Perl Options
@subsubsection Perl Options

...


@node Quitting
@section Quitting @value{DDD}

...


@node Basics
@chapter DDD Basics

@menu
* Windows::                     
* Command Tool::                
* Tool Bar::                    
* Getting Help::                
@end menu

@node Windows
@section The @value{DDD} Windows

@value{DDD} is composed of three main windows:

@itemize @bullet
@item
The @emph{Data Window} shows the current data of the debugged program.
@item
The @emph{Source Window} shows the current source code of the debugged
program.
@item
The @emph{Debugger Console} accepts debugger commands and shows debugger
messages.
@end itemize

@ifnotinfo
@sp 1
@center @image{PICS/ddd-all, 15cm}
@sp 1
@end ifnotinfo

By default, @value{DDD} places these main windows stacked into one
single top-level window, but @value{DDD} can also be configured to
treat each one separately.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-separate, 15cm}
@sp 1
@end ifnotinfo

Besides these main windows, there are some other optional windows:

@itemize @bullet
@item
The @emph{Command Tool} offers buttons for frequently used commands.
It is usually placed on the source window.
@item
The @emph{Machine Code Window} shows the current machine code.  It is
usually placed beneath the current source.
@item
The @emph{Execution Window} shows the input and output of the debugged
program.
@end itemize

@value{DDD} also has several temporary @emph{dialogs} for showing and
entering additional information.


@menu
* Command Tool::                
* Tool Bar::                    
@end menu

@node Command Tool
@section The Command Tool

The command tool is a small window containing frequently used
@value{DDD} commands.  It can be moved around on top of the @value{DDD}
windows, but it can also be placed besides them.  

By default, the command tool @emph{sticks} to the @value{DDD} source
window: Whenever you move the @value{DDD} source window, the command
tool follows such that the distance between source window and command
tool remains the same.  By default, the command tool is also
@emph{auto-raised}, such that it stays on top of other @value{DDD}
windows.

The command tool can be configured to appear as a command tool bar above
the source window; see @samp{Edit @result{} Preferences @result{} Source
@result{} Tool Buttons Location} for details.

Whenever you save @value{DDD} state, @value{DDD} also saves the distance
between command tool and source window, such that you can select your
own individual command tool placement.  To move the command tool to its
saved position, use @samp{View @result{} Command Tool}.


@menu
* Command Tool Buttons::        
@end menu

@node Command Tool Buttons
@subsection The Command Tool Buttons

@ifnotinfo
@sp 1
@center @image{PICS/ddd-tool, 15cm}
@sp 1
@end ifnotinfo

These are the buttons of the command tool.  Note that not all buttons
may be inactive, depending on the current state and the capabilities of
the inferior debugger.

@table @code
@item Run
@lbindex Run
Start program execution.  When you click this button, your program will
begin to execute immediately.  @xref{Starting Program Execution}, for
details.

@item Interrupt
@lbindex Interrupt
Interrupt program execution.  This is equivalent to sending an interrupt
signal to the process.  @xref{Stopping the Program}, for details.

@item Step
@lbindex Step
Continue running your program until control reaches a different source
line, then stop it and return control to @value{DDD}.  @xref{Resuming
Execution}, for details.

@item Stepi
@lbindex Stepi
Execute one machine instruction, then stop and return to @value{DDD}.
@xref{Machine Code Execution}, for details.

@item Next
@lbindex Next
Continue to the next source line in the current (innermost) stack
frame.  This is similar to @samp{Step}, but function calls that appear
within the line of code are executed without stopping.
@xref{Resuming Execution}, for details.

@item Nexti
@lbindex Nexti
Execute one machine instruction, but if it is a function call,
proceed until the function returns.
@xref{Machine Code Execution}, for details.

@item Until
@lbindex Until
Continue running until a source line past the current line, in the
current stack frame, is reached.  @xref{Resuming Execution}, for details.

@item Finish
@lbindex Finish
Continue running until just after function in the selected stack frame
returns.  Print the returned value (if any).  @xref{Resuming Execution},
for details.

@item Up
@lbindex Up
Select the stack frame (i.e. the function) that called this one.  This
advances toward the outermost frame, to higher frame numbers, to frames
that have existed longer.  @xref{Examining the Stack}, for details.

@item Down
@lbindex Down
Select the stack frame (i.e. the function) that was called by this one.
This advances toward the innermost frame, to lower frame numbers, to
frames that were created more recently.  @xref{Examining the Stack}, for 
details.

@item Undo
@lbindex Undo
Undo the most recent action.  Almost all commands can be undone this
way.  @xref{Undoing Commands}, for details.

@item Redo
@lbindex Redo
Redo the action most recently undone.  Every command undone can be
redone this way.  @xref{Undoing Commands}, for details.

@item Edit
@lbindex Edit
Invoke an editor for the current source file.  @xref{Editing Source
Code}, for details.

@item Make
@lbindex Make
Run the @code{make} program with the most recently given arguments.
@xref{Recompiling}, for details.
@end table


@node Tool Bar
@section The Tool Bar

Some @value{DDD} commands require an @emph{argument}.  This argument
is specified in the @emph{argument field}, labeled @samp{():}.
Basically, there are four ways to set arguments:

@itemize @bullet
@item
You can @emph{key in} the argument manually.
@item
You can @emph{paste} the current selection into the argument field
(typically using @kbd{mouse button 2}).  To clear old contents
beforehand, click on the @samp{():} label.
@item
You can @emph{select an item} from the source and data windows.  This
will automatically copy the item to the argument field.
@item
You can select a @emph{previously used argument} from the drop-down
menu at the right of the argument field.
@end itemize

Using GDB and Perl, the argument field provides a completion mechanism.
You can enter the first few characters of an item an press the @key{TAB}
key to complete it.  Pressing @key{TAB} again shows alternative
completions.
@kindex TAB

After having entered an argument, you can select one of the buttons on
the right.  Most of these buttons also have menus associated with them;
this is indicated by a small arrow in the upper right corner.  Pressing
and holding @emph{mouse button 1} on such a button will pop up a menu
with further operations.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-toolbar, 15cm}
@sp 1
@end ifnotinfo


@menu
* Tool Bar Buttons::            
@end menu

@node Tool Bar Buttons
@subsection The Tool Bar Buttons

These are the buttons of the tool bar.  Note that not all buttons may be
inactive, depending on the current state and the capabilities of the
inferior debugger.

@table @code
@item Lookup
@lbindex Lookup
@cindex Looking up items

Look up the argument @samp{()} in the code.  @xref{Looking up
Definitions}, for details.


@item Find >>
@lbindex Find >>
@cindex Finding items
@cindex Search, using @samp{Find >>}

Look up the next occurrence of the argument @samp{()} in the current
source code.  @xref{Textual Search}, for details.


@item Break/Clear
@cindex Breakpoint, toggling

Toggle a breakpoint (@pxref{Breakpoints}) at the location @samp{()}.

@table @code
@item Break
@lbindex Break
If there is no breakpoint at @samp{()}, then this button is labeled
@samp{Break}.  Clicking on @samp{Break} sets a breakpoint at the
location @samp{()}.  @xref{Setting Breakpoints}, for details.

@item Clear
@lbindex Clear
If there already is a breakpoint at @samp{()}, then this button is
labeled @samp{Clear}.  Clicking on @samp{Clear} clears (deletes) the
breakpoint at the location @samp{()}.  @xref{Deleting Breakpoints}, for
details.
@end table


@item Watch/Unwatch
@cindex Watchpoint, toggling

Toggle a watchpoint (@pxref{Watchpoints}) on the expression @samp{()}.

@table @code
@item Watch
@lbindex Watch
If @samp{()} is not being watched, then this button is labeled
@samp{Watch}.  Clicking on @samp{Watch} creates a watchpoint on the
expression @samp{()}.  @xref{Setting Watchpoints}, for details.

@item Unwatch
@lbindex Unwatch
If @samp{()} is being watched, then this button is labeled
@samp{Unwatch}.  Clicking on @samp{Unwatch} clears (deletes) the
watchpoint on @samp{()}.  @xref{Deleting Watchpoints}, for details.
@end table


@item Print
@lbindex Print
@cindex Values, printing with @samp{Print}
@cindex Printing values in the debugger console

Print the value of @samp{()} in the debugger console.  @xref{Printing
Values}, for details.


@item Display
@lbindex Display
@cindex Values, displaying with @samp{Display}
@cindex Displaying values in the data window
@cindex Displays, creating

Display the value of @samp{()} in the data window.  @xref{Displaying
Values}, for details.


@item Plot
@lbindex Plot
@cindex Values, plotting with @samp{Plot}
@cindex Plotting values

Plot @samp{()} in a plot window.  @xref{Plotting Values}, for details.


@item Show/Hide
@lbindex Show
@lbindex Hide
@cindex Displays, toggling detail
@cindex Detail toggling with @samp{Show/Hide}

Toggle details of the selected display(s).  @xref{Showing and Hiding
Values}, for details.


@item Rotate
@lbindex Rotate
@cindex Displays, rotating
@cindex Rotating displays with @samp{Rotate}

Rotate the selected display(s).  @xref{Rotating Arrays}, for details.


@item Set
@lbindex Set
@cindex Displays, setting
@cindex Setting values with @samp{Set}
@cindex Values, setting with @samp{Set}

Set (change) the value of @samp{()}.  @xref{Changing Variable Values},
for details.


@item Undisp
@lbindex Undisp
@cindex Displays, deleting
@cindex Deleting displays

Undisplay (delete) the selected display(s).  @xref{Deleting Displays},
for details.

@end table


@node Getting Help
@section Getting Help
@cindex Help

@value{DDD} has an extensive on-line help system.  Here's how to get
help while working with @value{DDD}.

@menu
* Button Tips::                 
* The Status Line::             
* Context-Sensitive Help::      
* Help on Debugger Commands::   
* Are You Stuck?::              
* Undoing Commands::            
@end menu

@node Button Tips
@subsection Button Tips

@cindex Button tip
@cindex Help, on buttons
@cindex Tip, on buttons

You can get a short help text on most @value{DDD} buttons by simply
moving the mouse pointer on it and leave it there.  After a second, a
small window (called @emph{button tip}) pops up, giving a hint on the
button's meaning.  The button tip disappears as soon as you move the
mouse pointer to another item.


@node The Status Line
@subsection The Status Line
@cindex Help, in the status line
@cindex Status line

The status line also displays information about the currently selected
item.  By clicking on the status line, you can redisplay the most
recent messages.


@cindex Status line

@node Context-Sensitive Help
@subsection Context-Sensitive Help

@cindex Help, on items
@cindex Context-sensitive help

You can get detailed help on any visible @value{DDD} item.  Just
point on the item you want help and press the @samp{F1} key.  This
pops up a detailed help text.
@kindex F1

The @value{DDD} dialogs all contain @samp{Help} buttons that give
detailed information about the dialog.
@lbindex Help


@node Help on Debugger Commands
@subsection Help on Debugger Commands

@cindex Help, on commands
@cmindex help

You can get help on debugger commands by entering @samp{help} at the
debugger prompt.

@xref{Entering Commands}, below, for details on entering commands.


@node Are You Stuck?
@subsection Are You Stuck?

@lbindex What Now?
@kindex Ctrl+F1
@cindex Help, when stuck

If you are stuck, try @samp{Help @result{} What Now?} (the @samp{What
Now} item in the @samp{Help} menu) or press @key{Ctrl+F1}.  Depending on
the current state, @value{DDD} will give you some hints on what you can
do next.


@node Undoing Commands
@subsection Undoing Commands

@lbindex Undo
@lbindex Redo
@kindex Ctrl+Z
@kindex Ctrl+Y
@cindex Undoing commands
@cindex Redoing commands

And if, after all, you made a mistake, don't worry.  Almost every
@value{DDD} command can be undone, using @samp{Edit @result{} Undo} or
the @samp{Undo} button on the command tool.  

Likewise, @samp{Edit @result{} Redo} repeats the command most recently
undone.



@node Navigating
@chapter Navigating through the Code

This chapter discusses how to access resources from within @value{DDD}.

@menu
* Compiling for Debugging::     
* Opening Files::               
* Looking up Items::            
@end menu

@node Compiling for Debugging
@section Compiling for Debugging

In order to debug a program effectively, you need to generate debugging
information when you compile it.  This debugging information is stored
in the object file; it describes the data type of each variable or
function and the correspondence between source line numbers and
addresses in the executable code.@footnote{If you use @value{DDD} to
debug Perl or Python scripts, then this section does not apply.}

To request debugging information, specify the @samp{-g} option when you
run the compiler.

Many C compilers are unable to handle the @samp{-g} and @samp{-O}
options together.  Using those compilers, you cannot generate optimized
executables containing debugging information.

GCC, the GNU C compiler, supports @samp{-g} with or without @samp{-O},
making it possible to debug optimized code.  We recommend that you
@emph{always} use @samp{-g} whenever you compile a program.  You may
think your program is correct, but there is no sense in pushing your
luck.
@cindex GCC

@cindex Optimized code, debugging
@cindex Debugging optimized code
When you debug a program compiled with @samp{-g -O}, remember that the
optimizer is rearranging your code; the debugger shows you what is
really there.  Do not be too surprised when the execution path does not
exactly match your source file!  An extreme example: if you define a
variable, but never use it, @value{DDD} never sees that
variable---because the compiler optimizes it out of existence.


@node Opening Files
@section Opening Files

@cindex Files, opening

If you did not invoke @value{DDD} specifying a program to be debugged,
you can use the @samp{File} menu to open programs, core dumps and
sources.

@menu
* Opening Programs::            
* Opening Core Dumps::          
* Opening Source Files::        
@end menu

@node Opening Programs
@subsection Opening Programs
@cindex Program, opening
@cindex Class, opening

To open a program to be debugged, select @samp{File @result{} Open
Program}.@footnote{With XDB and some DBX versions, the debugged program
must be specified upon invocation and cannot be changed at run time.}
Click on @samp{Open} to open the program
@lbindex Open Program
@lbindex Open

In JDB, select @samp{File @result{} Open Class} instead.  This gives you
a list of available classes to choose from.
@lbindex Open Class

@ifnotinfo
@sp 1
@center @image{PICS/ddd-open, 15cm}
@sp 1
@end ifnotinfo

To re-open a recently debugged program or class, select @samp{File
@result{} Open Recent} and choose a program or class from the list.
@lbindex Open Recent


@node Opening Core Dumps
@subsection Opening Core Dumps
@cindex Core dump, opening

If a previous run of the program has crashed and you want to find out
why, you can have @value{DDD} examine its @dfn{core dump}.@footnote{JDB,
PYDB, and Perl do not support core dumps.}

To open a core dump for the program, select @samp{File @result{} Open
Core Dump}.  Click on @samp{Open} to open the core dump.
@lbindex Open

Before @samp{Open Core Dump}, you should first use @samp{File @result{}
Open Program} to specify the program that generated the core dump and to
load its symbol table.


@node Opening Source Files
@subsection Opening Source Files
@cindex Source file, opening

To open a source file of the debugged program, select @samp{File
@result{} Open Source}.
@lbindex Open Source

@itemize @bullet{}
@item
Using GDB, this gives you a list of the sources used for compiling your
program.
@item
Using other inferior debuggers, this gives you a list of accessible
source files, which may or may not be related to your program.
@end itemize

Click on @samp{Open} to open the source file.
@lbindex Open


@node Looking up Items
@section Looking up Items

As soon as the source of the debugged program is available, the
@emph{source window} displays its current source text.  (If a source
text cannot be found, use @samp{Edit @result{} GDB Settings} to specify
source text directories.)

In the source window, you can lookup and examine function and variable
definitions as well as search for arbitrary occurrences in the source
text.

@menu
* Looking up Definitions::      
* Textual Search::              
* Looking up Previous Locations::  
@end menu

@node Looking up Definitions
@subsection Looking up Definitions

If you wish to lookup a specific function or variable definition whose
name is visible in the source text, click with @emph{mouse button 1} on
the function or variable name.  The name is copied to the argument
field.  Change the name if desired and click on the @samp{Lookup} button
to find its definition.
@lbindex Lookup

@ifnotinfo
@sp 1
@center @image{PICS/ddd-source-popup, 15cm}
@sp 1
@end ifnotinfo

As a faster alternative, you can simply press @emph{mouse button 3} on the
function name and select the @samp{Lookup} item from the source popup
menu.

As an even faster alternative, you can also double-click on a function 
call (an identifier followed by a @samp{(} character) to lookup the
function definition.


@node Textual Search
@subsection Textual Search

If the item you wish to search is visible in the source text, click with
@emph{mouse button 1} on it.  The identifier is copied to the argument
field.  Click on the @samp{Find >>} button to find following occurrences
and on @samp{Find >> @result{} Find << ()} to find previous occurrences.
@lbindex Find >>
@lbindex Find <<

By default, @value{DDD} finds only complete words.  To search for
arbitrary substrings, change the value of the @samp{Source @result{}
Find Words Only} option.
@lbindex Find Words Only


@node Looking up Previous Locations
@subsection Looking up Previous Locations

After looking up a location, use @samp{Edit @result{} Undo} (or the
@samp{Undo} button on the command tool) to go back to the original
locations.  @samp{Edit @result{} Redo} brings you back again to the
location you looked for.
@lbindex Undo
@lbindex Redo
@cindex Undoing lookups
@cindex Redoing lookups
@cindex Lookups, undoing
@cindex Lookups, redoing

@ifnotinfo
@sp 1
@center @image{PICS/ddd-source, 15cm}
@sp 1
@end ifnotinfo


@node Breakpoints and Watchpoints
@chapter Breakpoints and Watchpoints

The principal purposes of using a debugger are so that you can stop your
program before it terminates; or so that, if your program runs into
trouble, you can investigate and find out why.

Inside @value{DDD}, your program may stop for any of several reasons,
such as a signal, a breakpoint, or reaching a new line after a
@value{DDD} command such as @samp{Step}.  You may then examine and
change variables, set new breakpoints or remove old ones, and then
continue execution.

A @dfn{breakpoint} makes your program stop whenever a certain point in
the program is reached.  For each breakpoint, you can add conditions to
control in finer detail whether your program stops.
@cindex Breakpoint

A @dfn{watchpoint} is a special breakpoint that stops your program when
the value of an expression changes.
@cindex Watchpoint

@menu
* Breakpoints::                 
* Watchpoints::                 
@end menu

@node Breakpoints
@section Breakpoints

@menu
* Setting Breakpoints::         
* Disabling Breakpoints::       
* Temporary Breakpoints::       
* Deleting Breakpoints::        
* Editing Breakpoint Properties::  
* Breakpoint Conditions::       
* Breakpoint Ignore Counts::    
* Breakpoint Commands::         
* Moving and Copying Breakpoints::  
* Looking up Breakpoints::      
* Editing all Breakpoints::     
* Hardware-Assisted Breakpoints::  
@end menu

@node Setting Breakpoints
@subsection Setting Breakpoints
@cindex Breakpoint, setting

@c @node Setting Breakpoints by Location
@subsubsection Setting Breakpoints by Location

Breakpoints are set at a specific location in the program.

If the source line is visible, click with @emph{mouse button 1} on the
left of the source line and then on the @samp{Break} button.
@lbindex Break

As a faster alternative, you can simply press @emph{mouse button 3} on
the left of the source line and select the @samp{Set Breakpoint} item
from the line popup menu.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-line-popup, 15cm}
@sp 1
@end ifnotinfo

As an even faster alternative, you can simply double-click on the left
of the source line to set a breakpoint.

As yet another alternative, you can select @samp{Source @result{} Edit
Breakpoints}.  Click on the @samp{Break} button and enter the location.
@lbindex Break

(If you find this number of alternatives confusing, be aware that
@value{DDD} users fall into three categories, which must all be
supported.  @emph{Novice users} explore @value{DDD} and may prefer to
use one single mouse button.  @emph{Advanced users} know how to use
shortcuts and prefer popup menus.  @emph{Experienced users} prefer the
command line interface.)

Breakpoints are indicated by a plain stop sign, or as @samp{#@var{n}},
where @emph{n} is the breakpoint number.  A greyed out stop sign (or
@samp{_@var{n}_}) indicates a disabled breakpoint.  A stop sign with a
question mark (or @samp{?@var{n}?}) indicates a conditional breakpoint
or a breakpoint with an ignore count set.

If you set a breakpoint by mistake, use @samp{Edit @result{} Undo} to delete
it again.


@c @node Setting Breakpoints by Name
@subsubsection Setting Breakpoints by Name

If the function name is visible, click with @emph{mouse button 1} on the
function name.  The function name is then copied to the argument field.
Click on the @samp{Break} button to set a breakpoint there.

As a shorter alternative, you can simply press @emph{mouse button 3} on
the function name and select the @samp{Break at} item from the popup
menu.

As yet another alternative, you can click on @samp{Break@dots{}} from
the Breakpoint editor (invoked through @samp{Source @result{} Edit
Breakpoints}) and enter the function name.


@c @node Setting Regexp Breakpoints
@subsubsection Setting Regexp Breakpoints

Using GDB, you can also set a breakpoint on all functions that match a
given string.  @samp{Break @result{} Set Breakpoints at Regexp ()} sets
a breakpoint on all functions whose name matches the @emph{regular
expression} given in @samp{()}.  Here are some examples:

@itemize @bullet
@item
To set a breakpoint on every function that starts with @samp{Xm}, set
@samp{()} to @samp{^Xm}.
@item
To set a breakpoint on every member of class @samp{Date}, set
@samp{()} to @samp{^Date::}.
@item
To set a breakpoint on every function whose name contains
@samp{_fun}, set @samp{()} to @samp{_fun}.
@item
To set a breakpoint on every function that ends in @samp{_test}, 
set @samp{()} to @samp{_test$}.
@end itemize


@node Disabling Breakpoints
@subsection Disabling Breakpoints
@cindex Breakpoint, disabling
@cindex Breakpoint, enabling

Rather than deleting a breakpoint or watchpoint, you might prefer to
@dfn{disable} it.  This makes the breakpoint inoperative as if it had
been deleted, but remembers the information on the breakpoint so that
you can @dfn{enable} it again later.@footnote{JDB does not support
breakpoint disabling.}

To disable a breakpoint, press @emph{mouse button 3} on the breakpoint
symbol and select the @samp{Disable Breakpoint} item from the breakpoint
popup menu.  To enable it again, select @samp{Enable Breakpoint}.
@lbindex Disable Breakpoint
@lbindex Enable Breakpoint

@ifnotinfo
@sp 1
@center @image{PICS/ddd-bp-popup, 15cm}
@sp 1
@end ifnotinfo

As an alternative, you can select the breakpoint and click on
@samp{Disable} or @samp{Enable} in the Breakpoint editor (invoked
through @samp{Source @result{} Edit Breakpoints}.
@lbindex Disable
@lbindex Enable

Disabled breakpoints are indicated by a grey stop sign, or
@samp{_@var{n}_}, where @var{n} is the breakpoint number.

The @samp{Disable Breakpoint} item is also accessible via the
@samp{Clear} button.  Just press and hold @emph{mouse button 1} on the
button to get a popup menu.
@lbindex Clear


@node Temporary Breakpoints
@subsection Temporary Breakpoints
@cindex Breakpoint, temporary

A @emph{temporary breakpoint} is immediately deleted as soon as it is
reached.@footnote{JDB does not support temporary breakpoints.}

To set a temporary breakpoint, press @emph{mouse button 3} on the left
of the source line and select the @samp{Set Temporary Breakpoint} item
from the popup menu.
@lbindex Set Temporary Breakpoint

As a faster alternative, you can simply double-click on the left of the
source line while holding @key{Ctrl}.

Temporary breakpoints are convenient to make the program continue up to
a specific location: just set the temporary breakpoint at this location
and continue execution.

The @samp{Continue Until Here} item from the popup menu sets a temporary
breakpoint on the left of the source line and immediately continues
execution.  Execution stops when the temporary breakpoint is reached.
@lbindex Continue Until Here

The @samp{Set Temporary Breakpoint} and @samp{Continue Until Here} items
are also accessible via the @samp{Break} button.  Just press and hold
@emph{mouse button 1} on the button to get a popup menu.



@node Deleting Breakpoints
@subsection Deleting Breakpoints
@cindex Breakpoint, deleting

To delete a visible breakpoint, click with @emph{mouse button 1} on the
breakpoint.  The breakpoint location is copied to the argument field.
Click on the @samp{Clear} button to delete all breakpoints there.
@lbindex Clear

If the function name is visible, click with @emph{mouse button 1} on the
function name.  The function name is copied to the argument field.
Click on the @samp{Clear} button to clear all breakpoints there.

As a faster alternative, you can simply press @emph{mouse button 3} on
the breakpoint and select the @samp{Delete Breakpoint} item from the
popup menu.
@lbindex Delete Breakpoint

As yet another alternative, you can select the breakpoint and click on
@samp{Delete} in the Breakpoint editor (invoked through
@samp{Source @result{} Edit Breakpoints}).
@lbindex Delete

As an even faster alternative, you can simply double-click on the
breakpoint while holding @key{Ctrl}.


@node Editing Breakpoint Properties
@subsection Editing Breakpoint Properties
@cindex Breakpoint properties
@cindex Breakpoint, editing

You can change all properties of a breakpoint by pressing @emph{mouse
button 3} on the breakpoint symbol and select @samp{Properties}
from the breakpoint popup menu.  This will pop up a dialog showing the 
current properties of the selected breakpoint.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-bp-properties, 15cm}
@sp 1
@end ifnotinfo

As an even faster alternative, you can simply double-click on the
breakpoint.

@itemize @bullet
@item
Click on @samp{Lookup} to move the cursor to the breakpoint's
location.
@lbindex Lookup
@item
Click on @samp{Enable} to enable the breakpoint.
@lbindex Enable
@item
Click on @samp{Disable} to disable the breakpoint.
@lbindex Disable
@item
Click on @samp{Temp} to make the breakpoint temporary.@footnote{GDB has
no way to make a temporary breakpoint non-temporary again.}
@lbindex Temp
@item
Click on @samp{Delete} to delete the breakpoint.
@lbindex Delete
@end itemize


@node Breakpoint Conditions
@subsection Breakpoint Conditions
@cindex Conditions on breakpoints
@cindex Breakpoint conditions

The simplest sort of breakpoint breaks every time your program reaches a
specified place.  You can also specify a @dfn{condition} for a
breakpoint.  A condition is just a Boolean expression in your
programming language.  A breakpoint with a condition evaluates the
expression each time your program reaches it, and your program stops
only if the condition is @emph{true}.

This is the converse of using assertions for program validation; in that
situation, you want to stop when the assertion is violated--that is,
when the condition is false.  In C, if you want to test an assertion
expressed by the condition @var{assertion}, you should set the condition
@samp{!@var{assertion}} on the appropriate breakpoint.
@cindex Assertions and breakpoints

Break conditions can have side effects, and may even call functions in
your program.  This can be useful, for example, to activate functions
that log program progress, or to use your own print functions to format
special data structures. The effects are completely predictable unless
there is another enabled breakpoint at the same address.  (In that case,
@value{DDD} might see the other breakpoint first and stop your program
without checking the condition of this one.)

Note that breakpoint commands are usually more convenient and flexible
for the purpose of performing side effects when a breakpoint is reached.
@xref{Breakpoint Commands}, for details.
@cindex Breakpoint commands, vs. conditions


@node Breakpoint Ignore Counts
@subsection Breakpoint Ignore Counts
@cindex Breakpoint ignore counts
@cindex Ignore count

A special case of a breakpoint condition is to stop only when the
breakpoint has been reached a certain number of times.  This is so
useful that there is a special way to do it, using the @dfn{ignore
count} of the breakpoint.  Every breakpoint has an ignore count, which
is an integer.  Most of the time, the ignore count is zero, and
therefore has no effect.  But if your program reaches a breakpoint whose
ignore count is positive, then instead of stopping, it just decrements
the ignore count by one and continues.  As a result, if the ignore count
value is @var{n}, the breakpoint does not stop the next @var{n} times
your program reaches it.

In the field @samp{Ignore Count} of the @samp{Breakpoint Properties}
panel, you can specify the breakpoint ignore count.@footnote{JDB, Perl
and some DBX variants do not support breakpoint ignore counts.}
@lbindex Ignore Count

If a breakpoint has a positive ignore count and a condition, the
condition is not checked.  Once the ignore count reaches zero,
@value{DDD} resumes checking the condition.


@node Breakpoint Commands
@subsection Breakpoint Commands
@cindex Breakpoint commands
@cindex Command, breakpoint

You can give any breakpoint (or watchpoint) a series of @value{DDD}
commands to execute when your program stops due to that breakpoint.  For
example, you might want to print the values of certain expressions, or
enable other breakpoints.@footnote{JDB, PYDB, and some DBX variants do
not support breakpoint commands.}

Using the @samp{Commands} buttons of the @samp{Breakpoint Properties}
panel, you can edit commands to be executed when the breakpoint is hit.

To edit breakpoint commands, click on @samp{Edit >>} and enter the
commands in the commands editor.  When done with editing, click on
@samp{Edit <<} to close the commands editor.

Using GDB, you can also @emph{record} a command sequence to be executed.
To record a command sequence, follow these steps:

@enumerate
@item
Click on @samp{Record} to begin the recording of the breakpoint
commands.
@lbindex Record
@item
Now interact with @value{DDD}.  While recording, @value{DDD} does not
execute commands, but simply records them to be executed when the
breakpoint is hit.  The recorded debugger commands are shown in the
debugger console.
@item
To stop the recording, click on @samp{End} or enter @samp{end} at the
GDB prompt.  To @emph{cancel} the recording, click on @samp{Interrupt}
or press @key{ESC}.
@lbindex End
@item
You can edit the breakpoint commands just recorded using @samp{Edit >>}.
@lbindex Edit >>
@end enumerate


@node Moving and Copying Breakpoints
@subsection Moving and Copying Breakpoints
@cindex Breakpoint, moving
@cindex Breakpoint, copying
@cindex Breakpoint, dragging

To move a breakpoint to a different location, press @emph{mouse button
1} on the stop sign and drag it to the desired location.@footnote{When
glyphs are disabled (@pxref{Source Preferences}), breakpoints cannot be
dragged.  Delete and set breakpoints instead.}  This is equivalent to
deleting the breakpoint at the old location and setting a breakpoint at
the new location.  The new breakpoint inherits all properties of the old
breakpoint, except the breakpoint number.

To copy a breakpoint to a new location, press @key{Shift} while
dragging.


@node Looking up Breakpoints
@subsection Looking up Breakpoints
@cindex Breakpoint, looking up
@cindex Looking up breakpoints

If you wish to lookup a specific breakpoint, select @samp{Source
@result{} Edit Breakpoints @result{} Lookup}.  After selecting a
breakpoint from the list and clicking the @samp{Lookup} button, the
breakpoint location is displayed.

As an alternative, you can enter @samp{#@var{n}} in the argument field,
where @var{n} is the breakpoint number, and click on the @samp{Lookup}
button to find its definition.


@node Editing all Breakpoints
@subsection Editing all Breakpoints
@cindex Breakpoints, editing

To view and edit all breakpoints at once, select @samp{Source @result{}
Edit Breakpoints}.  This will popup the @emph{Breakpoint Editor} which
displays the state of all breakpoints.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-edit-breakpoints, 15cm}
@sp 1
@end ifnotinfo

In the breakpoint editor, you can select individual breakpoints by
clicking on them.  Pressing @key{Ctrl} while clicking toggles the
selection.  To edit the properties of all selected breakpoints, click on
@samp{Props}.


@node Hardware-Assisted Breakpoints
@subsection Hardware-Assisted breakpoints
@cindex Breakpoint, hardware-assisted

Using GDB, a few more commands related to breakpoints can be invoked
through the debugger console:

@table @samp
@item hbreak @emph{position}
@cmindex hbreak
Sets a hardware-assisted breakpoint at @emph{position}.  This command
requires hardware support and some target hardware may not have this
support.  The main purpose of this is EPROM/ROM code debugging, so you
can set a breakpoint at an instruction without changing the
instruction.

@item thbreak @emph{pos}
@cmindex thbreak
Set a temporary hardware-assisted breakpoint at @emph{pos}.
@end table

@xref{Setting breakpoints, Setting breakpoints, Setting Breakpoints,
gdb, Debugging with GDB}, for details.



@node Watchpoints
@section Watchpoints
@cindex Watchpoint

You can make the program stop as soon as some variable value changes, or
when some variable is read or written.  This is called `setting a
@emph{watchpoint} on a variable'.  @footnote{Watchpoints are available
in GDB and some DBX variants only.  In XDB, a similar feature is
available via XDB @emph{assertions}; see the XDB documentation for
details.}

Watchpoints have much in common with breakpoints: in particular, you can
enable and disable them.  You can also set conditions, ignore counts,
and commands to be executed when a watched variable changes its value.

Please note: on architectures without special watchpoint support,
watchpoints currently make the program execute two orders of magnitude
more slowly.  This is so because the inferior debugger must interrupt
the program after each machine instruction in order to examine whether
the watched value has changed.  However, this delay can be well worth it
to catch errors when you have no clue what part of your program is the
culprit.

@menu
* Setting Watchpoints::         
* Editing Watchpoint Properties::  
* Editing all Watchpoints::     
* Deleting Watchpoints::        
@end menu

@node Setting Watchpoints
@subsection Setting Watchpoints
@cindex Watchpoint, setting

If the variable name is visible, click with @emph{mouse button 1} on the
variable name.  The variable name is copied to the argument field.
Otherwise, enter the variable name in the argument field.  Click on the
@samp{Watch} button to set a watchpoint there.

Using GDB, you can set different types of watchpoints.  Click and hold
@emph{mouse button 1} on the @samp{Watch} button to get a menu.
@lbindex Watch


@node Editing Watchpoint Properties
@subsection Editing Watchpoint Properties
@cindex Watchpoint properties
@cindex Watchpoint, editing

To change the properties of a watchpoint, enter the name of the watched
variable in the argument field.  Click and hold @emph{mouse button 1} on
the @samp{Watch} button and select @samp{Watchpoint Properties}.
@lbindex Watch

The Watchpoint Properties panel has the same functionality as the
@emph{Breakpoint Properties} panel (@pxref{Editing Breakpoint
Properties}).  As an additional feature, you can click on @samp{Print}
to see the current value of a watched variable.
@lbindex Print


@node Editing all Watchpoints
@subsection Editing all Watchpoints
@cindex Watchpoints, editing

To view and edit all watchpoints at once, select @samp{Data @result{}
Edit Watchpoints}.  This will popup the @emph{Watchpoint Editor} which
displays the state of all watchpoints.

The Watchpoint Editor has the same functionality as the Breakpoint
Editor (@pxref{Editing all Breakpoints}).  As an additional feature, you
can click on @samp{Print} to see the current value of a watched
variable.
@lbindex Print


@node Deleting Watchpoints
@subsection Deleting Watchpoints
@cindex Watchpoint, deleting

To delete a watchpoint, enter the name of the watched variable in the
argument field and click the @samp{Unwatch} button.


@node Running the Program
@chapter Running the Program
@cindex Running the debugged program

You may start the debugged program with its arguments, if any, in an
environment of your choice.  You may redirect your program's input and
output, debug an already running process, or kill a child process.

@menu
* Starting Program Execution::  
* Using the Execution Window::  
* Attaching to a Running Process::  
* Stopping the Program::        
* Resuming Execution::          
* Continuing at a Different Address::  
* Examining the Stack::         
* Undoing Program Execution::   
* Examining Threads::           
* Handling Signals::            
* Killing the Program::         
@end menu

@node Starting Program Execution
@section Starting Program Execution
@cindex Arguments, program
@cindex Program arguments

To start execution of the debugged program, select @samp{Program
@result{} Run}.  You will then be prompted for the arguments to pass to
your program.  You can either select from a list of previously used
arguments or enter own arguments in the text field.  Afterwards, press
the @samp{Run} button to start execution with the selected arguments.
@lbindex Run

@ifnotinfo
@sp 1
@center @image{PICS/ddd-arguments, 15cm}
@sp 1
@end ifnotinfo

To run your program again, with the same arguments, select
@samp{Program @result{} Run Again} or press the @samp{Run} button on the
command tool.  You may also enter @samp{run}, followed by arguments
at the debugger prompt instead.
@lbindex Run Again
@lbindex Run
@cmindex run

When you click on @samp{Run}, your program begins to execute
immediately.  @xref{Setting Breakpoints}, for a discussion of how to
arrange for your program to stop.  Once your program has stopped, you
may call functions in your program to examine data.  @xref{Examining
Data}, for details.

If the modification time of your symbol file has changed since the last
time GDB read its symbols, GDB discards its symbol table, and reads it
again.  When it does this, GDB and @value{DDD} trie to retain your
current debugger state, such as breakpoints.


@menu
* Arguments::                   
* Environment::                 
* Working Directory::           
* Input/Output::                
@end menu

@node Arguments
@subsection Your Program's Arguments
@cindex Arguments, of the debugged program

The arguments to your program are specified by the arguments of the
@samp{run} command, as composed in @samp{Program @result{} Run}.

In GDB, the arguments are passed to a shell, which expands wildcard
characters and performs redirection of I/O, and thence to your program.
Your @samp{SHELL} environment variable (if it exists) specifies what
shell GDB uses.  If you do not define @samp{SHELL}, GDB uses
@samp{/bin/sh}.

If you use another inferior debugger, the exact semantics on how the
arguments are interpreted depend on the inferior debugger you are using.
Normally, the shell is used to pass the arguments, so that you may use
normal conventions (such as wildcard expansion or variable substitution)
in describing the arguments.

@node Environment
@subsection Your Program's Environment
@cindex Environment, of the debugged program

Your program normally inherits its environment from the inferior
debugger, which again inherits it from @value{DDD}, which again inherits
it from its parent process (typically the shell or desktop).

In GDB, you can use the commands @samp{set environment} and @samp{unset
environment} to change parts of the environment that affect your
program.   @xref{Your program's environment, Your program's environment,
Your Program's Environment, gdb, Debugging with GDB}, for details.
@cmindex set environment
@cmindex unset environment


@node Working Directory
@subsection Your Program's Working Directory
@cindex Working directory, of the debugged program
@cindex Directory, of the debugged program

Your program normally inherits its working directory from the inferior
debugger, which again inherits it from @value{DDD}, which again inherits
it from its parent process (typically the shell or desktop).

You can change the working directory of the inferior debugger via
@samp{File @result{} Change Directory} or via the @samp{cd} command of
the inferior debugger.
@lbindex Change Directory


@node Input/Output
@subsection Your Program's Input and Output
@cindex Input of the debugged program
@cindex Output of the debugged program
@cindex Redirecting I/O of the debugged program

By default, the program you run under @value{DDD} does input and output
to the debugger console.  Normally, you can redirect your program's
input and/or output using shell redirection with the arguments.  For
example,

@example
run > @var{outfile}
@end example

starts your program, diverting its output to the file @var{outfile}.

@emph{Warning:} While input and output redirection work, you cannot use
pipes to pass the output of the program you are debugging to another
program; if you attempt this, @value{DDD} is likely to wind up debugging
the wrong program.  @xref{Attaching to a Running Process}, for an
alternative.
@cindex Pipes


@node Using the Execution Window
@section Using the Execution Window
@cindex Execution window
@cindex Redirecting I/O to the execution window

By default, input and output of your program go to the debugger console.
As an alternative, @value{DDD} can also invoke an @emph{execution
window}, where the program terminal input and output is
shown.@footnote{The execution window is not available in JDB.}  To
activate the execution window, select @samp{Program @result{} Run in
Execution Window}.
@lbindex Run in Execution Window

The execution window is opened automatically as soon as you start the
debugged program.  While the execution window is active, @value{DDD}
redirects the standard input, output, and error streams of your program
to the execution window.  Note that the device @samp{/dev/tty} still
refers to the debugger console, @emph{not} the execution window.

You can override the @value{DDD} stream redirection by giving alternate
redirection operations as arguments.  For instance, to have your program
read from @var{file}, but to write to the execution window, invoke your
program with @samp{< @var{file}} as argument.  Likewise, to redirect the
standard error output to the debugger console, use @samp{2> /dev/tty}
(assuming the inferior debugger and/or your UNIX shell support standard
error redirection).


@node Attaching to a Running Process
@section Attaching to a Running Process
@cindex Process, attaching

If the debugged program is already running in some process, you can
@emph{attach} to this process (instead of starting a new one with
@samp{Run}).@footnote{JDB, PYDB, and Perl do not support attaching the
debugger to running processes.}

To attach @value{DDD} to a process, select @samp{File @result{} Attach
to Process}.  You can now choose from a list of processes.  Then, press
the @samp{Attach} button to attach to the specified process.
@lbindex Attach to Process
@lbindex Attach

@ifnotinfo
@sp 1
@center @image{PICS/ddd-attach, 15cm}
@sp 1
@end ifnotinfo

The first thing @value{DDD} does after arranging to debug the specified
process is to stop it. You can examine and modify an attached process
with all the @value{DDD} commands that are ordinarily available when you
start processes with @samp{Run}. You can insert breakpoints; you can
step and continue; you can modify storage. If you would rather the
process continue running, you may use @samp{Continue} after attaching
@value{DDD} to the process.
@cindex Continuing process execution

When using @samp{Attach to Process}, you should first use @samp{Open
Program} to specify the program running in the process and load its
symbol table.
@lbindex Open Program

When you have finished debugging the attached process, you can use the
@samp{File @result{} Detach Process} to release it from @value{DDD}
control.  Detaching the process continues its execution.  After
@samp{Detach Process}, that process and @value{DDD} become
completely independent once more, and you are ready to attach another
process or start one with @samp{Run}.
@lbindex Detach Process

You can customize the list of processes shown by defining an alternate
command to list processes.  See @samp{Edit @result{} Preferences
@result{} Helpers @result{} List Processes}.
@lbindex List Processes


@node Stopping the Program
@section Stopping the Program
@cindex Program, stopping
@cindex Program, interrupting
@cindex Stopping program execution
@cindex Interrupting program execution

After the program has been started, it runs until one of the following
happens:

@itemize @bullet
@item
A breakpoint is reached.  @xref{Breakpoints}, for details.

@item
A watchpoint is reached.  @xref{Watchpoints}, for details.

@item
A signal is received.  @xref{Handling Signals}, for details.

@item
Execution completes.
@end itemize

You can interrupt a running program any time by clicking the
@samp{Interrupt} button or typing @key{ESC} in a @value{DDD} window.
@lbindex Interrupt
@kindex ESC

Unless execution has completed, the current execution position is
highlighted by an arrow.


@node Resuming Execution
@section Resuming Execution

@subsection Continuing
@cindex Continuing execution
@cindex Execution, continuing

To resume execution, at the current execution position, click on the
@samp{Continue} button.  Any breakpoints set at the current execution
position are bypassed.
@lbindex Continue


@subsection Stepping One line
@cindex Execution, one line
@cindex Continue, one line

To execute just one source line, click on the @samp{Step} button.  The
program is executed until control reaches a different source line, which
may be in a different function.  Then, the program is stopped and
control returns to @value{DDD}.
@lbindex Step

@emph{Warning}: If you use the @samp{Step} button while control is
within a function that was compiled without debugging information,
execution proceeds until control reaches a function that does have
debugging information.  Likewise, it will not step into a function which
is compiled without debugging information.  To step through functions
without debugging information, use the @samp{Stepi} button
(@pxref{Machine Code Execution}).
@lbindex Stepi

In GDB, the @samp{Step} button only stops at the first instruction of a
source line.  This prevents the multiple stops that used to occur in
switch statements, for loops, etc.  @samp{Step} continues to stop if a
function that has debugging information is called within the line.

Also, the @samp{Step} in GDB only enters a subroutine if there is line
number information for the subroutine.  Otherwise it acts like the
@samp{Next} button.
@lbindex Next


@subsection Continuing to the Next Line
@cindex Execution, to next line
@cindex Continue, to next line

To continue to the next line in the current function, click on the
@samp{Next} button.  This is similar to @samp{Step}, but any function
calls appearing within the line of code are executed without stopping.
@lbindex Next
@lbindex Step

Execution stops when control reaches a different line of code at the
original stack level that was executing when you clicked on @samp{Next}.


@subsection Continuing Until Here
@cindex Execution, to location
@cindex Continue, to location

To continue running until a specific location is reached, use the
@samp{Continue Until Here} facility from the line popup menu.
@xref{Temporary Breakpoints}, for a discussion.


@subsection Continuing Until a Greater Line is Reached
@cindex Execution, until greater line is reached
@cindex Continue, until greater line is reached

To continue until a greater line in the current function is reached,
click on the @samp{Until} button.  This is useful to avoid single
stepping through a loop more than once.
@lbindex Until

In GDB, @samp{Until} is like @samp{Next} command, except that when
@samp{Until} encounters a jump, it automatically continues execution
until the program counter is greater than the address of the jump.

This means that when you reach the end of a loop after single stepping
though it, @samp{until} makes your program continue execution until it
exits the loop.  In contrast, clicking on @samp{Next} at the end of a
loop simply steps back to the beginning of the loop, which forces you to
step through the next iteration.

@samp{Until} always stops your program if it attempts to exit the
current stack frame.

@samp{Until} with no argument works by means of single instruction
stepping, and hence is slower than continuing until a breakpoint is
reached.


@subsection Continuing Until Function Returns
@cindex Execution, until function returns
@cindex Continue, until function returns

To continue running until the current function returns, use the
@samp{Finish} button.  The returned value (if any) is printed.
@lbindex Finish


@node Continuing at a Different Address
@section Continuing at a Different Address
@cindex Execution, at different address
@cindex Continue, at different address
@cindex Jump to different address

Ordinarily, when you continue your program, you do so at the place where
it stopped.  You can instead continue at an address of your own
choosing.

The most common occasion to use this feature is to back up---perhaps
with more breakpoints set-over a portion of a program that has already
executed, in order to examine its execution in more detail.

To set the execution position to the current location, use @samp{Set
Execution Position} from the breakpoint popup menu.  This item is also
accessible by pressing and holding the @samp{Break/Clear}
button.@footnote{JDB, PYDB, and Perl do not support altering the
execution position.}
@lbindex Set Execution Position

As a quicker alternative, you can also press @emph{mouse button 1} on
the arrow and drag it to a different location.@footnote{When glyphs are
disabled (@pxref{Source Preferences}), dragging the execution position
is not possible.  Set the execution position explicitly instead.}
@cindex Execution position, dragging

@ifnotinfo
@sp 1
@center @image{PICS/ddd-drag, 15cm}
@sp 1
@end ifnotinfo

Moving the execution position does not change the current stack frame,
or the stack pointer, or the contents of any memory location or any
register other than the program counter.

Some inferior debuggers (notably GDB) allow you to set the new execution
position into a different function from the one currently executing.
This may lead to bizarre results if the two functions expect different
patterns of arguments or of local variables.  For this reason, moving
the execution position requests confirmation if the specified line is
not in the function currently executing.

After moving the execution position, click on @samp{Continue} to resume
execution.
@lbindex Continue


@node Examining the Stack
@section Examining the Stack

When your program has stopped, the first thing you need to know is
where it stopped and how it got there.

Each time your program performs a function call, information about the
call is generated.  That information includes the location of the call
in your program, the arguments of the call, and the local variables of
the function being called.  The information is saved in a block of data
called a @dfn{stack frame}.  The stack frames are allocated in a region
of memory called the @dfn{call stack}.
@cindex Stack frame
@cindex Call stack
@cindex Frame

When your program stops, the @value{DDD} commands for examining the
stack allow you to see all of this information.

One of the stack frames is @dfn{selected} by @value{DDD} and many
@value{DDD} commands refer implicitly to the selected frame.  In
particular, whenever you ask @value{DDD} for the value of a variable in
your program, the value is found in the selected frame.  There are
special @value{DDD} commands to select whichever frame you are
interested in.

@menu
* Frames::                      
* Backtraces::                  
* Selecting a frame::           
@end menu

@node Frames
@subsection Stack Frames

@cindex Frame
@cindex Stack Frame
The call stack is divided up into contiguous pieces called @dfn{stack
frames}, or @dfn{frames} for short; each frame is the data associated
with one call to one function.  The frame contains the arguments given
to the function, the function's local variables, and the address at
which the function is executing.

@cindex Initial frame
@cindex Outermost frame
@cindex Innermost frame
When your program is started, the stack has only one frame, that of the
function @code{main}.  This is called the @dfn{initial} frame or the
@dfn{outermost} frame.  Each time a function is called, a new frame is
made.  Each time a function returns, the frame for that function invocation
is eliminated.  If a function is recursive, there can be many frames for
the same function.  The frame for the function in which execution is
actually occurring is called the @dfn{innermost} frame.  This is the most
recently created of all the stack frames that still exist.

@cindex Frame pointer
Inside your program, stack frames are identified by their addresses.  A
stack frame consists of many bytes, each of which has its own address; each
kind of computer has a convention for choosing one byte whose
address serves as the address of the frame.  Usually this address is kept
in a register called the @dfn{frame pointer register} while execution is
going on in that frame.

@cindex Frame number
GDB assigns numbers to all existing stack frames, starting with zero for
the innermost frame, one for the frame that called it, and so on upward.
These numbers do not really exist in your program; they are assigned by
GDB to give you a way of designating stack frames in GDB commands.


@node Backtraces
@subsection Backtraces

@value{DDD} provides a @emph{backtrace window} showing a summary of how
your program got where it is.  It shows one line per frame, for many
frames, starting with the currently executing frame (frame zero),
followed by its caller (frame one), and on up the stack.

To enable the backtrace window, select @samp{Status @result{}
Backtrace}.

@ifnotinfo
@sp 1
@center @image{PICS/ddd-backtrace, 15cm}
@sp 1
@end ifnotinfo

Usign GDB, each line in the backtrace shows the frame number and the
function name.  The program counter value is also shown---unless you use
the GDB command @samp{set print address off}.  The backtrace also shows
the source file name and line number, as well as the arguments to the
function.  The program counter value is omitted if it is at the
beginning of the code for that line number.


@node Selecting a frame
@subsection Selecting a Frame
@cindex Frame, selecting
@cindex Selecting frames
@cindex Stack, moving within

Most commands for examining the stack and other data in your program
work on whichever stack frame is selected at the moment.  Here are the
commands for selecting a stack frame.@footnote{Perl does not allow
changing the current stack frame.}

In the backtrace window, you can @emph{select} an arbitrary frame to
move from one stack frame to another.  Just click on the desired frame.

The @samp{Up} button selects the function that called the current
one---that is, it moves one frame up.
@lbindex Up

The @samp{Down} button selects the function that was called by
the current one---that is, it moves one frame down.
@lbindex Down

You can also directly type the @samp{up} and @samp{down} commands at
the debugger prompt.  Typing @key{Ctrl+Up} and @key{Ctrl+Down},
respectively, will also move you through the stack.
@cmindex up
@cmindex down
@kindex Ctrl+Up
@kindex Ctrl+Down

@samp{Up} and @samp{Down} actions can be undone via @samp{Edit @result{}
Undo}.
@lbindex Undo
@cindex Undoing frame changes
@cindex Frame changes, undoing


@node Undoing Program Execution
@section ``Undoing'' Program Execution
@cindex Execution, ``undoing''
@cindex Undoing program execution

If you take a look at the @samp{Edit @result{} Undo} menu item after an
execution command, you'll find that @value{DDD} offers you to undo
execution commands just as other commands.  Does this mean that
@value{DDD} allows you to go backwards in time, undoing program
execution as well as undoing any side-effects of your program?

Sorry---we must disappoint you.  @value{DDD} cannot undo what your
program did.  (After a little bit of thought, you'll find that this
would be impossible in general.)  However, DDD can do something
different: it can show @emph{previously recorded states} of your
program.

After ``undoing'' an execution command (via
@samp{Edit @result{} Undo}, or the @samp{Undo} button), the execution
position moves back to the earlier position and displayed variables
take their earlier values.  Your program state is in fact unchanged,
but DDD gives you a @emph{view} on the earlier state as recorded by
DDD.

In this so-called @emph{historic mode}, most normal @value{DDD}
commands that would query further information from the program are
disabled, since the debugger cannot be queried for the earlier state.
However, you can examine the current execution position, or the
displayed variables.  Using @samp{Undo} and @samp{Redo}, you can
move back and forward in time to examine how your program got into the
present state.
@cindex Historic mode
@lbindex Undo
@lbindex Redo

To let you know that you are operating in historic mode, the execution
arrow gets a dashed-line appearance (indicating a past position);
variable displays also come with dashed lines.  Furthermore, the
status line informs you that you are seeing an earlier program state.

Here's how historic mode works: each time your program stops,
@value{DDD} collects the current execution position and the values of
displayed variables.  Backtrace, thread, and register information is
also collected if the corresponding dialogs are open.  When
``undoing'' an execution command, @value{DDD} updates its view
from this collected state instead of querying the program.

If you want to collect this information without interrupting your
program---within a loop, for instance---you can place a breakpoint with
an associated @samp{cont} command (@pxref{Breakpoint Commands}).  When
the breakpoint is hit, @value{DDD} will stop, collect the data, and
execute the @samp{cont} command, resuming execution.  Using a later
@samp{Undo}, you can step back and look at every single loop iteration.

To leave historic mode, you can use @samp{Redo} until you are back in
the current program state.  However, any @value{DDD} command that
refers to program state will also leave historic mode immediately by
applying to the current program state instead.  For instance,
@samp{Up} leaves historic mode immediately and selects an alternate
frame in the restored current program state.

If you want to see the history of a specific variable, as recorded
during program stops, you can enter the @value{DDD} command

@example
graph history @var{name}
@end example

This returns a list of all previously recorded values of the variable
@var{name}, using array syntax.  Note that @var{name} must have been
displayed at earlier program stops in order to record values.


@node Examining Threads
@section Examining Threads
@cindex Threads

In some operating systems, a single program may have more than one
@emph{thread} of execution.  The precise semantics of threads differ
from one operating system to another, but in general the threads of a
single program are akin to multiple processes---except that they share
one address space (that is, they can all examine and modify the same
variables).  On the other hand, each thread has its own registers and
execution stack, and perhaps private memory.

For debugging purposes, @value{DDD} lets you display the list of threads
currently active in your program and lets you select the @emph{current
thread}---the thread which is the focus of debugging.  @value{DDD} shows
all program information from the perspective of the current
thread.@footnote{Currently, threads are supported in GDB and JDB only.}

@ifnotinfo
@sp 1
@center @image{PICS/ddd-threads, 15cm}
@sp 1
@end ifnotinfo

To view all currently active threads in your program, select
@samp{Status @result{} Threads}.  The current thread is highlighted.
Select any thread to make it the current thread.
@lbindex Threads

Using JDB, additional functionality is available:

@itemize @bullet
@item
Select a @emph{thread group} to switch between viewing all threads and
the threads of the selected thread group;
@item
Click on @samp{Suspend} to suspend execution of the selected threads;
@item
Click on @samp{Resume} to resume execution of the selected threads.
@end itemize

For more information on threads, see the JDB and GDB documentation
(@pxref{Threads, Debugging programs with multiple threads, Debugging
Programs with Multiple Threads, gdb, Debugging with GDB}).


@node Handling Signals
@section Handling Signals

A signal is an asynchronous event that can happen in a program.  The
operating system defines the possible kinds of signals, and gives each
kind a name and a number.  For example, in UNIX, @code{SIGINT} is the
signal a program gets when you type an interrupt; @code{SIGSEGV} is
the signal a program gets from referencing a place in memory far away
from all the areas in use; @code{SIGALRM} occurs when the alarm clock
timer goes off (which happens only if your program has requested an
alarm).
@cindex Signals

Some signals, including @code{SIGALRM}, are a normal part of the
functioning of your program.  Others, such as @code{SIGSEGV}, indicate
errors; these signals are @emph{fatal} (kill your program immediately)
if the program has not specified in advance some other way to handle the
signal.  @code{SIGINT} does not indicate an error in your program, but
it is normally fatal so it can carry out the purpose of the interrupt:
to kill the program.
@cindex Signal, fatal

GDB has the ability to detect any occurrence of a signal in your
program.  You can tell GDB in advance what to do for each kind of
signal.

Normally, @value{DDD} is set up to ignore non-erroneous signals like
@code{SIGALRM} (so as not to interfere with their role in the
functioning of your program) but to stop your program immediately
whenever an error signal happens.  In @value{DDD}, you can view and edit
these settings via @samp{Status @result{} Signals}.
@lbindex Signals
@cindex Signal settings, editing

@samp{Status @result{} Signals} pops up a panel showing all the kinds of
signals and how GDB has been told to handle each one.  The settings
available for each signal are:

@table @code
@item Stop
@lbindex Stop
If set, GDB should stop your program when this signal happens.
This also implies @samp{Print} being set.

@item Print
@lbindex Print
If set, GDB should print a message when this signal happens.

If unset, GDB should not mention the occurrence of the signal at all.
This also implies @samp{Stop} being unset.

@item Pass
@lbindex Pass
If set, GDB should allow your program to see this signal; your
program can handle the signal, or else it may terminate if the signal
is fatal and not handled.

If unset, GDB should not allow your program to see this signal.
@end table

@ifnotinfo
@sp 1
@center @image{PICS/ddd-signals, 15cm}
@sp 1
@end ifnotinfo

The entry @samp{All Signals} is special.  Changing a setting here
affects @emph{all signals at once}---except those used by the debugger,
typically @code{SIGTRAP} and @code{SIGINT}.
@lbindex All Signals

To undo any changes, use @samp{Edit @result{} Undo}.  The @samp{Reset}
button restores the saved settings.
@cindex Undoing signal handling
@lbindex Reset

When a signal stops your program, the signal is not visible until you
continue.  Your program sees the signal then, if @samp{Pass} is in
effect for the signal in question @emph{at that time}.  In other words,
after GDB reports a signal, you can change the @samp{Pass} setting in
@samp{Status @result{} Signals} to control whether your program sees
that signal when you continue.

You can also cause your program to see a signal it normally would not
see, or to give it any signal at any time.  The @samp{Send} button will
resume execution where your program stopped, but immediately give it the
signal shown.
@lbindex Send

On the other hand, you can also prevent your program from seeing a
signal.  For example, if your program stopped due to some sort of memory
reference error, you might store correct values into the erroneous
variables and continue, hoping to see more execution; but your program
would probably terminate immediately as a result of the fatal signal
once it saw the signal.  To prevent this, you can resume execution using
@samp{Commands @result{} Continue Without Signal}.
@lbindex Continue Without Signal

@samp{Edit @result{} Save Options} does not save changed signal
settings, since changed signal settings are normally useful within
specific projects only.  Instead, signal settings are saved with the
current session, using @samp{File @result{} Save Session As}.
@lbindex Save Options
@lbindex Save Session As
@cindex Signal settings, saving


@node Killing the Program
@section Killing the Program
@cindex Killing the debugged program

You can kill the process of the debugged program at any time using the
@samp{Kill} button.
@lbindex Kill

Killing the process is useful if you wish to debug a core dump instead
of a running process.  GDB ignores any core dump file while your program
is running.

The @samp{Kill} button is also useful if you wish to recompile and
relink your program, since on many systems it is impossible to modify an
executable file while it is running in a process.  In this case, when
you next click on @samp{Run}, GDB notices that the file has changed, and
reads the symbol table again (while trying to preserve your current
debugger state).



@node Examining Data
@chapter Examining Data

@menu
* Value Hints::                 
* Printing Values::             
* Displaying Values::           
* Plotting Values::             
@end menu

@node Value Hints
@section Showing Simple Values using Value Hints

@node Printing Values
@section Printing Simple Values in the Debugger Console

@node Displaying Values
@section Displaying Complex Values in the Data Window

@menu
* Selecting Displays::          
* Selecting Multiple Displays::  
* Showing and Hiding Values::   
* Rotating Arrays::             
* Displaying Dependent Values::  
* Display Shortcuts::           
* Dereferencing Pointers::      
* Displaying Local Variables::  
* Displaying Program Status::   
* Displaying Multiple Array Values::  
* Repeated Array Values::       
* Changing Variable Values::    
* Refreshing the Data Window::  
* Deleting Displays::           
* Examining Shared Data Structures::  
* Clustering Displays::         
* Moving Displays Around::      
* Aligning Displays::           
* Layouting the Display Graph::  
* Rotating the Display Graph::  
* Printing the Display Graph::  
@end menu

@node Selecting Displays
@subsection Selecting Displays

@node Selecting Multiple Displays
@subsection Selecting Multiple Displays

@node Showing and Hiding Values
@subsection Showing and Hiding Values

@node Rotating Arrays
@subsection Rotating Arrays

@node Displaying Dependent Values
@subsection Displaying Dependent Values

@node Display Shortcuts
@subsection Display Shortcuts

@node Dereferencing Pointers
@subsection Dereferencing Pointers

@node Displaying Local Variables
@subsection Displaying Local Variables

@node Displaying Program Status
@subsection Displaying Program Status

@node Displaying Multiple Array Values
@subsection Displaying Multiple Array Values

@node Repeated Array Values
@subsection Repeated Array Values

@node Changing Variable Values
@subsection Changing Variable Values

@node Refreshing the Data Window
@subsection Refreshing the Data Window

@node Deleting Displays
@subsection Deleting Displays

@node Examining Shared Data Structures
@subsection Examining Shared Data Structures

@node Clustering Displays
@subsection Clustering Displays

@node Moving Displays Around
@subsection Moving Displays Around

@node Aligning Displays
@subsection Aligning Displays

@node Layouting the Display Graph
@subsection Layouting the Display Graph

@node Rotating the Display Graph
@subsection Rotating the Display Graph

@node Printing the Display Graph
@subsection Printing the Display Graph


@node Plotting Values
@section Plotting Values

@menu
* Plotting Arrays::             
* Changing the Plot Appearance::  
* Plotting Scalars and Composites::  
* Plotting Display Histories::  
* Printing Plots::              
* Entering Plotting Commands::  
* Exporting Plot Data::         
* Animating Plots::             
@end menu

@node Plotting Arrays
@subsection Plotting Arrays

@node Changing the Plot Appearance
@subsection Changing the Plot Appearance

@node Plotting Scalars and Composites
@subsection Plotting Scalars and Composites

@node Plotting Display Histories
@subsection Plotting Display Histories

@node Printing Plots
@subsection Printing Plots

@node Entering Plotting Commands
@subsection Entering Plotting Commands

@node Exporting Plot Data
@subsection Exporting Plot Data

@node Animating Plots
@subsection Animating Plots


@node Machine-Level Debugging
@chapter Machine-Level Debugging

@menu
* Examining Machine Code::      
* Machine Code Execution::      
* Examining Registers::         
* Examining Memory::            
@end menu

@node Examining Machine Code
@section Examining Machine Code

@node Machine Code Execution
@section Machine Code Execution

@node Examining Registers
@section Examining Registers

@node Examining Memory
@section Examining Memory


@node Changing the Program
@chapter Changing the Program

@menu
* Editing Source Code::         
* Recompiling::                 
* Patching::                    
@end menu

@node Editing Source Code
@section Editing Source Code

@node Recompiling
@section Recompiling

@node Patching
@section Patching



@node Entering Commands
@chapter The Command-Line Interface


@node Persistent Sessions
@chapter Persistent Sessions

@menu
* Saving Sessions::             
* Opening Sessions::            
* Deleting Sessions::           
* Starting DDD with a Session::  
@end menu

@node Saving Sessions
@section Saving Sessions

@node Opening Sessions
@section Opening Sessions

@node Deleting Sessions
@section Deleting Sessions

@node Starting DDD with a Session
@section Starting @value{DDD} with a Session


@node Customizing
@chapter Customizing @value{DDD}

@menu
* Frequently Used Preferences::  
* General Preferences::         
* Source Preferences::          
* Data Preferences::            
* Startup Preferences::         
* Fonts::                       
* Helpers::                     
* Debugger Settings::           
* User-Defined Actions::        
* Saving Options::              
* Other Customizations::        
@end menu

@node Frequently Used Preferences
@section Frequently Used Preferences

@node General Preferences
@section General Preferences

@node Source Preferences
@section Source Preferences

@node Data Preferences
@section Data Preferences

@node Startup Preferences
@section Startup Preferences

@node Fonts
@section Fonts

@node Helpers
@section Helpers

@node Debugger Settings
@section Debugger Settings

@node User-Defined Actions
@section User-Defined Actions

@menu
* Defining Buttons::            
* Defining Simple Commands using GDB::  
* Defining Argument Commands using GDB::  
* Defining Commands using Other Debuggers::  
@end menu

@node Defining Buttons
@subsection Defining Buttons

@node Defining Simple Commands using GDB
@subsection Defining Simple Commands using GDB

@node Defining Argument Commands using GDB
@subsection Defining Argument Commands using GDB

@node Defining Commands using Other Debuggers
@subsection Defining Commands using Other Debuggers

@node Saving Options
@section Saving Options

@node Other Customizations
@section Other Customizations


@node Special Set-Ups
@chapter Special Set-Ups

@menu
* Integrating DDD::             
* Using DDD with a Remote Debugger::  
* Using DDD with a Remote Program::  
* Debugging as Root::           
@end menu

@node Integrating DDD
@section Integrating @value{DDD}

@menu
* Using DDD with GNU Emacs::    
* Using DDD with XEmacs::       
* Using DDD with XXGDB::        
@end menu

@node Using DDD with GNU Emacs
@subsection Using @value{DDD} with GNU Emacs

@node Using DDD with XEmacs
@subsection Using @value{DDD} with XEmacs

@node Using DDD with XXGDB
@subsection Using @value{DDD} with XXGDB

@node Using DDD with a Remote Debugger
@section Using @value{DDD} with a Remote Debugger

@node Using DDD with a Remote Program
@section Using @value{DDD} with a Remote Program

@node Debugging as Root
@section Debugging as Root



@c A
@node License
@appendix GNU General Public License

@cindex License
@include gpl.texinfo

@c B
@node Reporting Bugs
@appendix Reporting Bugs

@menu
* Where to Send Bug Reports::   
* Is it a DDD Bug?::            
* How to Report Bugs::          
* What to Include in a Bug Report::  
@end menu

@node Where to Send Bug Reports
@section Where to Send Bug Reports

@node Is it a DDD Bug?
@section Is it a @value{DDD} Bug?

@node How to Report Bugs
@section How to Report Bugs

@node What to Include in a Bug Report
@section What to Include in a Bug Report

@c C
@node Copyright
@appendix Copyright

@section @value{DDD}
@section @value{DDD} Manual

@c D
@node Extending
@appendix Extending DDD

@c E
@node Environment Variables
@appendix Environment Variables used by @value{DDD}

@c F
@node Files
@appendix Files used by @value{DDD}

@c G
@node Actions
@appendix Actions used by @value{DDD}

@menu
* General Actions::             
* Data Display Actions::        
* Debugger Console Actions::    
* Source Window Actions::       
@end menu

@node General Actions
@section General Actions

@node Data Display Actions
@section Data Display Actions

@node Debugger Console Actions
@section Debugger Console Actions

@node Source Window Actions
@section Source Window Actions

@c H
@node Images
@appendix Images used by @value{DDD}

@c I
@node Limitations
@appendix Limitations

@menu
* General Limitations::         
* Limitations using GDB::       
* Limitations using DBX::       
* Limitations using XDB::       
* Limitations using JDB::       
* Limitations using Perl::      
* LessTif::                     
@end menu

@node General Limitations
@section General Limitations

@node Limitations using GDB
@section Limitations using GDB

@node Limitations using DBX
@section Limitations using DBX

@node Limitations using XDB
@section Limitations using XDB

@node Limitations using JDB
@section Limitations using JDB

@node Limitations using Perl
@section Limitations using Perl

@node LessTif
@section Using @value{DDD} with LessTif

@c J
@node Printing this Manual
@appendix Printing this Manual


@node Label Index
@unnumbered Label Index
@printindex lb

@node Key Index
@unnumbered Key Index
@printindex ky

@node Command Index
@unnumbered Command Index
@printindex cm

@node Concept Index
@unnumbered Concept Index
@printindex cp

@shortcontents
@contents
@bye
