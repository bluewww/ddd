! $Id$ -*- xrdb -*-
! Sample DDD initialization file.  To be copied in `~/.ddd/init'.

! Copyright (C) 1997 Technische Universitaet Braunschweig, Germany.
! Written by Andreas Zeller <zeller@ips.cs.tu-bs.de>.
! 
! This file is part of DDD.
! 
! DDD is free software; you can redistribute it and/or
! modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! DDD is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
! See the GNU General Public License for more details.
! 
! You should have received a copy of the GNU General Public
! License along with DDD -- see the file COPYING.
! If not, write to the Free Software Foundation, Inc.,
! 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
! 
! DDD is the data display debugger.
! For details, see the DDD World-Wide-Web page, 
! `http://www.cs.tu-bs.de/softech/ddd/',
! or send a mail to the DDD developers <ddd@ips.cs.tu-bs.de>.

! This file contains alternate resource settings for your personal
! `~/.ddd/init' file.  Most of these resources are documented either in
! the DDD manual or in the `Ddd.in' resource file shipped with the
! DDD source distribution.  To activate any of these resources, remove
! the `! ' prefixes in the lines beginning with `Ddd' (as well as
! in the next line(s), if the previous line ends in `\').
!
! Please let us know what you like!  Tell us your preferences such
! that other users can pick their choice.


! ----------------------------------------------------------------------------
! GEOMETRY
! ----------------------------------------------------------------------------

! Set the geometry for separate DDD windows.
! Ddd*command_shell.geometry: +0+0
! Ddd*source_view_shell.geometry: +0+220
! Ddd*data_disp_shell.geometry: +0+670


! Enable DDD 2.x style window layout
! Ddd*commonToolBar:    off
! Ddd*toolbarsAtBottom: on

! Enable DDD 2.x style labels
! Ddd*buttonImages:    off
! Ddd*buttonCaptions:  off


! ----------------------------------------------------------------------------
! BUTTONS
! ----------------------------------------------------------------------------

! Some useful buttons to be added below the source.
! Ddd*sourceButtons: \
! print *(())           // Print *()\n\
! graph display *(())	// Display *()\n\
! print /x ()\n\
! whatis ()		// What is ()\n\
! ptype ()\n\
! watch ()\n\
! until\n\
! shell

! Show whenever a button is armed.
! Ddd*highlightOnEnter: true


! ----------------------------------------------------------------------------
! REMOTE STUFF
! ----------------------------------------------------------------------------

! Commands to be issued whenever logging on remote machine using `--rhost'.
! Ddd*rHostInitCommands: stty -echo -onlcr; jobs


! ----------------------------------------------------------------------------
! VSL STUFF
! ----------------------------------------------------------------------------

! Specify an individual VSL library.
! Ddd*vslLibrary: 		/home/zeller/ddd/ddd/ddd.vsl
! Ddd*vslPath:	 		/home/zeller/ddd/ddd:/home/zeller/ddd/vsllib


! ----------------------------------------------------------------------------
! DATA DISPLAYS
! ----------------------------------------------------------------------------

! Here is an alternate highlighting scheme for selected data displays.
! Ddd*graph_edit.selectTile:	25_foreground


! ----------------------------------------------------------------------------
! STRINGS
! ----------------------------------------------------------------------------

! Michael.Taeschner@dlr.de (Michael Taeschner) suggests improved tip strings
! for the `next' and `step' buttons.
! Ddd*next.tipString: 1 step over
! Ddd*step.tipString: 1 step into


! ----------------------------------------------------------------------------
! MENUS
! ----------------------------------------------------------------------------

! Auto-raise menu panels.  This is useful if you have a window manager
! that auto-raises windows - and sometimes raises an application above
! its own menus.  This is off by default, since it may interfere with Motif.
! Ddd*autoRaiseMenus: true


! ----------------------------------------------------------------------------
! SHADOWS
! ----------------------------------------------------------------------------

! These settings make the menubar and the command tool somewhat `lighter'
! Ddd*menubar.shadowThickness: 1
! Ddd*tool_shell*shadowThickness: 1


! ----------------------------------------------------------------------------
! ACCELERATORS
! ----------------------------------------------------------------------------

! Enrico Scholz <enrico.scholz@wirtschaft.tu-chemnitz.de> suggests the
! following accelerators (taken from the Borland Delphi debugger):
! 
! Ddd*menubar*programMenu.step.accelerator:       ~Shift<Key>F7
! Ddd*menubar*programMenu.step.acceleratorText:   F7
! 
! Ddd*menubar*programMenu.stepi.accelerator:      Shift<Key>F7
! Ddd*menubar*programMenu.stepi.acceleratorText:  Shift+F7
! 
! Ddd*menubar*programMenu.next.accelerator:       ~Shift<Key>F8
! Ddd*menubar*programMenu.next.acceleratorText:   F8
! 
! Ddd*menubar*programMenu.nexti.accelerator:      Shift<Key>F8
! Ddd*menubar*programMenu.nexti.acceleratorText:  Shift+F8
! 
! Ddd*menubar*programMenu.kill.accelerator:       Ctrl ~Shift<Key>F2
! Ddd*menubar*programMenu.kill.acceleratorText:   Ctrl+F2
! 
! Ddd*menubar*programMenu.cont.accelerator:       ~Ctrl ~Shift<Key>F9
! Ddd*menubar*programMenu.cont.acceleratorText:   F9
! 
! ! This does not exist in the Borland debugger; `cont' also made run.
! Ddd*menubar*programMenu.run.accelerator:        Ctrl ~Shift<Key>F9
! Ddd*menubar*programMenu.run.acceleratorText:    Ctrl+F9
! 
! ! There is no such thing in the Borland debugger, but seems useful to me
! Ddd*menubar*programMenu.finish.accelerator:     ~Shift<Key>F5
! Ddd*menubar*programMenu.finish.acceleratorText: F5
! 
! Ddd*menubar*programMenu.run_again.accelerator:  Ctrl Shift<Key>F9
! Ddd*menubar*programMenu.run_again.acceleratorText:      Ctrl+Shift+F9
! 
! Ddd*menubar*programMenu.separateExecWindow.accelerator:         Meta<Key>F9
! Ddd*menubar*programMenu.separateExecWindow.acceleratorText:     Alt+F9
! 
! ! For future DDD versions:
! ! Ddd*menubar*programMenu.until.accelerator:     <Key>F4
! ! Ddd*menubar*programMenu.until.acceleratorText: F4    
! ! Ddd*menubar*programMenu.until.labelString:     Continue until here
! ! Ddd*menubar*programMenu.until.mnemonic:        H


! ----------------------------------------------------------------------------
! COLORS
! ----------------------------------------------------------------------------

! Make activated toggle buttons shine in red.  Tcl/Tk people like this.
! Ddd*XmToggleButton.fillOnSelect: true
! Ddd*XmToggleButton.selectColor: red4

! Here are some alternate color preferences submitted by Sasvata
! [Shash-wata] Chatterjee <Shash.Chatterjee@aud.alcatel.com>.
!
! Ddd*run.foreground: yellow
! Ddd*run_again.foreground: yellow
! Ddd*break.foreground: tomato3
! Ddd*quit.foreground: tomato3
! Ddd*status_form.led.selectColor: olivedrab
! Ddd*foreground: papayawhip
! Ddd*background: dodgerblue4
! Ddd*XmText.background: tomato3
! Ddd*XmTextField.background: olivedrab
! Ddd*graphEdit.background: olivedrab
! Ddd*graphEdit.foreground: pink
! Ddd*XmList.background: tomato3
! Ddd*graph_edit.nodeColor: papayawhip
! Ddd*graph_edit.edgeColor: papayawhip
! Ddd*graph_edit.selectColor: papayawhip
! Ddd*graph_edit.gridColor: yellow
! Ddd*graph_edit.frameColor: lightblue1
! Ddd*graph_edit.outlineColor: seagreen2
! Ddd*graph_edit.background: tomato3
! Ddd*graph_edit.foreground: papayawhip
! Ddd*graph_edit.shadowColor: yellow
! Ddd*graph_edit_panner.background: tomato3
! Ddd*graph_edit_panner.foreground: papayawhip
! Ddd*graph_edit_panner.shadowColor: yellow
! Ddd*vslDefs:\
! #pragma replace display_color\n\
! #pragma replace title_color\n\
! #pragma replace disabled_color\n\
! #pragma replace simple_color\n\
! #pragma replace pointer_color\n\
! #pragma replace struct_color\n\
! #pragma replace array_color\n\
! #pragma replace reference_color\n\
! display_color(box) = color(box,"papayawhip","grey50");\n\
! title_color(box) = color(box,"mediumaquamarine");\n\
! disabled_color(box) = color(box,"ivory4");\n\
! simple_color(box) = color(box,"palegreen");\n\
! pointer_color(box) = color(box,"orchid");\n\
! struct_color(box) = color(box,"aquamarine");\n\
! array_color(box) = color(box,"orange");\n\
! reference_color(box) = color(box,"indianred");\n


! Matt Maika <mmajka@cs5.dasd.honeywell.com> wonders if
! anyone has a list of resources to give DDD the "SGI look".
! Here's what he's got so far:
! 
! Ddd*sgiMode:                    True
! Ddd*useSchemes:                 All
! Ddd*baseScheme:                 Base
! Ddd*schemeFileList:             Base
! Ddd*paletteFileList:            BaseColorPalette
! Ddd*useEnhancedFSB:             True
! Ddd*background:                 SGI_DYNAMIC BasicBackground
! Ddd*XmText.background:          SGI_DYNAMIC TextFieldBackground
! Ddd*XmTextField.background:     SGI_DYNAMIC TextFieldBackground
! Ddd*GraphEdit.background:       grey90
! Ddd*XmList.background:          SGI_DYNAMIC ScrolledListBackground
! Ddd*graph_edit.nodeColor:       black
! Ddd*graph_edit.edgeColor:       SGI_DYNAMIC BlueColor
! Ddd*graph_edit.selectColor:     black
! Ddd*graph_edit.gridColor:       black
! Ddd*graph_edit.frameColor:      grey50
! Ddd*graph_edit.outlineColor:    grey50
! 
! Some other useful SGI settings (your mileage may vary)
! Ddd*editCommand:              nedit_color -line @LINE@ @FILE@
! Ddd*printCommand:             lp -dPS_LPS_X17
! Ddd*termCommand:                \
! winterm -title 'DDD: Execution Window' -e /bin/sh -c
! Ddd*termType:                   iris-ansi



! ----------------------------------------------------------------------------
! FONTS
! ----------------------------------------------------------------------------


! Here are some nice alternatives.  Try these.

! Ddd*defaultFont:       helvetica-medium
! Ddd*fixedWidthFont:    courier
! Ddd*variableWidthFont: times


! Local Variables:
! font-lock-keywords: (t ("\\(^\\!.*\\|dnl.*\\)" (0 font-lock-comment-face t)) ("@[0-9a-zA-Z@]+" (0 font-lock-variable-name-face)) ("\\(define\\|include\\|ifdef\\)\\b" (0 font-lock-keyword-face)))
! End:
