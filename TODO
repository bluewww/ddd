# $Id$ -*- Text -*-
# The DDD projects.

This is a list of frequently suggested DDD features, which should be
realized in some future DDD release.  If you want to realize one or
more of these projects, please ask us (ddd@ips.cs.tu-bs.de) whether
there are already people working on that project.  Similar, if you
have a project idea, be sure to send it to us such that we may realize
it (or include it in this list :-)

Projects marked with an `*' represent work in progress.
Volunteers for these and other projects are welcome!

001. Have DDD ported to a free widget set -- Athena or lwlib, for
     example.  DDD could then be included in the GNU distribution.

003. Support full annotation mode (`gdb --annotate=2').  This would
     make prompt recognition easier and allow full trace of the current
     GDB status.  Disadvantage: won't work with earlier GDBs and requires
     a major redesign.

004. Have interactive help -- a wrapper to the GDB `help' command.

006. With GDB 4.14 and later, define `graph display' command such that
     a special code is issued which causes DDD to show the display.
     Thus, one could use `graph display' in own definitions.

008. Have buttons arranged such that they do not disappear when the
     window is narrowed.

009. Recognize shared data structures (that is, two displays
     referencing the same object).  This could be achieved by
     comparing display addresses.  See also the mail of
     markusd@cs.tu-berlin.de (Markus Dahm).

011. Have local source files without path indication located via the
     GDB directories setting.  Maybe through the `info source'
     and `show directories' commands?

017. Have the graph editor scroll automatically when the pointer drags
     something out of the visible part of the window.

021. In the manual index, use special fonts for bold keywords.
     [Requires Motif 2.0 and CMText.]

025. Have auto-unfolding for recursive data structures.  Dereferencing
     a pointer P * would automatically select all P * members in the
     referenced structure.

026. Have optional abstraction levels, hiding implementation details.
     Every data type would be assigned an individual VSL function
     determining its representation.

031. Have a three-dimensional data display (using red/green glasses) :-)

033. Call for bug report if `make' fails.  But how?

034. Call for bug report if a fatal X error occurs.

037. Group dereference.  If multiple pointers are selected,
     dereference them all.

044. Disable pointer grabs from the debugged application as soon as
     the Debugger prompt reappears.  But how?

049. albrecht@igpm.rwth-aachen.de (Harald Albrecht):
     The dialog windows (especially the backtrace dialog) should not
     exceed a specific size (at least, they should not be larger than
     the screen :-).  Also, the DDD dialogs should be iconified on
     their own, without always laying on top of the main windows.

050. Include algorithm animation; for instance, in a way similar to
     LENS (see ftp.cc.gatech.edu:pub/people/stasko).  Suggested by
     bruce@liverpool.ac.uk (Bruce Stephens).

054. Adapt DDD to DBX as found on DEC Alpha.  Ruediger Berlich
     <berlich@pc66.mppmu.mpg.de> has a description of the DBX format.

056. Have current arguments (`info args') and local variables (`info
     locals') be displayed.

058. leo@dmbsdi.datamar.com.ar says: I'm using ddd v1.4 with dbx on SGI
     with IRIX 5.3.  1) When I debug inside the operating system I
     receive all the time a window telling that I don't have source.

059. Add `custom' paper sizes (at least A3 has been required)

060. (Insert your project idea here)

